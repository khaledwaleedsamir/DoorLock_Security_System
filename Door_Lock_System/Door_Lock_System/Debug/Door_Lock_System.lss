
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000084a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001524  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a8f  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b1  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000097c  00000000  00000000  00003af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00004471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>


int main(void)
{
	H_Leds_Init();
  82:	0e 94 db 01 	call	0x3b6	; 0x3b6 <H_Leds_Init>
	H_PushButtons_Init(PUSH_BUTTON0);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 12 02 	call	0x424	; 0x424 <H_PushButtons_Init>
	H_Lcd_Init();
  8c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <H_Lcd_Init>
	H_Lcd_WriteNumber(12930);
  90:	62 e8       	ldi	r22, 0x82	; 130
  92:	72 e3       	ldi	r23, 0x32	; 50
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 54 01 	call	0x2a8	; 0x2a8 <H_Lcd_WriteNumber>
	
	
    /* Replace with your application code */
    while (1) 
    {    
		if(H_PushButtons_Read(PUSH_BUTTON0) == PRESSED)
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 27 02 	call	0x44e	; 0x44e <H_PushButtons_Read>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x1a>
		{
			H_Lcd_Clear();
  a6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <H_Lcd_Clear>
			H_Leds_On(LED0);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <H_Leds_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3e>
  c0:	00 00       	nop
			_delay_ms(100);
			H_Leds_Off(LED0);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <H_Leds_Off>
			H_Lcd_WriteString("test LCD");
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3e 01 	call	0x27c	; 0x27c <H_Lcd_WriteString>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x54>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x5e>
  e0:	00 00       	nop
			_delay_ms(100);
			H_Lcd_Clear();
  e2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <H_Lcd_Clear>
  e6:	da cf       	rjmp	.-76     	; 0x9c <main+0x1a>

000000e8 <H_Lcd_WriteChar>:
	H_Lcd_WriteCommand(LCD_RETURN_HOME);

	#endif
}
void H_Lcd_WriteChar(u8 Local_u8_Char)
{
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	#elif LCD_MODE == _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	85 e1       	ldi	r24, 0x15	; 21
  f0:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
	LCD_DATA_PORT = (Local_u8_Char & 0b11110000) | (LCD_DATA_PORT & 0b00001111);
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	9c 2f       	mov	r25, r28
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	89 2b       	or	r24, r25
  fe:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	87 e1       	ldi	r24, 0x17	; 23
 104:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 108:	8f e9       	ldi	r24, 0x9F	; 159
 10a:	9f e0       	ldi	r25, 0x0F	; 15
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <H_Lcd_WriteChar+0x24>
 110:	00 c0       	rjmp	.+0      	; 0x112 <H_Lcd_WriteChar+0x2a>
 112:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	87 e1       	ldi	r24, 0x17	; 23
 118:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 11c:	8f e1       	ldi	r24, 0x1F	; 31
 11e:	9e e4       	ldi	r25, 0x4E	; 78
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <H_Lcd_WriteChar+0x38>
 124:	00 c0       	rjmp	.+0      	; 0x126 <H_Lcd_WriteChar+0x3e>
 126:	00 00       	nop
	_delay_ms(5);
	LCD_DATA_PORT = (Local_u8_Char << 4) | (LCD_DATA_PORT & 0b00001111);
 128:	2b b3       	in	r18, 0x1b	; 27
 12a:	30 e1       	ldi	r19, 0x10	; 16
 12c:	c3 9f       	mul	r28, r19
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	92 2f       	mov	r25, r18
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 2b       	or	r24, r25
 138:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	87 e1       	ldi	r24, 0x17	; 23
 13e:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <H_Lcd_WriteChar+0x5e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <H_Lcd_WriteChar+0x64>
 14c:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	87 e1       	ldi	r24, 0x17	; 23
 152:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <H_Lcd_WriteChar+0x72>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <H_Lcd_WriteChar+0x78>
 160:	00 00       	nop
	_delay_ms(5);
	#endif
}
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <H_Lcd_WriteCommand>:
void H_Lcd_WriteCommand(u8 Local_u8_Command)
{
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
	 M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	 _delay_ms(1);
	 M_Dio_PinWrite(LCD_EN_PIN,LOW);
	 _delay_ms(5);
	 #elif LCD_MODE == _4_BIT_MODE
	 M_Dio_PinWrite(LCD_RS_PIN,LOW);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	85 e1       	ldi	r24, 0x15	; 21
 16e:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
	 LCD_DATA_PORT = (Local_u8_Command & 0b11110000) | (LCD_DATA_PORT & 0b00001111);
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	9c 2f       	mov	r25, r28
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	89 2b       	or	r24, r25
 17c:	8b bb       	out	0x1b, r24	; 27
	 M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	87 e1       	ldi	r24, 0x17	; 23
 182:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <H_Lcd_WriteCommand+0x24>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <H_Lcd_WriteCommand+0x2a>
 190:	00 00       	nop
	 _delay_ms(1);
	 M_Dio_PinWrite(LCD_EN_PIN,LOW);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	87 e1       	ldi	r24, 0x17	; 23
 196:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	9e e4       	ldi	r25, 0x4E	; 78
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <H_Lcd_WriteCommand+0x38>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <H_Lcd_WriteCommand+0x3e>
 1a4:	00 00       	nop
	 _delay_ms(5);
	 LCD_DATA_PORT = (Local_u8_Command << 4) | (LCD_DATA_PORT & 0b00001111);
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	c3 9f       	mul	r28, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	92 2f       	mov	r25, r18
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	8b bb       	out	0x1b, r24	; 27
	 M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	87 e1       	ldi	r24, 0x17	; 23
 1bc:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <H_Lcd_WriteCommand+0x5e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <H_Lcd_WriteCommand+0x64>
 1ca:	00 00       	nop
	 _delay_ms(1);
	 M_Dio_PinWrite(LCD_EN_PIN,LOW);
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	87 e1       	ldi	r24, 0x17	; 23
 1d0:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	9e e4       	ldi	r25, 0x4E	; 78
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <H_Lcd_WriteCommand+0x72>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <H_Lcd_WriteCommand+0x78>
 1de:	00 00       	nop
	 _delay_ms(5);
	 #endif
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <H_Lcd_Init>:
	H_Lcd_WriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
	H_Lcd_WriteCommand(LCD_CLEAR);
	H_Lcd_WriteCommand(LCD_RETURN_HOME);

	#elif LCD_MODE == _4_BIT_MODE
	M_Dio_PinMode(LCD_DATA0_PIN,OUTPUT);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA1_PIN,OUTPUT);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8b e0       	ldi	r24, 0x0B	; 11
 1f0:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA2_PIN,OUTPUT);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA3_PIN,OUTPUT);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8d e0       	ldi	r24, 0x0D	; 13
 200:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA4_PIN,OUTPUT);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA5_PIN,OUTPUT);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA6_PIN,OUTPUT);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA7_PIN,OUTPUT);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	81 e1       	ldi	r24, 0x11	; 17
 220:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>

	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	85 e1       	ldi	r24, 0x15	; 21
 228:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	86 e1       	ldi	r24, 0x16	; 22
 230:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	87 e1       	ldi	r24, 0x17	; 23
 238:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinWrite(LCD_RW_PIN,LOW);
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	86 e1       	ldi	r24, 0x16	; 22
 240:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <H_Lcd_Init+0x66>
 252:	00 c0       	rjmp	.+0      	; 0x254 <H_Lcd_Init+0x70>
 254:	00 00       	nop
	_delay_ms(1000); 
	H_Lcd_WriteCommand(LCD_4BIT_MODE_1);
 256:	83 e3       	ldi	r24, 0x33	; 51
 258:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4BIT_MODE_2);
 25c:	82 e3       	ldi	r24, 0x32	; 50
 25e:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4BIT_MODE_3);
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CLEAR);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
 27a:	08 95       	ret

0000027c <H_Lcd_WriteString>:
	 M_Dio_PinWrite(LCD_EN_PIN,LOW);
	 _delay_ms(5);
	 #endif
}
void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	fc 01       	movw	r30, r24
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
 284:	80 81       	ld	r24, Z
 286:	88 23       	and	r24, r24
 288:	59 f0       	breq	.+22     	; 0x2a0 <H_Lcd_WriteString+0x24>
 28a:	8f 01       	movw	r16, r30
 28c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		H_Lcd_WriteChar(Local_u8_Ptr[Local_u8_Counter]);
 28e:	0e 94 74 00 	call	0xe8	; 0xe8 <H_Lcd_WriteChar>
		Local_u8_Counter++;
 292:	cf 5f       	subi	r28, 0xFF	; 255
	 #endif
}
void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
 294:	f8 01       	movw	r30, r16
 296:	ec 0f       	add	r30, r28
 298:	f1 1d       	adc	r31, r1
 29a:	80 81       	ld	r24, Z
 29c:	81 11       	cpse	r24, r1
 29e:	f7 cf       	rjmp	.-18     	; 0x28e <H_Lcd_WriteString+0x12>
	{
		H_Lcd_WriteChar(Local_u8_Ptr[Local_u8_Counter]);
		Local_u8_Counter++;
	}
}
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <H_Lcd_WriteNumber>:
void H_Lcd_WriteNumber(s32 Local_s32_Number)
{
 2a8:	4f 92       	push	r4
 2aa:	5f 92       	push	r5
 2ac:	6f 92       	push	r6
 2ae:	7f 92       	push	r7
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	2a 97       	sbiw	r28, 0x0a	; 10
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
	u8 Local_u8_Arr [10] = {0};
 2d6:	fe 01       	movw	r30, r28
 2d8:	31 96       	adiw	r30, 0x01	; 1
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	df 01       	movw	r26, r30
 2de:	1d 92       	st	X+, r1
 2e0:	8a 95       	dec	r24
 2e2:	e9 f7       	brne	.-6      	; 0x2de <H_Lcd_WriteNumber+0x36>
	s8 Local_s8_Counter  = 0;
	u8 Local_u8_Digit    = 0;
	if(Local_s32_Number == 0)
 2e4:	c1 14       	cp	r12, r1
 2e6:	d1 04       	cpc	r13, r1
 2e8:	e1 04       	cpc	r14, r1
 2ea:	f1 04       	cpc	r15, r1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <H_Lcd_WriteNumber+0x4e>
	{
		H_Lcd_WriteChar('0');
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	0e 94 74 00 	call	0xe8	; 0xe8 <H_Lcd_WriteChar>
 2f4:	48 c0       	rjmp	.+144    	; 0x386 <H_Lcd_WriteNumber+0xde>
	}
	else
	{
		if(Local_s32_Number < 0)
 2f6:	ff 20       	and	r15, r15
 2f8:	84 f4       	brge	.+32     	; 0x31a <H_Lcd_WriteNumber+0x72>
		{
			H_Lcd_WriteChar('-');
 2fa:	8d e2       	ldi	r24, 0x2D	; 45
 2fc:	0e 94 74 00 	call	0xe8	; 0xe8 <H_Lcd_WriteChar>
			Local_s32_Number = Local_s32_Number * -1;
 300:	f0 94       	com	r15
 302:	e0 94       	com	r14
 304:	d0 94       	com	r13
 306:	c0 94       	com	r12
 308:	c1 1c       	adc	r12, r1
 30a:	d1 1c       	adc	r13, r1
 30c:	e1 1c       	adc	r14, r1
 30e:	f1 1c       	adc	r15, r1
		}
		while(Local_s32_Number != 0)
 310:	c1 14       	cp	r12, r1
 312:	d1 04       	cpc	r13, r1
 314:	e1 04       	cpc	r14, r1
 316:	f1 04       	cpc	r15, r1
 318:	b1 f1       	breq	.+108    	; 0x386 <H_Lcd_WriteNumber+0xde>
		H_Lcd_WriteChar(Local_u8_Ptr[Local_u8_Counter]);
		Local_u8_Counter++;
	}
}
void H_Lcd_WriteNumber(s32 Local_s32_Number)
{
 31a:	10 e0       	ldi	r17, 0x00	; 0
			Local_s32_Number = Local_s32_Number * -1;
		}
		while(Local_s32_Number != 0)
		{
			Local_u8_Digit = Local_s32_Number % 10;
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
 31c:	0f 2e       	mov	r0, r31
 31e:	fa e0       	ldi	r31, 0x0A	; 10
 320:	4f 2e       	mov	r4, r31
 322:	51 2c       	mov	r5, r1
 324:	61 2c       	mov	r6, r1
 326:	71 2c       	mov	r7, r1
 328:	f0 2d       	mov	r31, r0
 32a:	01 c0       	rjmp	.+2      	; 0x32e <H_Lcd_WriteNumber+0x86>
			Local_s8_Counter++;
 32c:	18 2f       	mov	r17, r24
			Local_s32_Number = Local_s32_Number * -1;
		}
		while(Local_s32_Number != 0)
		{
			Local_u8_Digit = Local_s32_Number % 10;
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
 32e:	aa 24       	eor	r10, r10
 330:	a3 94       	inc	r10
 332:	b1 2c       	mov	r11, r1
 334:	ac 0e       	add	r10, r28
 336:	bd 1e       	adc	r11, r29
 338:	a1 0e       	add	r10, r17
 33a:	b1 1c       	adc	r11, r1
 33c:	17 fd       	sbrc	r17, 7
 33e:	ba 94       	dec	r11
 340:	c7 01       	movw	r24, r14
 342:	b6 01       	movw	r22, r12
 344:	a3 01       	movw	r20, r6
 346:	92 01       	movw	r18, r4
 348:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__divmodsi4>
 34c:	f5 01       	movw	r30, r10
 34e:	60 83       	st	Z, r22
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	81 0f       	add	r24, r17
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
 354:	c2 2e       	mov	r12, r18
 356:	d3 2e       	mov	r13, r19
 358:	e4 2e       	mov	r14, r20
 35a:	f5 2e       	mov	r15, r21
		if(Local_s32_Number < 0)
		{
			H_Lcd_WriteChar('-');
			Local_s32_Number = Local_s32_Number * -1;
		}
		while(Local_s32_Number != 0)
 35c:	c1 14       	cp	r12, r1
 35e:	d1 04       	cpc	r13, r1
 360:	e1 04       	cpc	r14, r1
 362:	f1 04       	cpc	r15, r1
 364:	19 f7       	brne	.-58     	; 0x32c <H_Lcd_WriteNumber+0x84>
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
		while(Local_s8_Counter >= 0)
 366:	11 23       	and	r17, r17
 368:	74 f0       	brlt	.+28     	; 0x386 <H_Lcd_WriteNumber+0xde>
		{
			H_Lcd_WriteChar(Local_u8_Arr[Local_s8_Counter] + 48);
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ec 0f       	add	r30, r28
 370:	fd 1f       	adc	r31, r29
 372:	e1 0f       	add	r30, r17
 374:	f1 1d       	adc	r31, r1
 376:	17 fd       	sbrc	r17, 7
 378:	fa 95       	dec	r31
 37a:	80 81       	ld	r24, Z
 37c:	80 5d       	subi	r24, 0xD0	; 208
 37e:	0e 94 74 00 	call	0xe8	; 0xe8 <H_Lcd_WriteChar>
 382:	11 50       	subi	r17, 0x01	; 1
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
		while(Local_s8_Counter >= 0)
 384:	92 f7       	brpl	.-28     	; 0x36a <H_Lcd_WriteNumber+0xc2>
		{
			H_Lcd_WriteChar(Local_u8_Arr[Local_s8_Counter] + 48);
			Local_s8_Counter--;
		}
	}
}
 386:	2a 96       	adiw	r28, 0x0a	; 10
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	bf 90       	pop	r11
 3a2:	af 90       	pop	r10
 3a4:	7f 90       	pop	r7
 3a6:	6f 90       	pop	r6
 3a8:	5f 90       	pop	r5
 3aa:	4f 90       	pop	r4
 3ac:	08 95       	ret

000003ae <H_Lcd_Clear>:
void H_Lcd_Clear(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 b3 00 	call	0x166	; 0x166 <H_Lcd_WriteCommand>
 3b4:	08 95       	ret

000003b6 <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	80 e2       	ldi	r24, 0x20	; 32
 3ba:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	85 e2       	ldi	r24, 0x25	; 37
 3c2:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	8b e2       	ldi	r24, 0x2B	; 43
 3ca:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
 3ce:	08 95       	ret

000003d0 <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	49 f0       	breq	.+18     	; 0x3e6 <H_Leds_On+0x16>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	61 f0       	breq	.+24     	; 0x3f0 <H_Leds_On+0x20>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	71 f4       	brne	.+28     	; 0x3f8 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	80 e2       	ldi	r24, 0x20	; 32
 3e0:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 3e4:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	85 e2       	ldi	r24, 0x25	; 37
 3ea:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 3ee:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	8b e2       	ldi	r24, 0x2B	; 43
 3f4:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 3f8:	08 95       	ret

000003fa <H_Leds_Off>:
		default:                                   break;
	}
}
void H_Leds_Off(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	49 f0       	breq	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	61 f0       	breq	.+24     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	71 f4       	brne	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,LOW);  break;
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	80 e2       	ldi	r24, 0x20	; 32
 40a:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 40e:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,LOW);  break;
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	85 e2       	ldi	r24, 0x25	; 37
 414:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 418:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,LOW);  break;
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	8b e2       	ldi	r24, 0x2B	; 43
 41e:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinWrite>
 422:	08 95       	ret

00000424 <H_PushButtons_Init>:
 *  Author: Khaled_Waleed_Samir_Metwally
 */ 
#include "PushButtons.h"
void H_PushButtons_Init(u8 Local_u8_ButtonNum)
{
	switch(Local_u8_ButtonNum)
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	49 f0       	breq	.+18     	; 0x43a <H_PushButtons_Init+0x16>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	61 f0       	breq	.+24     	; 0x444 <H_PushButtons_Init+0x20>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	71 f4       	brne	.+28     	; 0x44c <H_PushButtons_Init+0x28>
	{
		case PUSH_BUTTON0: M_Dio_PinMode(PUSH_BUTTON0_PIN,INPUT); break;
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	84 e1       	ldi	r24, 0x14	; 20
 434:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
 438:	08 95       	ret
		case PUSH_BUTTON1: M_Dio_PinMode(PUSH_BUTTON1_PIN,INPUT); break;
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	8e e2       	ldi	r24, 0x2E	; 46
 43e:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
 442:	08 95       	ret
		case PUSH_BUTTON2: M_Dio_PinMode(PUSH_BUTTON2_PIN,INPUT); break;
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	8a e2       	ldi	r24, 0x2A	; 42
 448:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinMode>
 44c:	08 95       	ret

0000044e <H_PushButtons_Read>:
	}
}
u8   H_PushButtons_Read(u8 Local_u8_ButtonNum)
{
	u8 Local_u8_Value = RELEASED;
	switch(Local_u8_ButtonNum)
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	09 f1       	breq	.+66     	; 0x494 <H_PushButtons_Read+0x46>
 452:	83 30       	cpi	r24, 0x03	; 3
 454:	c9 f1       	breq	.+114    	; 0x4c8 <H_PushButtons_Read+0x7a>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	09 f0       	breq	.+2      	; 0x45c <H_PushButtons_Read+0xe>
 45a:	50 c0       	rjmp	.+160    	; 0x4fc <H_PushButtons_Read+0xae>
	{
		case PUSH_BUTTON0:
		if(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED)
 45c:	84 e1       	ldi	r24, 0x14	; 20
 45e:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <H_PushButtons_Read+0x1a>
 466:	4c c0       	rjmp	.+152    	; 0x500 <H_PushButtons_Read+0xb2>
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	89 ef       	ldi	r24, 0xF9	; 249
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <H_PushButtons_Read+0x20>
 476:	00 c0       	rjmp	.+0      	; 0x478 <H_PushButtons_Read+0x2a>
 478:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED)
 47a:	84 e1       	ldi	r24, 0x14	; 20
 47c:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	09 f0       	breq	.+2      	; 0x486 <H_PushButtons_Read+0x38>
 484:	3f c0       	rjmp	.+126    	; 0x504 <H_PushButtons_Read+0xb6>
			{
				while(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED);
 486:	84 e1       	ldi	r24, 0x14	; 20
 488:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	d9 f3       	breq	.-10     	; 0x486 <H_PushButtons_Read+0x38>
				Local_u8_Value = PRESSED;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	08 95       	ret
			}
		} break;
		case PUSH_BUTTON1:
		if(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED)
 494:	8e e2       	ldi	r24, 0x2E	; 46
 496:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	a9 f5       	brne	.+106    	; 0x508 <H_PushButtons_Read+0xba>
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	89 ef       	ldi	r24, 0xF9	; 249
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <H_PushButtons_Read+0x56>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <H_PushButtons_Read+0x60>
 4ae:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED)
 4b0:	8e e2       	ldi	r24, 0x2E	; 46
 4b2:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	49 f5       	brne	.+82     	; 0x50c <H_PushButtons_Read+0xbe>
			{
				while(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED);
 4ba:	8e e2       	ldi	r24, 0x2E	; 46
 4bc:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	d9 f3       	breq	.-10     	; 0x4ba <H_PushButtons_Read+0x6c>
				Local_u8_Value = PRESSED;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
			}
		} break;
		case PUSH_BUTTON2:
		if(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED)
 4c8:	8a e2       	ldi	r24, 0x2A	; 42
 4ca:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	f9 f4       	brne	.+62     	; 0x510 <H_PushButtons_Read+0xc2>
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	89 ef       	ldi	r24, 0xF9	; 249
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <H_PushButtons_Read+0x8a>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <H_PushButtons_Read+0x94>
 4e2:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED)
 4e4:	8a e2       	ldi	r24, 0x2A	; 42
 4e6:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	99 f4       	brne	.+38     	; 0x514 <H_PushButtons_Read+0xc6>
			{
				while(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED);
 4ee:	8a e2       	ldi	r24, 0x2A	; 42
 4f0:	0e 94 9e 03 	call	0x73c	; 0x73c <M_Dio_PinRead>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	d9 f3       	breq	.-10     	; 0x4ee <H_PushButtons_Read+0xa0>
				Local_u8_Value = PRESSED;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	08 95       	ret
		default:                                                  break;
	}
}
u8   H_PushButtons_Read(u8 Local_u8_ButtonNum)
{
	u8 Local_u8_Value = RELEASED;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	80 e0       	ldi	r24, 0x00	; 0
			}
		} break;
		default: break;
	}
	return Local_u8_Value;
 516:	08 95       	ret

00000518 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin); break;
		case 2: TogBit(PORTB,Local_u8_Pin); break;
		case 3: TogBit(PORTC,Local_u8_Pin); break;
		case 4: TogBit(PORTD,Local_u8_Pin); break;
 518:	9d ec       	ldi	r25, 0xCD	; 205
 51a:	89 9f       	mul	r24, r25
 51c:	91 2d       	mov	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	29 2f       	mov	r18, r25
 522:	26 95       	lsr	r18
 524:	26 95       	lsr	r18
 526:	26 95       	lsr	r18
 528:	22 0f       	add	r18, r18
 52a:	32 2f       	mov	r19, r18
 52c:	33 0f       	add	r19, r19
 52e:	33 0f       	add	r19, r19
 530:	23 0f       	add	r18, r19
 532:	82 1b       	sub	r24, r18
 534:	28 2f       	mov	r18, r24
 536:	96 95       	lsr	r25
 538:	96 95       	lsr	r25
 53a:	96 95       	lsr	r25
 53c:	61 30       	cpi	r22, 0x01	; 1
 53e:	19 f0       	breq	.+6      	; 0x546 <M_Dio_PinMode+0x2e>
 540:	62 30       	cpi	r22, 0x02	; 2
 542:	c1 f1       	breq	.+112    	; 0x5b4 <M_Dio_PinMode+0x9c>
 544:	08 95       	ret
 546:	92 30       	cpi	r25, 0x02	; 2
 548:	a1 f0       	breq	.+40     	; 0x572 <M_Dio_PinMode+0x5a>
 54a:	18 f4       	brcc	.+6      	; 0x552 <M_Dio_PinMode+0x3a>
 54c:	91 30       	cpi	r25, 0x01	; 1
 54e:	31 f0       	breq	.+12     	; 0x55c <M_Dio_PinMode+0x44>
 550:	08 95       	ret
 552:	93 30       	cpi	r25, 0x03	; 3
 554:	c9 f0       	breq	.+50     	; 0x588 <M_Dio_PinMode+0x70>
 556:	94 30       	cpi	r25, 0x04	; 4
 558:	11 f1       	breq	.+68     	; 0x59e <M_Dio_PinMode+0x86>
 55a:	08 95       	ret
 55c:	3a b3       	in	r19, 0x1a	; 26
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <M_Dio_PinMode+0x50>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	2a 95       	dec	r18
 56a:	e2 f7       	brpl	.-8      	; 0x564 <M_Dio_PinMode+0x4c>
 56c:	83 2b       	or	r24, r19
 56e:	8a bb       	out	0x1a, r24	; 26
 570:	08 95       	ret
 572:	37 b3       	in	r19, 0x17	; 23
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <M_Dio_PinMode+0x66>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	2a 95       	dec	r18
 580:	e2 f7       	brpl	.-8      	; 0x57a <M_Dio_PinMode+0x62>
 582:	83 2b       	or	r24, r19
 584:	87 bb       	out	0x17, r24	; 23
 586:	08 95       	ret
 588:	34 b3       	in	r19, 0x14	; 20
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <M_Dio_PinMode+0x7c>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	2a 95       	dec	r18
 596:	e2 f7       	brpl	.-8      	; 0x590 <M_Dio_PinMode+0x78>
 598:	83 2b       	or	r24, r19
 59a:	84 bb       	out	0x14, r24	; 20
 59c:	08 95       	ret
 59e:	31 b3       	in	r19, 0x11	; 17
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <M_Dio_PinMode+0x92>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	2a 95       	dec	r18
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <M_Dio_PinMode+0x8e>
 5ae:	83 2b       	or	r24, r19
 5b0:	81 bb       	out	0x11, r24	; 17
 5b2:	08 95       	ret
 5b4:	92 30       	cpi	r25, 0x02	; 2
 5b6:	a9 f0       	breq	.+42     	; 0x5e2 <M_Dio_PinMode+0xca>
 5b8:	18 f4       	brcc	.+6      	; 0x5c0 <M_Dio_PinMode+0xa8>
 5ba:	91 30       	cpi	r25, 0x01	; 1
 5bc:	31 f0       	breq	.+12     	; 0x5ca <M_Dio_PinMode+0xb2>
 5be:	08 95       	ret
 5c0:	93 30       	cpi	r25, 0x03	; 3
 5c2:	d9 f0       	breq	.+54     	; 0x5fa <M_Dio_PinMode+0xe2>
 5c4:	94 30       	cpi	r25, 0x04	; 4
 5c6:	29 f1       	breq	.+74     	; 0x612 <M_Dio_PinMode+0xfa>
 5c8:	08 95       	ret
 5ca:	3a b3       	in	r19, 0x1a	; 26
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <M_Dio_PinMode+0xbe>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <M_Dio_PinMode+0xba>
 5da:	80 95       	com	r24
 5dc:	83 23       	and	r24, r19
 5de:	8a bb       	out	0x1a, r24	; 26
 5e0:	08 95       	ret
 5e2:	37 b3       	in	r19, 0x17	; 23
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <M_Dio_PinMode+0xd6>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	2a 95       	dec	r18
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <M_Dio_PinMode+0xd2>
 5f2:	80 95       	com	r24
 5f4:	83 23       	and	r24, r19
 5f6:	87 bb       	out	0x17, r24	; 23
 5f8:	08 95       	ret
 5fa:	34 b3       	in	r19, 0x14	; 20
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <M_Dio_PinMode+0xee>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <M_Dio_PinMode+0xea>
 60a:	80 95       	com	r24
 60c:	83 23       	and	r24, r19
 60e:	84 bb       	out	0x14, r24	; 20
 610:	08 95       	ret
 612:	31 b3       	in	r19, 0x11	; 17
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <M_Dio_PinMode+0x106>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <M_Dio_PinMode+0x102>
 622:	80 95       	com	r24
 624:	83 23       	and	r24, r19
 626:	81 bb       	out	0x11, r24	; 17
 628:	08 95       	ret

0000062a <M_Dio_PinWrite>:
 62a:	9d ec       	ldi	r25, 0xCD	; 205
 62c:	89 9f       	mul	r24, r25
 62e:	91 2d       	mov	r25, r1
 630:	11 24       	eor	r1, r1
 632:	29 2f       	mov	r18, r25
 634:	26 95       	lsr	r18
 636:	26 95       	lsr	r18
 638:	26 95       	lsr	r18
 63a:	22 0f       	add	r18, r18
 63c:	32 2f       	mov	r19, r18
 63e:	33 0f       	add	r19, r19
 640:	33 0f       	add	r19, r19
 642:	23 0f       	add	r18, r19
 644:	82 1b       	sub	r24, r18
 646:	28 2f       	mov	r18, r24
 648:	96 95       	lsr	r25
 64a:	96 95       	lsr	r25
 64c:	96 95       	lsr	r25
 64e:	61 30       	cpi	r22, 0x01	; 1
 650:	19 f0       	breq	.+6      	; 0x658 <M_Dio_PinWrite+0x2e>
 652:	62 30       	cpi	r22, 0x02	; 2
 654:	c1 f1       	breq	.+112    	; 0x6c6 <M_Dio_PinWrite+0x9c>
 656:	08 95       	ret
 658:	92 30       	cpi	r25, 0x02	; 2
 65a:	a1 f0       	breq	.+40     	; 0x684 <M_Dio_PinWrite+0x5a>
 65c:	18 f4       	brcc	.+6      	; 0x664 <M_Dio_PinWrite+0x3a>
 65e:	91 30       	cpi	r25, 0x01	; 1
 660:	31 f0       	breq	.+12     	; 0x66e <M_Dio_PinWrite+0x44>
 662:	08 95       	ret
 664:	93 30       	cpi	r25, 0x03	; 3
 666:	c9 f0       	breq	.+50     	; 0x69a <M_Dio_PinWrite+0x70>
 668:	94 30       	cpi	r25, 0x04	; 4
 66a:	11 f1       	breq	.+68     	; 0x6b0 <M_Dio_PinWrite+0x86>
 66c:	08 95       	ret
 66e:	3b b3       	in	r19, 0x1b	; 27
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <M_Dio_PinWrite+0x50>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <M_Dio_PinWrite+0x4c>
 67e:	83 2b       	or	r24, r19
 680:	8b bb       	out	0x1b, r24	; 27
 682:	08 95       	ret
 684:	38 b3       	in	r19, 0x18	; 24
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <M_Dio_PinWrite+0x66>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	2a 95       	dec	r18
 692:	e2 f7       	brpl	.-8      	; 0x68c <M_Dio_PinWrite+0x62>
 694:	83 2b       	or	r24, r19
 696:	88 bb       	out	0x18, r24	; 24
 698:	08 95       	ret
 69a:	35 b3       	in	r19, 0x15	; 21
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <M_Dio_PinWrite+0x7c>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	2a 95       	dec	r18
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <M_Dio_PinWrite+0x78>
 6aa:	83 2b       	or	r24, r19
 6ac:	85 bb       	out	0x15, r24	; 21
 6ae:	08 95       	ret
 6b0:	32 b3       	in	r19, 0x12	; 18
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <M_Dio_PinWrite+0x92>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	2a 95       	dec	r18
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <M_Dio_PinWrite+0x8e>
 6c0:	83 2b       	or	r24, r19
 6c2:	82 bb       	out	0x12, r24	; 18
 6c4:	08 95       	ret
 6c6:	92 30       	cpi	r25, 0x02	; 2
 6c8:	a9 f0       	breq	.+42     	; 0x6f4 <M_Dio_PinWrite+0xca>
 6ca:	18 f4       	brcc	.+6      	; 0x6d2 <M_Dio_PinWrite+0xa8>
 6cc:	91 30       	cpi	r25, 0x01	; 1
 6ce:	31 f0       	breq	.+12     	; 0x6dc <M_Dio_PinWrite+0xb2>
 6d0:	08 95       	ret
 6d2:	93 30       	cpi	r25, 0x03	; 3
 6d4:	d9 f0       	breq	.+54     	; 0x70c <M_Dio_PinWrite+0xe2>
 6d6:	94 30       	cpi	r25, 0x04	; 4
 6d8:	29 f1       	breq	.+74     	; 0x724 <M_Dio_PinWrite+0xfa>
 6da:	08 95       	ret
 6dc:	3b b3       	in	r19, 0x1b	; 27
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <M_Dio_PinWrite+0xbe>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	2a 95       	dec	r18
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <M_Dio_PinWrite+0xba>
 6ec:	80 95       	com	r24
 6ee:	83 23       	and	r24, r19
 6f0:	8b bb       	out	0x1b, r24	; 27
 6f2:	08 95       	ret
 6f4:	38 b3       	in	r19, 0x18	; 24
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <M_Dio_PinWrite+0xd6>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	2a 95       	dec	r18
 702:	e2 f7       	brpl	.-8      	; 0x6fc <M_Dio_PinWrite+0xd2>
 704:	80 95       	com	r24
 706:	83 23       	and	r24, r19
 708:	88 bb       	out	0x18, r24	; 24
 70a:	08 95       	ret
 70c:	35 b3       	in	r19, 0x15	; 21
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <M_Dio_PinWrite+0xee>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <M_Dio_PinWrite+0xea>
 71c:	80 95       	com	r24
 71e:	83 23       	and	r24, r19
 720:	85 bb       	out	0x15, r24	; 21
 722:	08 95       	ret
 724:	32 b3       	in	r19, 0x12	; 18
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <M_Dio_PinWrite+0x106>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	2a 95       	dec	r18
 732:	e2 f7       	brpl	.-8      	; 0x72c <M_Dio_PinWrite+0x102>
 734:	80 95       	com	r24
 736:	83 23       	and	r24, r19
 738:	82 bb       	out	0x12, r24	; 18
 73a:	08 95       	ret

0000073c <M_Dio_PinRead>:
		default:                            break;
	}
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 73c:	9d ec       	ldi	r25, 0xCD	; 205
 73e:	89 9f       	mul	r24, r25
 740:	91 2d       	mov	r25, r1
 742:	11 24       	eor	r1, r1
 744:	29 2f       	mov	r18, r25
 746:	26 95       	lsr	r18
 748:	26 95       	lsr	r18
 74a:	26 95       	lsr	r18
 74c:	22 0f       	add	r18, r18
 74e:	32 2f       	mov	r19, r18
 750:	33 0f       	add	r19, r19
 752:	33 0f       	add	r19, r19
 754:	23 0f       	add	r18, r19
 756:	82 1b       	sub	r24, r18
 758:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
	switch(Local_u8_Port)
 75a:	89 2f       	mov	r24, r25
 75c:	86 95       	lsr	r24
 75e:	86 95       	lsr	r24
 760:	86 95       	lsr	r24
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	91 f0       	breq	.+36     	; 0x78a <M_Dio_PinRead+0x4e>
 766:	18 f4       	brcc	.+6      	; 0x76e <M_Dio_PinRead+0x32>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	31 f0       	breq	.+12     	; 0x778 <M_Dio_PinRead+0x3c>
 76c:	29 c0       	rjmp	.+82     	; 0x7c0 <M_Dio_PinRead+0x84>
 76e:	83 30       	cpi	r24, 0x03	; 3
 770:	a9 f0       	breq	.+42     	; 0x79c <M_Dio_PinRead+0x60>
 772:	84 30       	cpi	r24, 0x04	; 4
 774:	e1 f0       	breq	.+56     	; 0x7ae <M_Dio_PinRead+0x72>
 776:	24 c0       	rjmp	.+72     	; 0x7c0 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_PinValue = GetBit(PINA,Local_u8_Pin); break;
 778:	89 b3       	in	r24, 0x19	; 25
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <M_Dio_PinRead+0x46>
 77e:	95 95       	asr	r25
 780:	87 95       	ror	r24
 782:	2a 95       	dec	r18
 784:	e2 f7       	brpl	.-8      	; 0x77e <M_Dio_PinRead+0x42>
 786:	81 70       	andi	r24, 0x01	; 1
 788:	08 95       	ret
		case 2: Local_u8_PinValue = GetBit(PINB,Local_u8_Pin); break;
 78a:	86 b3       	in	r24, 0x16	; 22
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <M_Dio_PinRead+0x58>
 790:	95 95       	asr	r25
 792:	87 95       	ror	r24
 794:	2a 95       	dec	r18
 796:	e2 f7       	brpl	.-8      	; 0x790 <M_Dio_PinRead+0x54>
 798:	81 70       	andi	r24, 0x01	; 1
 79a:	08 95       	ret
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
 79c:	83 b3       	in	r24, 0x13	; 19
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <M_Dio_PinRead+0x6a>
 7a2:	95 95       	asr	r25
 7a4:	87 95       	ror	r24
 7a6:	2a 95       	dec	r18
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <M_Dio_PinRead+0x66>
 7aa:	81 70       	andi	r24, 0x01	; 1
 7ac:	08 95       	ret
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
 7ae:	80 b3       	in	r24, 0x10	; 16
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <M_Dio_PinRead+0x7c>
 7b4:	95 95       	asr	r25
 7b6:	87 95       	ror	r24
 7b8:	2a 95       	dec	r18
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <M_Dio_PinRead+0x78>
 7bc:	81 70       	andi	r24, 0x01	; 1
 7be:	08 95       	ret
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
 7c0:	80 e0       	ldi	r24, 0x00	; 0
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
		default:                                               break;
	}
	return Local_u8_PinValue;
}
 7c2:	08 95       	ret

000007c4 <__divmodsi4>:
 7c4:	05 2e       	mov	r0, r21
 7c6:	97 fb       	bst	r25, 7
 7c8:	1e f4       	brtc	.+6      	; 0x7d0 <__divmodsi4+0xc>
 7ca:	00 94       	com	r0
 7cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__negsi2>
 7d0:	57 fd       	sbrc	r21, 7
 7d2:	07 d0       	rcall	.+14     	; 0x7e2 <__divmodsi4_neg2>
 7d4:	0e 94 01 04 	call	0x802	; 0x802 <__udivmodsi4>
 7d8:	07 fc       	sbrc	r0, 7
 7da:	03 d0       	rcall	.+6      	; 0x7e2 <__divmodsi4_neg2>
 7dc:	4e f4       	brtc	.+18     	; 0x7f0 <__divmodsi4_exit>
 7de:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__negsi2>

000007e2 <__divmodsi4_neg2>:
 7e2:	50 95       	com	r21
 7e4:	40 95       	com	r20
 7e6:	30 95       	com	r19
 7e8:	21 95       	neg	r18
 7ea:	3f 4f       	sbci	r19, 0xFF	; 255
 7ec:	4f 4f       	sbci	r20, 0xFF	; 255
 7ee:	5f 4f       	sbci	r21, 0xFF	; 255

000007f0 <__divmodsi4_exit>:
 7f0:	08 95       	ret

000007f2 <__negsi2>:
 7f2:	90 95       	com	r25
 7f4:	80 95       	com	r24
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__udivmodsi4>:
 802:	a1 e2       	ldi	r26, 0x21	; 33
 804:	1a 2e       	mov	r1, r26
 806:	aa 1b       	sub	r26, r26
 808:	bb 1b       	sub	r27, r27
 80a:	fd 01       	movw	r30, r26
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__udivmodsi4_ep>

0000080e <__udivmodsi4_loop>:
 80e:	aa 1f       	adc	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	ee 1f       	adc	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	a2 17       	cp	r26, r18
 818:	b3 07       	cpc	r27, r19
 81a:	e4 07       	cpc	r30, r20
 81c:	f5 07       	cpc	r31, r21
 81e:	20 f0       	brcs	.+8      	; 0x828 <__udivmodsi4_ep>
 820:	a2 1b       	sub	r26, r18
 822:	b3 0b       	sbc	r27, r19
 824:	e4 0b       	sbc	r30, r20
 826:	f5 0b       	sbc	r31, r21

00000828 <__udivmodsi4_ep>:
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a 94       	dec	r1
 832:	69 f7       	brne	.-38     	; 0x80e <__udivmodsi4_loop>
 834:	60 95       	com	r22
 836:	70 95       	com	r23
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	bd 01       	movw	r22, r26
 842:	cf 01       	movw	r24, r30
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
