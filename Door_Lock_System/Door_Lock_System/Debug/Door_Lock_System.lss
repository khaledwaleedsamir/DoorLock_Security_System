
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d4a  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000713  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004be  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c4  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	H_Leds_Init();
  6c:	0e 94 4f 00 	call	0x9e	; 0x9e <H_Leds_Init>
	H_PushButtons_Init(PUSH_BUTTON0);
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 86 00 	call	0x10c	; 0x10c <H_PushButtons_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		if(H_PushButtons_Read(PUSH_BUTTON0) == PRESSED)
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 9b 00 	call	0x136	; 0x136 <H_PushButtons_Read>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	11 f4       	brne	.+4      	; 0x84 <main+0x18>
		{
			H_Leds_On(LED0);
  80:	0e 94 5c 00 	call	0xb8	; 0xb8 <H_Leds_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
		}
		_delay_ms(100);
		H_Leds_Off(LED0);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 71 00 	call	0xe2	; 0xe2 <H_Leds_Off>
		
    }
  9c:	ec cf       	rjmp	.-40     	; 0x76 <main+0xa>

0000009e <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	85 e2       	ldi	r24, 0x25	; 37
  aa:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
  b6:	08 95       	ret

000000b8 <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	49 f0       	breq	.+18     	; 0xce <H_Leds_On+0x16>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	61 f0       	breq	.+24     	; 0xd8 <H_Leds_On+0x20>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	71 f4       	brne	.+28     	; 0xe0 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
  cc:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	85 e2       	ldi	r24, 0x25	; 37
  d2:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
  d6:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	8b e2       	ldi	r24, 0x2B	; 43
  dc:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
  e0:	08 95       	ret

000000e2 <H_Leds_Off>:
		default:                                   break;
	}
}
void H_Leds_Off(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	49 f0       	breq	.+18     	; 0xf8 <H_Leds_Off+0x16>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	61 f0       	breq	.+24     	; 0x102 <H_Leds_Off+0x20>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	71 f4       	brne	.+28     	; 0x10a <H_Leds_Off+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,LOW);  break;
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
  f6:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,LOW);  break;
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
 100:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,LOW);  break;
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	8b e2       	ldi	r24, 0x2B	; 43
 106:	0e 94 89 01 	call	0x312	; 0x312 <M_Dio_PinWrite>
 10a:	08 95       	ret

0000010c <H_PushButtons_Init>:
 *  Author: Khaled_Waleed_Samir_Metwally
 */ 
#include "PushButtons.h"
void H_PushButtons_Init(u8 Local_u8_ButtonNum)
{
	switch(Local_u8_ButtonNum)
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	49 f0       	breq	.+18     	; 0x122 <H_PushButtons_Init+0x16>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	61 f0       	breq	.+24     	; 0x12c <H_PushButtons_Init+0x20>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	71 f4       	brne	.+28     	; 0x134 <H_PushButtons_Init+0x28>
	{
		case PUSH_BUTTON0: M_Dio_PinMode(PUSH_BUTTON0_PIN,INPUT); break;
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	84 e1       	ldi	r24, 0x14	; 20
 11c:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
 120:	08 95       	ret
		case PUSH_BUTTON1: M_Dio_PinMode(PUSH_BUTTON1_PIN,INPUT); break;
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	8e e2       	ldi	r24, 0x2E	; 46
 126:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
 12a:	08 95       	ret
		case PUSH_BUTTON2: M_Dio_PinMode(PUSH_BUTTON2_PIN,INPUT); break;
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	8a e2       	ldi	r24, 0x2A	; 42
 130:	0e 94 00 01 	call	0x200	; 0x200 <M_Dio_PinMode>
 134:	08 95       	ret

00000136 <H_PushButtons_Read>:
	}
}
u8   H_PushButtons_Read(u8 Local_u8_ButtonNum)
{
	u8 Local_u8_Value = RELEASED;
	switch(Local_u8_ButtonNum)
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	09 f1       	breq	.+66     	; 0x17c <H_PushButtons_Read+0x46>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	c9 f1       	breq	.+114    	; 0x1b0 <H_PushButtons_Read+0x7a>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	09 f0       	breq	.+2      	; 0x144 <H_PushButtons_Read+0xe>
 142:	50 c0       	rjmp	.+160    	; 0x1e4 <H_PushButtons_Read+0xae>
	{
		case PUSH_BUTTON0:
		if(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED)
 144:	84 e1       	ldi	r24, 0x14	; 20
 146:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	09 f0       	breq	.+2      	; 0x150 <H_PushButtons_Read+0x1a>
 14e:	4c c0       	rjmp	.+152    	; 0x1e8 <H_PushButtons_Read+0xb2>
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <H_PushButtons_Read+0x20>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <H_PushButtons_Read+0x2a>
 160:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED)
 162:	84 e1       	ldi	r24, 0x14	; 20
 164:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <H_PushButtons_Read+0x38>
 16c:	3f c0       	rjmp	.+126    	; 0x1ec <H_PushButtons_Read+0xb6>
			{
				while(M_Dio_PinRead(PUSH_BUTTON0_PIN) == PRESSED);
 16e:	84 e1       	ldi	r24, 0x14	; 20
 170:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	d9 f3       	breq	.-10     	; 0x16e <H_PushButtons_Read+0x38>
				Local_u8_Value = PRESSED;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
			}
		} break;
		case PUSH_BUTTON1:
		if(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED)
 17c:	8e e2       	ldi	r24, 0x2E	; 46
 17e:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	a9 f5       	brne	.+106    	; 0x1f0 <H_PushButtons_Read+0xba>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <H_PushButtons_Read+0x56>
 194:	00 c0       	rjmp	.+0      	; 0x196 <H_PushButtons_Read+0x60>
 196:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED)
 198:	8e e2       	ldi	r24, 0x2E	; 46
 19a:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	49 f5       	brne	.+82     	; 0x1f4 <H_PushButtons_Read+0xbe>
			{
				while(M_Dio_PinRead(PUSH_BUTTON1_PIN) == PRESSED);
 1a2:	8e e2       	ldi	r24, 0x2E	; 46
 1a4:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	d9 f3       	breq	.-10     	; 0x1a2 <H_PushButtons_Read+0x6c>
				Local_u8_Value = PRESSED;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
			}
		} break;
		case PUSH_BUTTON2:
		if(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED)
 1b0:	8a e2       	ldi	r24, 0x2A	; 42
 1b2:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	f9 f4       	brne	.+62     	; 0x1f8 <H_PushButtons_Read+0xc2>
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	89 ef       	ldi	r24, 0xF9	; 249
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <H_PushButtons_Read+0x8a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <H_PushButtons_Read+0x94>
 1ca:	00 00       	nop
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED)
 1cc:	8a e2       	ldi	r24, 0x2A	; 42
 1ce:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	99 f4       	brne	.+38     	; 0x1fc <H_PushButtons_Read+0xc6>
			{
				while(M_Dio_PinRead(PUSH_BUTTON2_PIN) == PRESSED);
 1d6:	8a e2       	ldi	r24, 0x2A	; 42
 1d8:	0e 94 12 02 	call	0x424	; 0x424 <M_Dio_PinRead>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	d9 f3       	breq	.-10     	; 0x1d6 <H_PushButtons_Read+0xa0>
				Local_u8_Value = PRESSED;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
		default:                                                  break;
	}
}
u8   H_PushButtons_Read(u8 Local_u8_ButtonNum)
{
	u8 Local_u8_Value = RELEASED;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
 1fc:	80 e0       	ldi	r24, 0x00	; 0
			}
		} break;
		default: break;
	}
	return Local_u8_Value;
 1fe:	08 95       	ret

00000200 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin); break;
		case 2: TogBit(PORTB,Local_u8_Pin); break;
		case 3: TogBit(PORTC,Local_u8_Pin); break;
		case 4: TogBit(PORTD,Local_u8_Pin); break;
 200:	9d ec       	ldi	r25, 0xCD	; 205
 202:	89 9f       	mul	r24, r25
 204:	91 2d       	mov	r25, r1
 206:	11 24       	eor	r1, r1
 208:	29 2f       	mov	r18, r25
 20a:	26 95       	lsr	r18
 20c:	26 95       	lsr	r18
 20e:	26 95       	lsr	r18
 210:	22 0f       	add	r18, r18
 212:	32 2f       	mov	r19, r18
 214:	33 0f       	add	r19, r19
 216:	33 0f       	add	r19, r19
 218:	23 0f       	add	r18, r19
 21a:	82 1b       	sub	r24, r18
 21c:	28 2f       	mov	r18, r24
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
 222:	96 95       	lsr	r25
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	19 f0       	breq	.+6      	; 0x22e <M_Dio_PinMode+0x2e>
 228:	62 30       	cpi	r22, 0x02	; 2
 22a:	c1 f1       	breq	.+112    	; 0x29c <M_Dio_PinMode+0x9c>
 22c:	08 95       	ret
 22e:	92 30       	cpi	r25, 0x02	; 2
 230:	a1 f0       	breq	.+40     	; 0x25a <M_Dio_PinMode+0x5a>
 232:	18 f4       	brcc	.+6      	; 0x23a <M_Dio_PinMode+0x3a>
 234:	91 30       	cpi	r25, 0x01	; 1
 236:	31 f0       	breq	.+12     	; 0x244 <M_Dio_PinMode+0x44>
 238:	08 95       	ret
 23a:	93 30       	cpi	r25, 0x03	; 3
 23c:	c9 f0       	breq	.+50     	; 0x270 <M_Dio_PinMode+0x70>
 23e:	94 30       	cpi	r25, 0x04	; 4
 240:	11 f1       	breq	.+68     	; 0x286 <M_Dio_PinMode+0x86>
 242:	08 95       	ret
 244:	3a b3       	in	r19, 0x1a	; 26
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <M_Dio_PinMode+0x50>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	2a 95       	dec	r18
 252:	e2 f7       	brpl	.-8      	; 0x24c <M_Dio_PinMode+0x4c>
 254:	83 2b       	or	r24, r19
 256:	8a bb       	out	0x1a, r24	; 26
 258:	08 95       	ret
 25a:	37 b3       	in	r19, 0x17	; 23
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <M_Dio_PinMode+0x66>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	2a 95       	dec	r18
 268:	e2 f7       	brpl	.-8      	; 0x262 <M_Dio_PinMode+0x62>
 26a:	83 2b       	or	r24, r19
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
 270:	34 b3       	in	r19, 0x14	; 20
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <M_Dio_PinMode+0x7c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	2a 95       	dec	r18
 27e:	e2 f7       	brpl	.-8      	; 0x278 <M_Dio_PinMode+0x78>
 280:	83 2b       	or	r24, r19
 282:	84 bb       	out	0x14, r24	; 20
 284:	08 95       	ret
 286:	31 b3       	in	r19, 0x11	; 17
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <M_Dio_PinMode+0x92>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	2a 95       	dec	r18
 294:	e2 f7       	brpl	.-8      	; 0x28e <M_Dio_PinMode+0x8e>
 296:	83 2b       	or	r24, r19
 298:	81 bb       	out	0x11, r24	; 17
 29a:	08 95       	ret
 29c:	92 30       	cpi	r25, 0x02	; 2
 29e:	a9 f0       	breq	.+42     	; 0x2ca <M_Dio_PinMode+0xca>
 2a0:	18 f4       	brcc	.+6      	; 0x2a8 <M_Dio_PinMode+0xa8>
 2a2:	91 30       	cpi	r25, 0x01	; 1
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <M_Dio_PinMode+0xb2>
 2a6:	08 95       	ret
 2a8:	93 30       	cpi	r25, 0x03	; 3
 2aa:	d9 f0       	breq	.+54     	; 0x2e2 <M_Dio_PinMode+0xe2>
 2ac:	94 30       	cpi	r25, 0x04	; 4
 2ae:	29 f1       	breq	.+74     	; 0x2fa <M_Dio_PinMode+0xfa>
 2b0:	08 95       	ret
 2b2:	3a b3       	in	r19, 0x1a	; 26
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <M_Dio_PinMode+0xbe>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	2a 95       	dec	r18
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <M_Dio_PinMode+0xba>
 2c2:	80 95       	com	r24
 2c4:	83 23       	and	r24, r19
 2c6:	8a bb       	out	0x1a, r24	; 26
 2c8:	08 95       	ret
 2ca:	37 b3       	in	r19, 0x17	; 23
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <M_Dio_PinMode+0xd6>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	2a 95       	dec	r18
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <M_Dio_PinMode+0xd2>
 2da:	80 95       	com	r24
 2dc:	83 23       	and	r24, r19
 2de:	87 bb       	out	0x17, r24	; 23
 2e0:	08 95       	ret
 2e2:	34 b3       	in	r19, 0x14	; 20
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <M_Dio_PinMode+0xee>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	2a 95       	dec	r18
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <M_Dio_PinMode+0xea>
 2f2:	80 95       	com	r24
 2f4:	83 23       	and	r24, r19
 2f6:	84 bb       	out	0x14, r24	; 20
 2f8:	08 95       	ret
 2fa:	31 b3       	in	r19, 0x11	; 17
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <M_Dio_PinMode+0x106>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	2a 95       	dec	r18
 308:	e2 f7       	brpl	.-8      	; 0x302 <M_Dio_PinMode+0x102>
 30a:	80 95       	com	r24
 30c:	83 23       	and	r24, r19
 30e:	81 bb       	out	0x11, r24	; 17
 310:	08 95       	ret

00000312 <M_Dio_PinWrite>:
 312:	9d ec       	ldi	r25, 0xCD	; 205
 314:	89 9f       	mul	r24, r25
 316:	91 2d       	mov	r25, r1
 318:	11 24       	eor	r1, r1
 31a:	29 2f       	mov	r18, r25
 31c:	26 95       	lsr	r18
 31e:	26 95       	lsr	r18
 320:	26 95       	lsr	r18
 322:	22 0f       	add	r18, r18
 324:	32 2f       	mov	r19, r18
 326:	33 0f       	add	r19, r19
 328:	33 0f       	add	r19, r19
 32a:	23 0f       	add	r18, r19
 32c:	82 1b       	sub	r24, r18
 32e:	28 2f       	mov	r18, r24
 330:	96 95       	lsr	r25
 332:	96 95       	lsr	r25
 334:	96 95       	lsr	r25
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	19 f0       	breq	.+6      	; 0x340 <M_Dio_PinWrite+0x2e>
 33a:	62 30       	cpi	r22, 0x02	; 2
 33c:	c1 f1       	breq	.+112    	; 0x3ae <M_Dio_PinWrite+0x9c>
 33e:	08 95       	ret
 340:	92 30       	cpi	r25, 0x02	; 2
 342:	a1 f0       	breq	.+40     	; 0x36c <M_Dio_PinWrite+0x5a>
 344:	18 f4       	brcc	.+6      	; 0x34c <M_Dio_PinWrite+0x3a>
 346:	91 30       	cpi	r25, 0x01	; 1
 348:	31 f0       	breq	.+12     	; 0x356 <M_Dio_PinWrite+0x44>
 34a:	08 95       	ret
 34c:	93 30       	cpi	r25, 0x03	; 3
 34e:	c9 f0       	breq	.+50     	; 0x382 <M_Dio_PinWrite+0x70>
 350:	94 30       	cpi	r25, 0x04	; 4
 352:	11 f1       	breq	.+68     	; 0x398 <M_Dio_PinWrite+0x86>
 354:	08 95       	ret
 356:	3b b3       	in	r19, 0x1b	; 27
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <M_Dio_PinWrite+0x50>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	2a 95       	dec	r18
 364:	e2 f7       	brpl	.-8      	; 0x35e <M_Dio_PinWrite+0x4c>
 366:	83 2b       	or	r24, r19
 368:	8b bb       	out	0x1b, r24	; 27
 36a:	08 95       	ret
 36c:	38 b3       	in	r19, 0x18	; 24
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <M_Dio_PinWrite+0x66>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <M_Dio_PinWrite+0x62>
 37c:	83 2b       	or	r24, r19
 37e:	88 bb       	out	0x18, r24	; 24
 380:	08 95       	ret
 382:	35 b3       	in	r19, 0x15	; 21
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <M_Dio_PinWrite+0x7c>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <M_Dio_PinWrite+0x78>
 392:	83 2b       	or	r24, r19
 394:	85 bb       	out	0x15, r24	; 21
 396:	08 95       	ret
 398:	32 b3       	in	r19, 0x12	; 18
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <M_Dio_PinWrite+0x92>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	2a 95       	dec	r18
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <M_Dio_PinWrite+0x8e>
 3a8:	83 2b       	or	r24, r19
 3aa:	82 bb       	out	0x12, r24	; 18
 3ac:	08 95       	ret
 3ae:	92 30       	cpi	r25, 0x02	; 2
 3b0:	a9 f0       	breq	.+42     	; 0x3dc <M_Dio_PinWrite+0xca>
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <M_Dio_PinWrite+0xa8>
 3b4:	91 30       	cpi	r25, 0x01	; 1
 3b6:	31 f0       	breq	.+12     	; 0x3c4 <M_Dio_PinWrite+0xb2>
 3b8:	08 95       	ret
 3ba:	93 30       	cpi	r25, 0x03	; 3
 3bc:	d9 f0       	breq	.+54     	; 0x3f4 <M_Dio_PinWrite+0xe2>
 3be:	94 30       	cpi	r25, 0x04	; 4
 3c0:	29 f1       	breq	.+74     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3c2:	08 95       	ret
 3c4:	3b b3       	in	r19, 0x1b	; 27
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <M_Dio_PinWrite+0xbe>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	2a 95       	dec	r18
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <M_Dio_PinWrite+0xba>
 3d4:	80 95       	com	r24
 3d6:	83 23       	and	r24, r19
 3d8:	8b bb       	out	0x1b, r24	; 27
 3da:	08 95       	ret
 3dc:	38 b3       	in	r19, 0x18	; 24
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <M_Dio_PinWrite+0xd6>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	2a 95       	dec	r18
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <M_Dio_PinWrite+0xd2>
 3ec:	80 95       	com	r24
 3ee:	83 23       	and	r24, r19
 3f0:	88 bb       	out	0x18, r24	; 24
 3f2:	08 95       	ret
 3f4:	35 b3       	in	r19, 0x15	; 21
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <M_Dio_PinWrite+0xea>
 404:	80 95       	com	r24
 406:	83 23       	and	r24, r19
 408:	85 bb       	out	0x15, r24	; 21
 40a:	08 95       	ret
 40c:	32 b3       	in	r19, 0x12	; 18
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	83 23       	and	r24, r19
 420:	82 bb       	out	0x12, r24	; 18
 422:	08 95       	ret

00000424 <M_Dio_PinRead>:
		default:                            break;
	}
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 424:	9d ec       	ldi	r25, 0xCD	; 205
 426:	89 9f       	mul	r24, r25
 428:	91 2d       	mov	r25, r1
 42a:	11 24       	eor	r1, r1
 42c:	29 2f       	mov	r18, r25
 42e:	26 95       	lsr	r18
 430:	26 95       	lsr	r18
 432:	26 95       	lsr	r18
 434:	22 0f       	add	r18, r18
 436:	32 2f       	mov	r19, r18
 438:	33 0f       	add	r19, r19
 43a:	33 0f       	add	r19, r19
 43c:	23 0f       	add	r18, r19
 43e:	82 1b       	sub	r24, r18
 440:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
	switch(Local_u8_Port)
 442:	89 2f       	mov	r24, r25
 444:	86 95       	lsr	r24
 446:	86 95       	lsr	r24
 448:	86 95       	lsr	r24
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	91 f0       	breq	.+36     	; 0x472 <M_Dio_PinRead+0x4e>
 44e:	18 f4       	brcc	.+6      	; 0x456 <M_Dio_PinRead+0x32>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	31 f0       	breq	.+12     	; 0x460 <M_Dio_PinRead+0x3c>
 454:	29 c0       	rjmp	.+82     	; 0x4a8 <M_Dio_PinRead+0x84>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	a9 f0       	breq	.+42     	; 0x484 <M_Dio_PinRead+0x60>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	e1 f0       	breq	.+56     	; 0x496 <M_Dio_PinRead+0x72>
 45e:	24 c0       	rjmp	.+72     	; 0x4a8 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_PinValue = GetBit(PINA,Local_u8_Pin); break;
 460:	89 b3       	in	r24, 0x19	; 25
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <M_Dio_PinRead+0x46>
 466:	95 95       	asr	r25
 468:	87 95       	ror	r24
 46a:	2a 95       	dec	r18
 46c:	e2 f7       	brpl	.-8      	; 0x466 <M_Dio_PinRead+0x42>
 46e:	81 70       	andi	r24, 0x01	; 1
 470:	08 95       	ret
		case 2: Local_u8_PinValue = GetBit(PINB,Local_u8_Pin); break;
 472:	86 b3       	in	r24, 0x16	; 22
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <M_Dio_PinRead+0x58>
 478:	95 95       	asr	r25
 47a:	87 95       	ror	r24
 47c:	2a 95       	dec	r18
 47e:	e2 f7       	brpl	.-8      	; 0x478 <M_Dio_PinRead+0x54>
 480:	81 70       	andi	r24, 0x01	; 1
 482:	08 95       	ret
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
 484:	83 b3       	in	r24, 0x13	; 19
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <M_Dio_PinRead+0x6a>
 48a:	95 95       	asr	r25
 48c:	87 95       	ror	r24
 48e:	2a 95       	dec	r18
 490:	e2 f7       	brpl	.-8      	; 0x48a <M_Dio_PinRead+0x66>
 492:	81 70       	andi	r24, 0x01	; 1
 494:	08 95       	ret
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
 496:	80 b3       	in	r24, 0x10	; 16
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <M_Dio_PinRead+0x7c>
 49c:	95 95       	asr	r25
 49e:	87 95       	ror	r24
 4a0:	2a 95       	dec	r18
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <M_Dio_PinRead+0x78>
 4a4:	81 70       	andi	r24, 0x01	; 1
 4a6:	08 95       	ret
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
		default:                                               break;
	}
	return Local_u8_PinValue;
}
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
