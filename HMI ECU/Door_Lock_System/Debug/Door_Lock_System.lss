
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000088e  00000922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000b0  008000b0  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001714  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a12  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc9  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000668  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e6  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000049a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 45 04 	jmp	0x88a	; 0x88a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "System.h"

int main(void)
{
	A_System_Init();
  92:	0e 94 50 00 	call	0xa0	; 0xa0 <A_System_Init>
	while (1)
	{
		A_System_EnterPassword();
  96:	0e 94 66 00 	call	0xcc	; 0xcc <A_System_EnterPassword>
		A_System_CheckPassword();
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <A_System_CheckPassword>
  9e:	fb cf       	rjmp	.-10     	; 0x96 <main+0x4>

000000a0 <A_System_Init>:
u16 Global_u16_Trials  = 0;

// System Functions
void A_System_Init(void)
{
	H_Lcd_Init();
  a0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <H_Lcd_Init>
	H_Keypad_Init();
  a4:	0e 94 cf 00 	call	0x19e	; 0x19e <H_Keypad_Init>
	M_Uart_Init();
  a8:	0e 94 33 04 	call	0x866	; 0x866 <M_Uart_Init>
	H_Lcd_WriteString("Welcome !");
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 3a 02 	call	0x474	; 0x474 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <A_System_Init+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <A_System_Init+0x24>
  c4:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Clear();
  c6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
  ca:	08 95       	ret

000000cc <A_System_EnterPassword>:
}
void A_System_EnterPassword(void)
{
	Global_u8_SentMsg = H_Keypad_Read();
  cc:	0e 94 10 01 	call	0x220	; 0x220 <H_Keypad_Read>
  d0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <Global_u8_SentMsg>
	if(Global_u8_SentMsg != 0)
  d4:	88 23       	and	r24, r24
  d6:	79 f0       	breq	.+30     	; 0xf6 <A_System_EnterPassword+0x2a>
	{
		H_Lcd_WriteChar(Global_u8_SentMsg);
  d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <H_Lcd_WriteChar>
		M_Uart_Transmit(Global_u8_SentMsg);
  dc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <Global_u8_SentMsg>
  e0:	0e 94 3d 04 	call	0x87a	; 0x87a <M_Uart_Transmit>
		Global_u16_CharCounter++;
  e4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Global_u16_CharCounter>
  e8:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Global_u16_CharCounter+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Global_u16_CharCounter+0x1>
  f2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Global_u16_CharCounter>
  f6:	08 95       	ret

000000f8 <A_System_CheckPassword>:
	}
}
void A_System_CheckPassword(void)
{
	if(Global_u16_CharCounter == PASSWORD_SIZE)
  f8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Global_u16_CharCounter>
  fc:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Global_u16_CharCounter+0x1>
 100:	04 97       	sbiw	r24, 0x04	; 4
 102:	09 f0       	breq	.+2      	; 0x106 <A_System_CheckPassword+0xe>
 104:	4b c0       	rjmp	.+150    	; 0x19c <A_System_CheckPassword+0xa4>
	{
		Global_u8_RecievedMsg = M_Uart_Receive();
 106:	0e 94 41 04 	call	0x882	; 0x882 <M_Uart_Receive>
 10a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Global_u8_RecievedMsg>
		if(Global_u8_RecievedMsg == 'T')
 10e:	84 35       	cpi	r24, 0x54	; 84
 110:	31 f4       	brne	.+12     	; 0x11e <A_System_CheckPassword+0x26>
		{
			H_Lcd_Clear();
 112:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
			H_Lcd_WriteString("Opening !");
 116:	8a e7       	ldi	r24, 0x7A	; 122
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 3a 02 	call	0x474	; 0x474 <H_Lcd_WriteString>
		}
		if(Global_u8_RecievedMsg == 'F')
 11e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Global_u8_RecievedMsg>
 122:	86 34       	cpi	r24, 0x46	; 70
 124:	d9 f5       	brne	.+118    	; 0x19c <A_System_CheckPassword+0xa4>
		{
			Global_u16_Trials++;
 126:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
 12a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__data_end+0x1>
 134:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
			if(Global_u16_Trials < MAX_TRIALS)
 138:	03 97       	sbiw	r24, 0x03	; 3
 13a:	50 f5       	brcc	.+84     	; 0x190 <A_System_CheckPassword+0x98>
			{
				H_Lcd_Clear();
 13c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
				H_Lcd_WriteString("Wrong Password");
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 3a 02 	call	0x474	; 0x474 <H_Lcd_WriteString>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	87 ea       	ldi	r24, 0xA7	; 167
 14c:	91 e6       	ldi	r25, 0x61	; 97
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <A_System_CheckPassword+0x56>
 156:	00 c0       	rjmp	.+0      	; 0x158 <A_System_CheckPassword+0x60>
 158:	00 00       	nop
				_delay_ms(2000);
				H_Lcd_Clear();
 15a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
				H_Lcd_WriteString("Enter Password");
 15e:	83 e9       	ldi	r24, 0x93	; 147
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 3a 02 	call	0x474	; 0x474 <H_Lcd_WriteString>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	87 ea       	ldi	r24, 0xA7	; 167
 16a:	91 e6       	ldi	r25, 0x61	; 97
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <A_System_CheckPassword+0x74>
 174:	00 c0       	rjmp	.+0      	; 0x176 <A_System_CheckPassword+0x7e>
 176:	00 00       	nop
				_delay_ms(2000);
				H_Lcd_Clear();
 178:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
				Global_u16_CharCounter = 0;
 17c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <Global_u16_CharCounter+0x1>
 180:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <Global_u16_CharCounter>
			}
			if (Global_u16_Trials >= MAX_TRIALS)
 184:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
 188:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
 18c:	03 97       	sbiw	r24, 0x03	; 3
 18e:	30 f0       	brcs	.+12     	; 0x19c <A_System_CheckPassword+0xa4>
			{
				H_Lcd_Clear();
 190:	0e 94 50 02 	call	0x4a0	; 0x4a0 <H_Lcd_Clear>
				H_Lcd_WriteString("DOOR LOCKED!");
 194:	82 ea       	ldi	r24, 0xA2	; 162
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 3a 02 	call	0x474	; 0x474 <H_Lcd_WriteString>
 19c:	08 95       	ret

0000019e <H_Keypad_Init>:
 */ 
#include "Keypad.h"
void H_Keypad_Init(void)
{
	//Keypad rows set as output
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8e e1       	ldi	r24, 0x1E	; 30
 1a2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	//Keypad columns set as input
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	82 e2       	ldi	r24, 0x22	; 34
 1c2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	83 e2       	ldi	r24, 0x23	; 35
 1ca:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	84 e2       	ldi	r24, 0x24	; 36
 1d2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
	//rows pins set to high
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	8e e1       	ldi	r24, 0x1E	; 30
 1e2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	8f e1       	ldi	r24, 0x1F	; 31
 1ea:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e2       	ldi	r24, 0x21	; 33
 1fa:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
	//columns pins pull up resistors enabled
	M_Dio_PinPullUpResistor(KEYPAD_C0_PIN,ENABLE);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	82 e2       	ldi	r24, 0x22	; 34
 202:	0e 94 aa 03 	call	0x754	; 0x754 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C1_PIN,ENABLE);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	83 e2       	ldi	r24, 0x23	; 35
 20a:	0e 94 aa 03 	call	0x754	; 0x754 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C2_PIN,ENABLE);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	84 e2       	ldi	r24, 0x24	; 36
 212:	0e 94 aa 03 	call	0x754	; 0x754 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C3_PIN,ENABLE);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	0e 94 aa 03 	call	0x754	; 0x754 <M_Dio_PinPullUpResistor>
 21e:	08 95       	ret

00000220 <H_Keypad_Read>:
}
u8 H_Keypad_Read(void)
{
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	60 97       	sbiw	r28, 0x10	; 16
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4] = {{ '7' , '8' , '9' , '/' },
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	e0 e6       	ldi	r30, 0x60	; 96
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	de 01       	movw	r26, r28
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <H_Keypad_Read+0x2c>
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	6c 01       	movw	r12, r24
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 25a:	0e e1       	ldi	r16, 0x1E	; 30
	                         { '4' , '5' , '6' , '*' },
	                         { '1' , '2' , '3' , '-' },
	                         { 'C' , '0' , '=' , '+' }};
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
 25c:	b1 2c       	mov	r11, r1
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	80 2f       	mov	r24, r16
 262:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 266:	76 01       	movw	r14, r12
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 268:	12 e2       	ldi	r17, 0x22	; 34
		{
			Local_u8_Reading = M_Dio_PinRead(Local_u8_Col);
 26a:	81 2f       	mov	r24, r17
 26c:	0e 94 66 03 	call	0x6cc	; 0x6cc <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
 270:	81 11       	cpse	r24, r1
 272:	15 c0       	rjmp	.+42     	; 0x29e <H_Keypad_Read+0x7e>
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	e7 ee       	ldi	r30, 0xE7	; 231
 278:	f3 e0       	ldi	r31, 0x03	; 3
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	e0 40       	sbci	r30, 0x00	; 0
 27e:	f0 40       	sbci	r31, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <H_Keypad_Read+0x5a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <H_Keypad_Read+0x64>
 284:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
 286:	81 2f       	mov	r24, r17
 288:	0e 94 66 03 	call	0x6cc	; 0x6cc <M_Dio_PinRead>
 28c:	81 11       	cpse	r24, r1
 28e:	07 c0       	rjmp	.+14     	; 0x29e <H_Keypad_Read+0x7e>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
 290:	81 2f       	mov	r24, r17
 292:	0e 94 66 03 	call	0x6cc	; 0x6cc <M_Dio_PinRead>
 296:	88 23       	and	r24, r24
 298:	d9 f3       	breq	.-10     	; 0x290 <H_Keypad_Read+0x70>
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
 29a:	f7 01       	movw	r30, r14
 29c:	b0 80       	ld	r11, Z
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 29e:	1f 5f       	subi	r17, 0xFF	; 255
 2a0:	ff ef       	ldi	r31, 0xFF	; 255
 2a2:	ef 1a       	sub	r14, r31
 2a4:	ff 0a       	sbc	r15, r31
 2a6:	16 32       	cpi	r17, 0x26	; 38
 2a8:	01 f7       	brne	.-64     	; 0x26a <H_Keypad_Read+0x4a>
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
				}
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	80 2f       	mov	r24, r16
 2ae:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 2b2:	0f 5f       	subi	r16, 0xFF	; 255
 2b4:	24 e0       	ldi	r18, 0x04	; 4
 2b6:	c2 0e       	add	r12, r18
 2b8:	d1 1c       	adc	r13, r1
 2ba:	02 32       	cpi	r16, 0x22	; 34
 2bc:	81 f6       	brne	.-96     	; 0x25e <H_Keypad_Read+0x3e>
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	return Local_u8_Value;
 2be:	8b 2d       	mov	r24, r11
 2c0:	60 96       	adiw	r28, 0x10	; 16
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	08 95       	ret

000002e0 <H_Lcd_WriteChar>:
		{
			H_Lcd_WriteChar(Local_u8_Arr[Local_s8_Counter] + 48);
			Local_s8_Counter--;
		}
	}
}
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	85 e1       	ldi	r24, 0x15	; 21
 2e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 2ec:	8b b3       	in	r24, 0x1b	; 27
 2ee:	9c 2f       	mov	r25, r28
 2f0:	90 7f       	andi	r25, 0xF0	; 240
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	89 2b       	or	r24, r25
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	87 e1       	ldi	r24, 0x17	; 23
 2fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <H_Lcd_WriteChar+0x24>
 308:	00 c0       	rjmp	.+0      	; 0x30a <H_Lcd_WriteChar+0x2a>
 30a:	00 00       	nop
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	87 e1       	ldi	r24, 0x17	; 23
 310:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <H_Lcd_WriteChar+0x38>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <H_Lcd_WriteChar+0x3e>
 31e:	00 00       	nop
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	30 e1       	ldi	r19, 0x10	; 16
 324:	c3 9f       	mul	r28, r19
 326:	c0 01       	movw	r24, r0
 328:	11 24       	eor	r1, r1
 32a:	92 2f       	mov	r25, r18
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	89 2b       	or	r24, r25
 330:	8b bb       	out	0x1b, r24	; 27
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	87 e1       	ldi	r24, 0x17	; 23
 336:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <H_Lcd_WriteChar+0x5e>
 342:	00 c0       	rjmp	.+0      	; 0x344 <H_Lcd_WriteChar+0x64>
 344:	00 00       	nop
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	87 e1       	ldi	r24, 0x17	; 23
 34a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 34e:	8f e1       	ldi	r24, 0x1F	; 31
 350:	9e e4       	ldi	r25, 0x4E	; 78
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <H_Lcd_WriteChar+0x72>
 356:	00 c0       	rjmp	.+0      	; 0x358 <H_Lcd_WriteChar+0x78>
 358:	00 00       	nop
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <H_Lcd_WriteCommand>:
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	85 e1       	ldi	r24, 0x15	; 21
 366:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 36a:	8b b3       	in	r24, 0x1b	; 27
 36c:	9c 2f       	mov	r25, r28
 36e:	90 7f       	andi	r25, 0xF0	; 240
 370:	8f 70       	andi	r24, 0x0F	; 15
 372:	89 2b       	or	r24, r25
 374:	8b bb       	out	0x1b, r24	; 27
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	87 e1       	ldi	r24, 0x17	; 23
 37a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <H_Lcd_WriteCommand+0x24>
 386:	00 c0       	rjmp	.+0      	; 0x388 <H_Lcd_WriteCommand+0x2a>
 388:	00 00       	nop
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	87 e1       	ldi	r24, 0x17	; 23
 38e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 392:	8f e1       	ldi	r24, 0x1F	; 31
 394:	9e e4       	ldi	r25, 0x4E	; 78
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <H_Lcd_WriteCommand+0x38>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <H_Lcd_WriteCommand+0x3e>
 39c:	00 00       	nop
 39e:	2b b3       	in	r18, 0x1b	; 27
 3a0:	30 e1       	ldi	r19, 0x10	; 16
 3a2:	c3 9f       	mul	r28, r19
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	92 2f       	mov	r25, r18
 3aa:	9f 70       	andi	r25, 0x0F	; 15
 3ac:	89 2b       	or	r24, r25
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	87 e1       	ldi	r24, 0x17	; 23
 3b4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 3b8:	8f e9       	ldi	r24, 0x9F	; 159
 3ba:	9f e0       	ldi	r25, 0x0F	; 15
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <H_Lcd_WriteCommand+0x5e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <H_Lcd_WriteCommand+0x64>
 3c2:	00 00       	nop
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	87 e1       	ldi	r24, 0x17	; 23
 3c8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 3cc:	8f e1       	ldi	r24, 0x1F	; 31
 3ce:	9e e4       	ldi	r25, 0x4E	; 78
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <H_Lcd_WriteCommand+0x72>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <H_Lcd_WriteCommand+0x78>
 3d6:	00 00       	nop
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <H_Lcd_Init>:
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8c e0       	ldi	r24, 0x0C	; 12
 3f0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	8d e0       	ldi	r24, 0x0D	; 13
 3f8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	8e e0       	ldi	r24, 0x0E	; 14
 400:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	80 e1       	ldi	r24, 0x10	; 16
 410:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	81 e1       	ldi	r24, 0x11	; 17
 418:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	85 e1       	ldi	r24, 0x15	; 21
 420:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	86 e1       	ldi	r24, 0x16	; 22
 428:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	87 e1       	ldi	r24, 0x17	; 23
 430:	0e 94 54 02 	call	0x4a8	; 0x4a8 <M_Dio_PinMode>
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	86 e1       	ldi	r24, 0x16	; 22
 438:	0e 94 dd 02 	call	0x5ba	; 0x5ba <M_Dio_PinWrite>
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	83 ed       	ldi	r24, 0xD3	; 211
 440:	90 e3       	ldi	r25, 0x30	; 48
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	83 e3       	ldi	r24, 0x33	; 51
 450:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 454:	82 e3       	ldi	r24, 0x32	; 50
 456:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 460:	8c e0       	ldi	r24, 0x0C	; 12
 462:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 472:	08 95       	ret

00000474 <H_Lcd_WriteString>:
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	fc 01       	movw	r30, r24
 47c:	80 81       	ld	r24, Z
 47e:	88 23       	and	r24, r24
 480:	59 f0       	breq	.+22     	; 0x498 <H_Lcd_WriteString+0x24>
 482:	8f 01       	movw	r16, r30
 484:	c0 e0       	ldi	r28, 0x00	; 0
 486:	0e 94 70 01 	call	0x2e0	; 0x2e0 <H_Lcd_WriteChar>
 48a:	cf 5f       	subi	r28, 0xFF	; 255
 48c:	f8 01       	movw	r30, r16
 48e:	ec 0f       	add	r30, r28
 490:	f1 1d       	adc	r31, r1
 492:	80 81       	ld	r24, Z
 494:	81 11       	cpse	r24, r1
 496:	f7 cf       	rjmp	.-18     	; 0x486 <H_Lcd_WriteString+0x12>
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	08 95       	ret

000004a0 <H_Lcd_Clear>:
void H_Lcd_Clear(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 af 01 	call	0x35e	; 0x35e <H_Lcd_WriteCommand>
 4a6:	08 95       	ret

000004a8 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin); break;
		case 2: TogBit(PORTB,Local_u8_Pin); break;
		case 3: TogBit(PORTC,Local_u8_Pin); break;
		case 4: TogBit(PORTD,Local_u8_Pin); break;
 4a8:	9d ec       	ldi	r25, 0xCD	; 205
 4aa:	89 9f       	mul	r24, r25
 4ac:	91 2d       	mov	r25, r1
 4ae:	11 24       	eor	r1, r1
 4b0:	29 2f       	mov	r18, r25
 4b2:	26 95       	lsr	r18
 4b4:	26 95       	lsr	r18
 4b6:	26 95       	lsr	r18
 4b8:	22 0f       	add	r18, r18
 4ba:	32 2f       	mov	r19, r18
 4bc:	33 0f       	add	r19, r19
 4be:	33 0f       	add	r19, r19
 4c0:	23 0f       	add	r18, r19
 4c2:	82 1b       	sub	r24, r18
 4c4:	28 2f       	mov	r18, r24
 4c6:	96 95       	lsr	r25
 4c8:	96 95       	lsr	r25
 4ca:	96 95       	lsr	r25
 4cc:	61 30       	cpi	r22, 0x01	; 1
 4ce:	19 f0       	breq	.+6      	; 0x4d6 <M_Dio_PinMode+0x2e>
 4d0:	62 30       	cpi	r22, 0x02	; 2
 4d2:	c1 f1       	breq	.+112    	; 0x544 <M_Dio_PinMode+0x9c>
 4d4:	08 95       	ret
 4d6:	92 30       	cpi	r25, 0x02	; 2
 4d8:	a1 f0       	breq	.+40     	; 0x502 <M_Dio_PinMode+0x5a>
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <M_Dio_PinMode+0x3a>
 4dc:	91 30       	cpi	r25, 0x01	; 1
 4de:	31 f0       	breq	.+12     	; 0x4ec <M_Dio_PinMode+0x44>
 4e0:	08 95       	ret
 4e2:	93 30       	cpi	r25, 0x03	; 3
 4e4:	c9 f0       	breq	.+50     	; 0x518 <M_Dio_PinMode+0x70>
 4e6:	94 30       	cpi	r25, 0x04	; 4
 4e8:	11 f1       	breq	.+68     	; 0x52e <M_Dio_PinMode+0x86>
 4ea:	08 95       	ret
 4ec:	3a b3       	in	r19, 0x1a	; 26
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <M_Dio_PinMode+0x50>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <M_Dio_PinMode+0x4c>
 4fc:	83 2b       	or	r24, r19
 4fe:	8a bb       	out	0x1a, r24	; 26
 500:	08 95       	ret
 502:	37 b3       	in	r19, 0x17	; 23
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <M_Dio_PinMode+0x66>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	2a 95       	dec	r18
 510:	e2 f7       	brpl	.-8      	; 0x50a <M_Dio_PinMode+0x62>
 512:	83 2b       	or	r24, r19
 514:	87 bb       	out	0x17, r24	; 23
 516:	08 95       	ret
 518:	34 b3       	in	r19, 0x14	; 20
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <M_Dio_PinMode+0x7c>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	2a 95       	dec	r18
 526:	e2 f7       	brpl	.-8      	; 0x520 <M_Dio_PinMode+0x78>
 528:	83 2b       	or	r24, r19
 52a:	84 bb       	out	0x14, r24	; 20
 52c:	08 95       	ret
 52e:	31 b3       	in	r19, 0x11	; 17
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <M_Dio_PinMode+0x92>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	2a 95       	dec	r18
 53c:	e2 f7       	brpl	.-8      	; 0x536 <M_Dio_PinMode+0x8e>
 53e:	83 2b       	or	r24, r19
 540:	81 bb       	out	0x11, r24	; 17
 542:	08 95       	ret
 544:	92 30       	cpi	r25, 0x02	; 2
 546:	a9 f0       	breq	.+42     	; 0x572 <M_Dio_PinMode+0xca>
 548:	18 f4       	brcc	.+6      	; 0x550 <M_Dio_PinMode+0xa8>
 54a:	91 30       	cpi	r25, 0x01	; 1
 54c:	31 f0       	breq	.+12     	; 0x55a <M_Dio_PinMode+0xb2>
 54e:	08 95       	ret
 550:	93 30       	cpi	r25, 0x03	; 3
 552:	d9 f0       	breq	.+54     	; 0x58a <M_Dio_PinMode+0xe2>
 554:	94 30       	cpi	r25, 0x04	; 4
 556:	29 f1       	breq	.+74     	; 0x5a2 <M_Dio_PinMode+0xfa>
 558:	08 95       	ret
 55a:	3a b3       	in	r19, 0x1a	; 26
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <M_Dio_PinMode+0xbe>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	2a 95       	dec	r18
 568:	e2 f7       	brpl	.-8      	; 0x562 <M_Dio_PinMode+0xba>
 56a:	80 95       	com	r24
 56c:	83 23       	and	r24, r19
 56e:	8a bb       	out	0x1a, r24	; 26
 570:	08 95       	ret
 572:	37 b3       	in	r19, 0x17	; 23
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <M_Dio_PinMode+0xd6>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	2a 95       	dec	r18
 580:	e2 f7       	brpl	.-8      	; 0x57a <M_Dio_PinMode+0xd2>
 582:	80 95       	com	r24
 584:	83 23       	and	r24, r19
 586:	87 bb       	out	0x17, r24	; 23
 588:	08 95       	ret
 58a:	34 b3       	in	r19, 0x14	; 20
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <M_Dio_PinMode+0xee>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	2a 95       	dec	r18
 598:	e2 f7       	brpl	.-8      	; 0x592 <M_Dio_PinMode+0xea>
 59a:	80 95       	com	r24
 59c:	83 23       	and	r24, r19
 59e:	84 bb       	out	0x14, r24	; 20
 5a0:	08 95       	ret
 5a2:	31 b3       	in	r19, 0x11	; 17
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <M_Dio_PinMode+0x106>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	2a 95       	dec	r18
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <M_Dio_PinMode+0x102>
 5b2:	80 95       	com	r24
 5b4:	83 23       	and	r24, r19
 5b6:	81 bb       	out	0x11, r24	; 17
 5b8:	08 95       	ret

000005ba <M_Dio_PinWrite>:
 5ba:	9d ec       	ldi	r25, 0xCD	; 205
 5bc:	89 9f       	mul	r24, r25
 5be:	91 2d       	mov	r25, r1
 5c0:	11 24       	eor	r1, r1
 5c2:	29 2f       	mov	r18, r25
 5c4:	26 95       	lsr	r18
 5c6:	26 95       	lsr	r18
 5c8:	26 95       	lsr	r18
 5ca:	22 0f       	add	r18, r18
 5cc:	32 2f       	mov	r19, r18
 5ce:	33 0f       	add	r19, r19
 5d0:	33 0f       	add	r19, r19
 5d2:	23 0f       	add	r18, r19
 5d4:	82 1b       	sub	r24, r18
 5d6:	28 2f       	mov	r18, r24
 5d8:	96 95       	lsr	r25
 5da:	96 95       	lsr	r25
 5dc:	96 95       	lsr	r25
 5de:	61 30       	cpi	r22, 0x01	; 1
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <M_Dio_PinWrite+0x2e>
 5e2:	62 30       	cpi	r22, 0x02	; 2
 5e4:	c1 f1       	breq	.+112    	; 0x656 <M_Dio_PinWrite+0x9c>
 5e6:	08 95       	ret
 5e8:	92 30       	cpi	r25, 0x02	; 2
 5ea:	a1 f0       	breq	.+40     	; 0x614 <M_Dio_PinWrite+0x5a>
 5ec:	18 f4       	brcc	.+6      	; 0x5f4 <M_Dio_PinWrite+0x3a>
 5ee:	91 30       	cpi	r25, 0x01	; 1
 5f0:	31 f0       	breq	.+12     	; 0x5fe <M_Dio_PinWrite+0x44>
 5f2:	08 95       	ret
 5f4:	93 30       	cpi	r25, 0x03	; 3
 5f6:	c9 f0       	breq	.+50     	; 0x62a <M_Dio_PinWrite+0x70>
 5f8:	94 30       	cpi	r25, 0x04	; 4
 5fa:	11 f1       	breq	.+68     	; 0x640 <M_Dio_PinWrite+0x86>
 5fc:	08 95       	ret
 5fe:	3b b3       	in	r19, 0x1b	; 27
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <M_Dio_PinWrite+0x50>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	2a 95       	dec	r18
 60c:	e2 f7       	brpl	.-8      	; 0x606 <M_Dio_PinWrite+0x4c>
 60e:	83 2b       	or	r24, r19
 610:	8b bb       	out	0x1b, r24	; 27
 612:	08 95       	ret
 614:	38 b3       	in	r19, 0x18	; 24
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <M_Dio_PinWrite+0x66>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	2a 95       	dec	r18
 622:	e2 f7       	brpl	.-8      	; 0x61c <M_Dio_PinWrite+0x62>
 624:	83 2b       	or	r24, r19
 626:	88 bb       	out	0x18, r24	; 24
 628:	08 95       	ret
 62a:	35 b3       	in	r19, 0x15	; 21
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <M_Dio_PinWrite+0x7c>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	2a 95       	dec	r18
 638:	e2 f7       	brpl	.-8      	; 0x632 <M_Dio_PinWrite+0x78>
 63a:	83 2b       	or	r24, r19
 63c:	85 bb       	out	0x15, r24	; 21
 63e:	08 95       	ret
 640:	32 b3       	in	r19, 0x12	; 18
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <M_Dio_PinWrite+0x92>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	2a 95       	dec	r18
 64e:	e2 f7       	brpl	.-8      	; 0x648 <M_Dio_PinWrite+0x8e>
 650:	83 2b       	or	r24, r19
 652:	82 bb       	out	0x12, r24	; 18
 654:	08 95       	ret
 656:	92 30       	cpi	r25, 0x02	; 2
 658:	a9 f0       	breq	.+42     	; 0x684 <M_Dio_PinWrite+0xca>
 65a:	18 f4       	brcc	.+6      	; 0x662 <M_Dio_PinWrite+0xa8>
 65c:	91 30       	cpi	r25, 0x01	; 1
 65e:	31 f0       	breq	.+12     	; 0x66c <M_Dio_PinWrite+0xb2>
 660:	08 95       	ret
 662:	93 30       	cpi	r25, 0x03	; 3
 664:	d9 f0       	breq	.+54     	; 0x69c <M_Dio_PinWrite+0xe2>
 666:	94 30       	cpi	r25, 0x04	; 4
 668:	29 f1       	breq	.+74     	; 0x6b4 <M_Dio_PinWrite+0xfa>
 66a:	08 95       	ret
 66c:	3b b3       	in	r19, 0x1b	; 27
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <M_Dio_PinWrite+0xbe>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	2a 95       	dec	r18
 67a:	e2 f7       	brpl	.-8      	; 0x674 <M_Dio_PinWrite+0xba>
 67c:	80 95       	com	r24
 67e:	83 23       	and	r24, r19
 680:	8b bb       	out	0x1b, r24	; 27
 682:	08 95       	ret
 684:	38 b3       	in	r19, 0x18	; 24
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <M_Dio_PinWrite+0xd6>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	2a 95       	dec	r18
 692:	e2 f7       	brpl	.-8      	; 0x68c <M_Dio_PinWrite+0xd2>
 694:	80 95       	com	r24
 696:	83 23       	and	r24, r19
 698:	88 bb       	out	0x18, r24	; 24
 69a:	08 95       	ret
 69c:	35 b3       	in	r19, 0x15	; 21
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <M_Dio_PinWrite+0xee>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	2a 95       	dec	r18
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <M_Dio_PinWrite+0xea>
 6ac:	80 95       	com	r24
 6ae:	83 23       	and	r24, r19
 6b0:	85 bb       	out	0x15, r24	; 21
 6b2:	08 95       	ret
 6b4:	32 b3       	in	r19, 0x12	; 18
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <M_Dio_PinWrite+0x106>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	2a 95       	dec	r18
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <M_Dio_PinWrite+0x102>
 6c4:	80 95       	com	r24
 6c6:	83 23       	and	r24, r19
 6c8:	82 bb       	out	0x12, r24	; 18
 6ca:	08 95       	ret

000006cc <M_Dio_PinRead>:
		default:                            break;
	}
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 6cc:	9d ec       	ldi	r25, 0xCD	; 205
 6ce:	89 9f       	mul	r24, r25
 6d0:	91 2d       	mov	r25, r1
 6d2:	11 24       	eor	r1, r1
 6d4:	29 2f       	mov	r18, r25
 6d6:	26 95       	lsr	r18
 6d8:	26 95       	lsr	r18
 6da:	26 95       	lsr	r18
 6dc:	22 0f       	add	r18, r18
 6de:	32 2f       	mov	r19, r18
 6e0:	33 0f       	add	r19, r19
 6e2:	33 0f       	add	r19, r19
 6e4:	23 0f       	add	r18, r19
 6e6:	82 1b       	sub	r24, r18
 6e8:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
	switch(Local_u8_Port)
 6ea:	89 2f       	mov	r24, r25
 6ec:	86 95       	lsr	r24
 6ee:	86 95       	lsr	r24
 6f0:	86 95       	lsr	r24
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	91 f0       	breq	.+36     	; 0x71a <M_Dio_PinRead+0x4e>
 6f6:	18 f4       	brcc	.+6      	; 0x6fe <M_Dio_PinRead+0x32>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	31 f0       	breq	.+12     	; 0x708 <M_Dio_PinRead+0x3c>
 6fc:	29 c0       	rjmp	.+82     	; 0x750 <M_Dio_PinRead+0x84>
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	a9 f0       	breq	.+42     	; 0x72c <M_Dio_PinRead+0x60>
 702:	84 30       	cpi	r24, 0x04	; 4
 704:	e1 f0       	breq	.+56     	; 0x73e <M_Dio_PinRead+0x72>
 706:	24 c0       	rjmp	.+72     	; 0x750 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_PinValue = GetBit(PINA,Local_u8_Pin); break;
 708:	89 b3       	in	r24, 0x19	; 25
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <M_Dio_PinRead+0x46>
 70e:	95 95       	asr	r25
 710:	87 95       	ror	r24
 712:	2a 95       	dec	r18
 714:	e2 f7       	brpl	.-8      	; 0x70e <M_Dio_PinRead+0x42>
 716:	81 70       	andi	r24, 0x01	; 1
 718:	08 95       	ret
		case 2: Local_u8_PinValue = GetBit(PINB,Local_u8_Pin); break;
 71a:	86 b3       	in	r24, 0x16	; 22
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <M_Dio_PinRead+0x58>
 720:	95 95       	asr	r25
 722:	87 95       	ror	r24
 724:	2a 95       	dec	r18
 726:	e2 f7       	brpl	.-8      	; 0x720 <M_Dio_PinRead+0x54>
 728:	81 70       	andi	r24, 0x01	; 1
 72a:	08 95       	ret
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
 72c:	83 b3       	in	r24, 0x13	; 19
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <M_Dio_PinRead+0x6a>
 732:	95 95       	asr	r25
 734:	87 95       	ror	r24
 736:	2a 95       	dec	r18
 738:	e2 f7       	brpl	.-8      	; 0x732 <M_Dio_PinRead+0x66>
 73a:	81 70       	andi	r24, 0x01	; 1
 73c:	08 95       	ret
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
 73e:	80 b3       	in	r24, 0x10	; 16
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <M_Dio_PinRead+0x7c>
 744:	95 95       	asr	r25
 746:	87 95       	ror	r24
 748:	2a 95       	dec	r18
 74a:	e2 f7       	brpl	.-8      	; 0x744 <M_Dio_PinRead+0x78>
 74c:	81 70       	andi	r24, 0x01	; 1
 74e:	08 95       	ret
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
 750:	80 e0       	ldi	r24, 0x00	; 0
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
		default:                                               break;
	}
	return Local_u8_PinValue;
}
 752:	08 95       	ret

00000754 <M_Dio_PinPullUpResistor>:
void M_Dio_PinPullUpResistor(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 754:	9d ec       	ldi	r25, 0xCD	; 205
 756:	89 9f       	mul	r24, r25
 758:	91 2d       	mov	r25, r1
 75a:	11 24       	eor	r1, r1
 75c:	29 2f       	mov	r18, r25
 75e:	26 95       	lsr	r18
 760:	26 95       	lsr	r18
 762:	26 95       	lsr	r18
 764:	22 0f       	add	r18, r18
 766:	32 2f       	mov	r19, r18
 768:	33 0f       	add	r19, r19
 76a:	33 0f       	add	r19, r19
 76c:	23 0f       	add	r18, r19
 76e:	82 1b       	sub	r24, r18
 770:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 772:	96 95       	lsr	r25
 774:	96 95       	lsr	r25
 776:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 778:	61 30       	cpi	r22, 0x01	; 1
 77a:	19 f0       	breq	.+6      	; 0x782 <M_Dio_PinPullUpResistor+0x2e>
 77c:	62 30       	cpi	r22, 0x02	; 2
 77e:	c1 f1       	breq	.+112    	; 0x7f0 <M_Dio_PinPullUpResistor+0x9c>
 780:	08 95       	ret
	{
		case ENABLE:
		switch(Local_u8_Port)
 782:	92 30       	cpi	r25, 0x02	; 2
 784:	a1 f0       	breq	.+40     	; 0x7ae <M_Dio_PinPullUpResistor+0x5a>
 786:	18 f4       	brcc	.+6      	; 0x78e <M_Dio_PinPullUpResistor+0x3a>
 788:	91 30       	cpi	r25, 0x01	; 1
 78a:	31 f0       	breq	.+12     	; 0x798 <M_Dio_PinPullUpResistor+0x44>
 78c:	08 95       	ret
 78e:	93 30       	cpi	r25, 0x03	; 3
 790:	c9 f0       	breq	.+50     	; 0x7c4 <M_Dio_PinPullUpResistor+0x70>
 792:	94 30       	cpi	r25, 0x04	; 4
 794:	11 f1       	breq	.+68     	; 0x7da <M_Dio_PinPullUpResistor+0x86>
 796:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 798:	3b b3       	in	r19, 0x1b	; 27
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <M_Dio_PinPullUpResistor+0x50>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	2a 95       	dec	r18
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <M_Dio_PinPullUpResistor+0x4c>
 7a8:	83 2b       	or	r24, r19
 7aa:	8b bb       	out	0x1b, r24	; 27
 7ac:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 7ae:	38 b3       	in	r19, 0x18	; 24
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <M_Dio_PinPullUpResistor+0x66>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	2a 95       	dec	r18
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <M_Dio_PinPullUpResistor+0x62>
 7be:	83 2b       	or	r24, r19
 7c0:	88 bb       	out	0x18, r24	; 24
 7c2:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 7c4:	35 b3       	in	r19, 0x15	; 21
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <M_Dio_PinPullUpResistor+0x7c>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	2a 95       	dec	r18
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <M_Dio_PinPullUpResistor+0x78>
 7d4:	83 2b       	or	r24, r19
 7d6:	85 bb       	out	0x15, r24	; 21
 7d8:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 7da:	32 b3       	in	r19, 0x12	; 18
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <M_Dio_PinPullUpResistor+0x92>
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	2a 95       	dec	r18
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <M_Dio_PinPullUpResistor+0x8e>
 7ea:	83 2b       	or	r24, r19
 7ec:	82 bb       	out	0x12, r24	; 18
 7ee:	08 95       	ret
			default:                           break;
		}break;
		case DISABLE:
		switch(Local_u8_Port)
 7f0:	92 30       	cpi	r25, 0x02	; 2
 7f2:	a9 f0       	breq	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <M_Dio_PinPullUpResistor+0xa8>
 7f6:	91 30       	cpi	r25, 0x01	; 1
 7f8:	31 f0       	breq	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	08 95       	ret
 7fc:	93 30       	cpi	r25, 0x03	; 3
 7fe:	d9 f0       	breq	.+54     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 800:	94 30       	cpi	r25, 0x04	; 4
 802:	29 f1       	breq	.+74     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 804:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 806:	3b b3       	in	r19, 0x1b	; 27
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	2a 95       	dec	r18
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	80 95       	com	r24
 818:	83 23       	and	r24, r19
 81a:	8b bb       	out	0x1b, r24	; 27
 81c:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 81e:	38 b3       	in	r19, 0x18	; 24
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	2a 95       	dec	r18
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	80 95       	com	r24
 830:	83 23       	and	r24, r19
 832:	88 bb       	out	0x18, r24	; 24
 834:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 836:	35 b3       	in	r19, 0x15	; 21
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	2a 95       	dec	r18
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	80 95       	com	r24
 848:	83 23       	and	r24, r19
 84a:	85 bb       	out	0x15, r24	; 21
 84c:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 84e:	32 b3       	in	r19, 0x12	; 18
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	2a 95       	dec	r18
 85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85e:	80 95       	com	r24
 860:	83 23       	and	r24, r19
 862:	82 bb       	out	0x12, r24	; 18
 864:	08 95       	ret

00000866 <M_Uart_Init>:
 */ 

#include "Uart.h"
void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 866:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 868:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 86a:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 86c:	87 e6       	ldi	r24, 0x67	; 103
 86e:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 870:	86 e8       	ldi	r24, 0x86	; 134
 872:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 874:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 876:	53 9a       	sbi	0x0a, 3	; 10
 878:	08 95       	ret

0000087a <M_Uart_Transmit>:
}
void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 87a:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 87c:	5e 9b       	sbis	0x0b, 6	; 11
 87e:	fe cf       	rjmp	.-4      	; 0x87c <M_Uart_Transmit+0x2>
}
 880:	08 95       	ret

00000882 <M_Uart_Receive>:
u8   M_Uart_Receive(void)
{
	while((GetBit(UCSRA,7)) == 0);
 882:	5f 9b       	sbis	0x0b, 7	; 11
 884:	fe cf       	rjmp	.-4      	; 0x882 <M_Uart_Receive>
	return UDR;
 886:	8c b1       	in	r24, 0x0c	; 12
 888:	08 95       	ret

0000088a <_exit>:
 88a:	f8 94       	cli

0000088c <__stop_program>:
 88c:	ff cf       	rjmp	.-2      	; 0x88c <__stop_program>
