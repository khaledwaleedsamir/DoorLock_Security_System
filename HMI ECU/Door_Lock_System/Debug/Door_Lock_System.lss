
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000868  000008dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001660  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bc  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4e  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00003610  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d8  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d9  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000047d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>


int main(void)
{
	H_Keypad_Init();
  82:	0e 94 bc 00 	call	0x178	; 0x178 <H_Keypad_Init>
	H_Lcd_Init();
  86:	0e 94 db 01 	call	0x3b6	; 0x3b6 <H_Lcd_Init>
	M_Uart_Init();
  8a:	0e 94 20 04 	call	0x840	; 0x840 <M_Uart_Init>
	u8 msg;
	u8 Rmsg;
	int counter = 0;
	int trials = 0;
	H_Lcd_WriteString("Init Done !");
  8e:	80 e7       	ldi	r24, 0x70	; 112
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1a>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x24>
  a6:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Clear();
  a8:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
	H_Lcd_WriteString("Enter Password!");
  ac:	8c e7       	ldi	r24, 0x7C	; 124
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x38>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x42>
  c4:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clear();
  c6:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
	H_Lcd_Init();
	M_Uart_Init();
	u8 msg;
	u8 Rmsg;
	int counter = 0;
	int trials = 0;
  ca:	e1 2c       	mov	r14, r1
  cc:	f1 2c       	mov	r15, r1
	H_Keypad_Init();
	H_Lcd_Init();
	M_Uart_Init();
	u8 msg;
	u8 Rmsg;
	int counter = 0;
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	44 c0       	rjmp	.+136    	; 0x15c <main+0xda>
	_delay_ms(2000);
	H_Lcd_Clear();
    /* Replace with your application code */
    while (1) 
    {   
		if(counter == 4){
  d4:	04 30       	cpi	r16, 0x04	; 4
  d6:	11 05       	cpc	r17, r1
  d8:	09 f0       	breq	.+2      	; 0xdc <main+0x5a>
  da:	40 c0       	rjmp	.+128    	; 0x15c <main+0xda>
			Rmsg = M_Uart_Receive();
  dc:	0e 94 2e 04 	call	0x85c	; 0x85c <M_Uart_Receive>
			if(Rmsg == 'T'){
  e0:	84 35       	cpi	r24, 0x54	; 84
  e2:	39 f4       	brne	.+14     	; 0xf2 <main+0x70>
				H_Lcd_Clear();
  e4:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
				H_Lcd_WriteString("Opening !");
  e8:	8c e8       	ldi	r24, 0x8C	; 140
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
  f0:	35 c0       	rjmp	.+106    	; 0x15c <main+0xda>
			}
			if(Rmsg == 'F'){
  f2:	86 34       	cpi	r24, 0x46	; 70
  f4:	99 f5       	brne	.+102    	; 0x15c <main+0xda>
				trials++;
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	e2 1a       	sub	r14, r18
  fa:	f2 0a       	sbc	r15, r18
				if (trials < 3){
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	e8 16       	cp	r14, r24
 100:	f1 04       	cpc	r15, r1
 102:	14 f5       	brge	.+68     	; 0x148 <main+0xc6>
					H_Lcd_Clear();
 104:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
					H_Lcd_WriteString("Wrong Pass!");
 108:	86 e9       	ldi	r24, 0x96	; 150
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	27 ea       	ldi	r18, 0xA7	; 167
 114:	81 e6       	ldi	r24, 0x61	; 97
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x94>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x9e>
 120:	00 00       	nop
					_delay_ms(2000);
					H_Lcd_Clear();
 122:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
 126:	82 ea       	ldi	r24, 0xA2	; 162
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	27 ea       	ldi	r18, 0xA7	; 167
 132:	81 e6       	ldi	r24, 0x61	; 97
 134:	91 50       	subi	r25, 0x01	; 1
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xb2>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xbc>
 13e:	00 00       	nop
					_delay_ms(2000);
					H_Lcd_Clear();
 140:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
					counter = 0;
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	10 e0       	ldi	r17, 0x00	; 0
				}
				if (trials == 3)
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	e9 16       	cp	r14, r25
 14c:	f1 04       	cpc	r15, r1
 14e:	31 f4       	brne	.+12     	; 0x15c <main+0xda>
				{
					H_Lcd_Clear();
 150:	0e 94 3d 02 	call	0x47a	; 0x47a <H_Lcd_Clear>
					H_Lcd_WriteString("THEIF !");
 154:	81 eb       	ldi	r24, 0xB1	; 177
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 27 02 	call	0x44e	; 0x44e <H_Lcd_WriteString>
					}
			}
		}
		msg = H_Keypad_Read();
 15c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <H_Keypad_Read>
 160:	c8 2f       	mov	r28, r24
		if(msg != 0){
 162:	88 23       	and	r24, r24
 164:	09 f4       	brne	.+2      	; 0x168 <main+0xe6>
 166:	b6 cf       	rjmp	.-148    	; 0xd4 <main+0x52>
			H_Lcd_WriteChar(msg);
 168:	0e 94 5d 01 	call	0x2ba	; 0x2ba <H_Lcd_WriteChar>
			M_Uart_Transmit(msg);
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 2a 04 	call	0x854	; 0x854 <M_Uart_Transmit>
			counter++;
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	ae cf       	rjmp	.-164    	; 0xd4 <main+0x52>

00000178 <H_Keypad_Init>:
 */ 
#include "Keypad.h"
void H_Keypad_Init(void)
{
	//Keypad rows set as output
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	8e e1       	ldi	r24, 0x1E	; 30
 17c:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e2       	ldi	r24, 0x21	; 33
 194:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	//Keypad columns set as input
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	82 e2       	ldi	r24, 0x22	; 34
 19c:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	83 e2       	ldi	r24, 0x23	; 35
 1a4:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	84 e2       	ldi	r24, 0x24	; 36
 1ac:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	85 e2       	ldi	r24, 0x25	; 37
 1b4:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
	//rows pins set to high
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e2       	ldi	r24, 0x21	; 33
 1d4:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
	//columns pins pull up resistors enabled
	M_Dio_PinPullUpResistor(KEYPAD_C0_PIN,ENABLE);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	82 e2       	ldi	r24, 0x22	; 34
 1dc:	0e 94 97 03 	call	0x72e	; 0x72e <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C1_PIN,ENABLE);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	83 e2       	ldi	r24, 0x23	; 35
 1e4:	0e 94 97 03 	call	0x72e	; 0x72e <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C2_PIN,ENABLE);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	84 e2       	ldi	r24, 0x24	; 36
 1ec:	0e 94 97 03 	call	0x72e	; 0x72e <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C3_PIN,ENABLE);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	0e 94 97 03 	call	0x72e	; 0x72e <M_Dio_PinPullUpResistor>
 1f8:	08 95       	ret

000001fa <H_Keypad_Read>:
}
u8 H_Keypad_Read(void)
{
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	60 97       	sbiw	r28, 0x10	; 16
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4] = {{ '7' , '8' , '9' , '/' },
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	e0 e6       	ldi	r30, 0x60	; 96
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	de 01       	movw	r26, r28
 224:	11 96       	adiw	r26, 0x01	; 1
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <H_Keypad_Read+0x2c>
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	6c 01       	movw	r12, r24
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 234:	0e e1       	ldi	r16, 0x1E	; 30
	                         { '4' , '5' , '6' , '*' },
	                         { '1' , '2' , '3' , '-' },
	                         { 'C' , '0' , '=' , '+' }};
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
 236:	b1 2c       	mov	r11, r1
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	80 2f       	mov	r24, r16
 23c:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 240:	76 01       	movw	r14, r12
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 242:	12 e2       	ldi	r17, 0x22	; 34
		{
			Local_u8_Reading = M_Dio_PinRead(Local_u8_Col);
 244:	81 2f       	mov	r24, r17
 246:	0e 94 53 03 	call	0x6a6	; 0x6a6 <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
 24a:	81 11       	cpse	r24, r1
 24c:	15 c0       	rjmp	.+42     	; 0x278 <H_Keypad_Read+0x7e>
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	e7 ee       	ldi	r30, 0xE7	; 231
 252:	f3 e0       	ldi	r31, 0x03	; 3
 254:	91 50       	subi	r25, 0x01	; 1
 256:	e0 40       	sbci	r30, 0x00	; 0
 258:	f0 40       	sbci	r31, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <H_Keypad_Read+0x5a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <H_Keypad_Read+0x64>
 25e:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
 260:	81 2f       	mov	r24, r17
 262:	0e 94 53 03 	call	0x6a6	; 0x6a6 <M_Dio_PinRead>
 266:	81 11       	cpse	r24, r1
 268:	07 c0       	rjmp	.+14     	; 0x278 <H_Keypad_Read+0x7e>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
 26a:	81 2f       	mov	r24, r17
 26c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <M_Dio_PinRead>
 270:	88 23       	and	r24, r24
 272:	d9 f3       	breq	.-10     	; 0x26a <H_Keypad_Read+0x70>
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
 274:	f7 01       	movw	r30, r14
 276:	b0 80       	ld	r11, Z
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 278:	1f 5f       	subi	r17, 0xFF	; 255
 27a:	ff ef       	ldi	r31, 0xFF	; 255
 27c:	ef 1a       	sub	r14, r31
 27e:	ff 0a       	sbc	r15, r31
 280:	16 32       	cpi	r17, 0x26	; 38
 282:	01 f7       	brne	.-64     	; 0x244 <H_Keypad_Read+0x4a>
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
				}
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 2f       	mov	r24, r16
 288:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 28c:	0f 5f       	subi	r16, 0xFF	; 255
 28e:	24 e0       	ldi	r18, 0x04	; 4
 290:	c2 0e       	add	r12, r18
 292:	d1 1c       	adc	r13, r1
 294:	02 32       	cpi	r16, 0x22	; 34
 296:	81 f6       	brne	.-96     	; 0x238 <H_Keypad_Read+0x3e>
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	return Local_u8_Value;
 298:	8b 2d       	mov	r24, r11
 29a:	60 96       	adiw	r28, 0x10	; 16
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	08 95       	ret

000002ba <H_Lcd_WriteChar>:
		{
			H_Lcd_WriteChar(Local_u8_Arr[Local_s8_Counter] + 48);
			Local_s8_Counter--;
		}
	}
}
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	85 e1       	ldi	r24, 0x15	; 21
 2c2:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 2c6:	8b b3       	in	r24, 0x1b	; 27
 2c8:	9c 2f       	mov	r25, r28
 2ca:	90 7f       	andi	r25, 0xF0	; 240
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	89 2b       	or	r24, r25
 2d0:	8b bb       	out	0x1b, r24	; 27
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	87 e1       	ldi	r24, 0x17	; 23
 2d6:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <H_Lcd_WriteChar+0x24>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <H_Lcd_WriteChar+0x2a>
 2e4:	00 00       	nop
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	87 e1       	ldi	r24, 0x17	; 23
 2ea:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	9e e4       	ldi	r25, 0x4E	; 78
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <H_Lcd_WriteChar+0x38>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <H_Lcd_WriteChar+0x3e>
 2f8:	00 00       	nop
 2fa:	2b b3       	in	r18, 0x1b	; 27
 2fc:	30 e1       	ldi	r19, 0x10	; 16
 2fe:	c3 9f       	mul	r28, r19
 300:	c0 01       	movw	r24, r0
 302:	11 24       	eor	r1, r1
 304:	92 2f       	mov	r25, r18
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 2b       	or	r24, r25
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	87 e1       	ldi	r24, 0x17	; 23
 310:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <H_Lcd_WriteChar+0x5e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <H_Lcd_WriteChar+0x64>
 31e:	00 00       	nop
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	87 e1       	ldi	r24, 0x17	; 23
 324:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	9e e4       	ldi	r25, 0x4E	; 78
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <H_Lcd_WriteChar+0x72>
 330:	00 c0       	rjmp	.+0      	; 0x332 <H_Lcd_WriteChar+0x78>
 332:	00 00       	nop
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <H_Lcd_WriteCommand>:
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	85 e1       	ldi	r24, 0x15	; 21
 340:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 344:	8b b3       	in	r24, 0x1b	; 27
 346:	9c 2f       	mov	r25, r28
 348:	90 7f       	andi	r25, 0xF0	; 240
 34a:	8f 70       	andi	r24, 0x0F	; 15
 34c:	89 2b       	or	r24, r25
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	87 e1       	ldi	r24, 0x17	; 23
 354:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 358:	8f e9       	ldi	r24, 0x9F	; 159
 35a:	9f e0       	ldi	r25, 0x0F	; 15
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <H_Lcd_WriteCommand+0x24>
 360:	00 c0       	rjmp	.+0      	; 0x362 <H_Lcd_WriteCommand+0x2a>
 362:	00 00       	nop
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	87 e1       	ldi	r24, 0x17	; 23
 368:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 36c:	8f e1       	ldi	r24, 0x1F	; 31
 36e:	9e e4       	ldi	r25, 0x4E	; 78
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <H_Lcd_WriteCommand+0x38>
 374:	00 c0       	rjmp	.+0      	; 0x376 <H_Lcd_WriteCommand+0x3e>
 376:	00 00       	nop
 378:	2b b3       	in	r18, 0x1b	; 27
 37a:	30 e1       	ldi	r19, 0x10	; 16
 37c:	c3 9f       	mul	r28, r19
 37e:	c0 01       	movw	r24, r0
 380:	11 24       	eor	r1, r1
 382:	92 2f       	mov	r25, r18
 384:	9f 70       	andi	r25, 0x0F	; 15
 386:	89 2b       	or	r24, r25
 388:	8b bb       	out	0x1b, r24	; 27
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	87 e1       	ldi	r24, 0x17	; 23
 38e:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 392:	8f e9       	ldi	r24, 0x9F	; 159
 394:	9f e0       	ldi	r25, 0x0F	; 15
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <H_Lcd_WriteCommand+0x5e>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <H_Lcd_WriteCommand+0x64>
 39c:	00 00       	nop
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	87 e1       	ldi	r24, 0x17	; 23
 3a2:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 3a6:	8f e1       	ldi	r24, 0x1F	; 31
 3a8:	9e e4       	ldi	r25, 0x4E	; 78
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <H_Lcd_WriteCommand+0x72>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <H_Lcd_WriteCommand+0x78>
 3b0:	00 00       	nop
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <H_Lcd_Init>:
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	8b e0       	ldi	r24, 0x0B	; 11
 3c2:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	8d e0       	ldi	r24, 0x0D	; 13
 3d2:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 e1       	ldi	r24, 0x10	; 16
 3ea:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e1       	ldi	r24, 0x11	; 17
 3f2:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	85 e1       	ldi	r24, 0x15	; 21
 3fa:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	86 e1       	ldi	r24, 0x16	; 22
 402:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	87 e1       	ldi	r24, 0x17	; 23
 40a:	0e 94 41 02 	call	0x482	; 0x482 <M_Dio_PinMode>
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	86 e1       	ldi	r24, 0x16	; 22
 412:	0e 94 ca 02 	call	0x594	; 0x594 <M_Dio_PinWrite>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	83 ed       	ldi	r24, 0xD3	; 211
 41a:	90 e3       	ldi	r25, 0x30	; 48
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	83 e3       	ldi	r24, 0x33	; 51
 42a:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 42e:	82 e3       	ldi	r24, 0x32	; 50
 430:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 434:	88 e2       	ldi	r24, 0x28	; 40
 436:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 44c:	08 95       	ret

0000044e <H_Lcd_WriteString>:
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	59 f0       	breq	.+22     	; 0x472 <H_Lcd_WriteString+0x24>
 45c:	8f 01       	movw	r16, r30
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	0e 94 5d 01 	call	0x2ba	; 0x2ba <H_Lcd_WriteChar>
 464:	cf 5f       	subi	r28, 0xFF	; 255
 466:	f8 01       	movw	r30, r16
 468:	ec 0f       	add	r30, r28
 46a:	f1 1d       	adc	r31, r1
 46c:	80 81       	ld	r24, Z
 46e:	81 11       	cpse	r24, r1
 470:	f7 cf       	rjmp	.-18     	; 0x460 <H_Lcd_WriteString+0x12>
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <H_Lcd_Clear>:
void H_Lcd_Clear(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 9c 01 	call	0x338	; 0x338 <H_Lcd_WriteCommand>
 480:	08 95       	ret

00000482 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin); break;
		case 2: TogBit(PORTB,Local_u8_Pin); break;
		case 3: TogBit(PORTC,Local_u8_Pin); break;
		case 4: TogBit(PORTD,Local_u8_Pin); break;
 482:	9d ec       	ldi	r25, 0xCD	; 205
 484:	89 9f       	mul	r24, r25
 486:	91 2d       	mov	r25, r1
 488:	11 24       	eor	r1, r1
 48a:	29 2f       	mov	r18, r25
 48c:	26 95       	lsr	r18
 48e:	26 95       	lsr	r18
 490:	26 95       	lsr	r18
 492:	22 0f       	add	r18, r18
 494:	32 2f       	mov	r19, r18
 496:	33 0f       	add	r19, r19
 498:	33 0f       	add	r19, r19
 49a:	23 0f       	add	r18, r19
 49c:	82 1b       	sub	r24, r18
 49e:	28 2f       	mov	r18, r24
 4a0:	96 95       	lsr	r25
 4a2:	96 95       	lsr	r25
 4a4:	96 95       	lsr	r25
 4a6:	61 30       	cpi	r22, 0x01	; 1
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <M_Dio_PinMode+0x2e>
 4aa:	62 30       	cpi	r22, 0x02	; 2
 4ac:	c1 f1       	breq	.+112    	; 0x51e <M_Dio_PinMode+0x9c>
 4ae:	08 95       	ret
 4b0:	92 30       	cpi	r25, 0x02	; 2
 4b2:	a1 f0       	breq	.+40     	; 0x4dc <M_Dio_PinMode+0x5a>
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <M_Dio_PinMode+0x3a>
 4b6:	91 30       	cpi	r25, 0x01	; 1
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <M_Dio_PinMode+0x44>
 4ba:	08 95       	ret
 4bc:	93 30       	cpi	r25, 0x03	; 3
 4be:	c9 f0       	breq	.+50     	; 0x4f2 <M_Dio_PinMode+0x70>
 4c0:	94 30       	cpi	r25, 0x04	; 4
 4c2:	11 f1       	breq	.+68     	; 0x508 <M_Dio_PinMode+0x86>
 4c4:	08 95       	ret
 4c6:	3a b3       	in	r19, 0x1a	; 26
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <M_Dio_PinMode+0x50>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	2a 95       	dec	r18
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <M_Dio_PinMode+0x4c>
 4d6:	83 2b       	or	r24, r19
 4d8:	8a bb       	out	0x1a, r24	; 26
 4da:	08 95       	ret
 4dc:	37 b3       	in	r19, 0x17	; 23
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <M_Dio_PinMode+0x66>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	2a 95       	dec	r18
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <M_Dio_PinMode+0x62>
 4ec:	83 2b       	or	r24, r19
 4ee:	87 bb       	out	0x17, r24	; 23
 4f0:	08 95       	ret
 4f2:	34 b3       	in	r19, 0x14	; 20
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <M_Dio_PinMode+0x7c>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	2a 95       	dec	r18
 500:	e2 f7       	brpl	.-8      	; 0x4fa <M_Dio_PinMode+0x78>
 502:	83 2b       	or	r24, r19
 504:	84 bb       	out	0x14, r24	; 20
 506:	08 95       	ret
 508:	31 b3       	in	r19, 0x11	; 17
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <M_Dio_PinMode+0x92>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	2a 95       	dec	r18
 516:	e2 f7       	brpl	.-8      	; 0x510 <M_Dio_PinMode+0x8e>
 518:	83 2b       	or	r24, r19
 51a:	81 bb       	out	0x11, r24	; 17
 51c:	08 95       	ret
 51e:	92 30       	cpi	r25, 0x02	; 2
 520:	a9 f0       	breq	.+42     	; 0x54c <M_Dio_PinMode+0xca>
 522:	18 f4       	brcc	.+6      	; 0x52a <M_Dio_PinMode+0xa8>
 524:	91 30       	cpi	r25, 0x01	; 1
 526:	31 f0       	breq	.+12     	; 0x534 <M_Dio_PinMode+0xb2>
 528:	08 95       	ret
 52a:	93 30       	cpi	r25, 0x03	; 3
 52c:	d9 f0       	breq	.+54     	; 0x564 <M_Dio_PinMode+0xe2>
 52e:	94 30       	cpi	r25, 0x04	; 4
 530:	29 f1       	breq	.+74     	; 0x57c <M_Dio_PinMode+0xfa>
 532:	08 95       	ret
 534:	3a b3       	in	r19, 0x1a	; 26
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <M_Dio_PinMode+0xbe>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	2a 95       	dec	r18
 542:	e2 f7       	brpl	.-8      	; 0x53c <M_Dio_PinMode+0xba>
 544:	80 95       	com	r24
 546:	83 23       	and	r24, r19
 548:	8a bb       	out	0x1a, r24	; 26
 54a:	08 95       	ret
 54c:	37 b3       	in	r19, 0x17	; 23
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <M_Dio_PinMode+0xd6>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	2a 95       	dec	r18
 55a:	e2 f7       	brpl	.-8      	; 0x554 <M_Dio_PinMode+0xd2>
 55c:	80 95       	com	r24
 55e:	83 23       	and	r24, r19
 560:	87 bb       	out	0x17, r24	; 23
 562:	08 95       	ret
 564:	34 b3       	in	r19, 0x14	; 20
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <M_Dio_PinMode+0xee>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	2a 95       	dec	r18
 572:	e2 f7       	brpl	.-8      	; 0x56c <M_Dio_PinMode+0xea>
 574:	80 95       	com	r24
 576:	83 23       	and	r24, r19
 578:	84 bb       	out	0x14, r24	; 20
 57a:	08 95       	ret
 57c:	31 b3       	in	r19, 0x11	; 17
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <M_Dio_PinMode+0x106>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	2a 95       	dec	r18
 58a:	e2 f7       	brpl	.-8      	; 0x584 <M_Dio_PinMode+0x102>
 58c:	80 95       	com	r24
 58e:	83 23       	and	r24, r19
 590:	81 bb       	out	0x11, r24	; 17
 592:	08 95       	ret

00000594 <M_Dio_PinWrite>:
 594:	9d ec       	ldi	r25, 0xCD	; 205
 596:	89 9f       	mul	r24, r25
 598:	91 2d       	mov	r25, r1
 59a:	11 24       	eor	r1, r1
 59c:	29 2f       	mov	r18, r25
 59e:	26 95       	lsr	r18
 5a0:	26 95       	lsr	r18
 5a2:	26 95       	lsr	r18
 5a4:	22 0f       	add	r18, r18
 5a6:	32 2f       	mov	r19, r18
 5a8:	33 0f       	add	r19, r19
 5aa:	33 0f       	add	r19, r19
 5ac:	23 0f       	add	r18, r19
 5ae:	82 1b       	sub	r24, r18
 5b0:	28 2f       	mov	r18, r24
 5b2:	96 95       	lsr	r25
 5b4:	96 95       	lsr	r25
 5b6:	96 95       	lsr	r25
 5b8:	61 30       	cpi	r22, 0x01	; 1
 5ba:	19 f0       	breq	.+6      	; 0x5c2 <M_Dio_PinWrite+0x2e>
 5bc:	62 30       	cpi	r22, 0x02	; 2
 5be:	c1 f1       	breq	.+112    	; 0x630 <M_Dio_PinWrite+0x9c>
 5c0:	08 95       	ret
 5c2:	92 30       	cpi	r25, 0x02	; 2
 5c4:	a1 f0       	breq	.+40     	; 0x5ee <M_Dio_PinWrite+0x5a>
 5c6:	18 f4       	brcc	.+6      	; 0x5ce <M_Dio_PinWrite+0x3a>
 5c8:	91 30       	cpi	r25, 0x01	; 1
 5ca:	31 f0       	breq	.+12     	; 0x5d8 <M_Dio_PinWrite+0x44>
 5cc:	08 95       	ret
 5ce:	93 30       	cpi	r25, 0x03	; 3
 5d0:	c9 f0       	breq	.+50     	; 0x604 <M_Dio_PinWrite+0x70>
 5d2:	94 30       	cpi	r25, 0x04	; 4
 5d4:	11 f1       	breq	.+68     	; 0x61a <M_Dio_PinWrite+0x86>
 5d6:	08 95       	ret
 5d8:	3b b3       	in	r19, 0x1b	; 27
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <M_Dio_PinWrite+0x50>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <M_Dio_PinWrite+0x4c>
 5e8:	83 2b       	or	r24, r19
 5ea:	8b bb       	out	0x1b, r24	; 27
 5ec:	08 95       	ret
 5ee:	38 b3       	in	r19, 0x18	; 24
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <M_Dio_PinWrite+0x66>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	2a 95       	dec	r18
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <M_Dio_PinWrite+0x62>
 5fe:	83 2b       	or	r24, r19
 600:	88 bb       	out	0x18, r24	; 24
 602:	08 95       	ret
 604:	35 b3       	in	r19, 0x15	; 21
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <M_Dio_PinWrite+0x7c>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	2a 95       	dec	r18
 612:	e2 f7       	brpl	.-8      	; 0x60c <M_Dio_PinWrite+0x78>
 614:	83 2b       	or	r24, r19
 616:	85 bb       	out	0x15, r24	; 21
 618:	08 95       	ret
 61a:	32 b3       	in	r19, 0x12	; 18
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <M_Dio_PinWrite+0x92>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	2a 95       	dec	r18
 628:	e2 f7       	brpl	.-8      	; 0x622 <M_Dio_PinWrite+0x8e>
 62a:	83 2b       	or	r24, r19
 62c:	82 bb       	out	0x12, r24	; 18
 62e:	08 95       	ret
 630:	92 30       	cpi	r25, 0x02	; 2
 632:	a9 f0       	breq	.+42     	; 0x65e <M_Dio_PinWrite+0xca>
 634:	18 f4       	brcc	.+6      	; 0x63c <M_Dio_PinWrite+0xa8>
 636:	91 30       	cpi	r25, 0x01	; 1
 638:	31 f0       	breq	.+12     	; 0x646 <M_Dio_PinWrite+0xb2>
 63a:	08 95       	ret
 63c:	93 30       	cpi	r25, 0x03	; 3
 63e:	d9 f0       	breq	.+54     	; 0x676 <M_Dio_PinWrite+0xe2>
 640:	94 30       	cpi	r25, 0x04	; 4
 642:	29 f1       	breq	.+74     	; 0x68e <M_Dio_PinWrite+0xfa>
 644:	08 95       	ret
 646:	3b b3       	in	r19, 0x1b	; 27
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <M_Dio_PinWrite+0xbe>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	2a 95       	dec	r18
 654:	e2 f7       	brpl	.-8      	; 0x64e <M_Dio_PinWrite+0xba>
 656:	80 95       	com	r24
 658:	83 23       	and	r24, r19
 65a:	8b bb       	out	0x1b, r24	; 27
 65c:	08 95       	ret
 65e:	38 b3       	in	r19, 0x18	; 24
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <M_Dio_PinWrite+0xd6>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	2a 95       	dec	r18
 66c:	e2 f7       	brpl	.-8      	; 0x666 <M_Dio_PinWrite+0xd2>
 66e:	80 95       	com	r24
 670:	83 23       	and	r24, r19
 672:	88 bb       	out	0x18, r24	; 24
 674:	08 95       	ret
 676:	35 b3       	in	r19, 0x15	; 21
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <M_Dio_PinWrite+0xee>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	2a 95       	dec	r18
 684:	e2 f7       	brpl	.-8      	; 0x67e <M_Dio_PinWrite+0xea>
 686:	80 95       	com	r24
 688:	83 23       	and	r24, r19
 68a:	85 bb       	out	0x15, r24	; 21
 68c:	08 95       	ret
 68e:	32 b3       	in	r19, 0x12	; 18
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <M_Dio_PinWrite+0x106>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	2a 95       	dec	r18
 69c:	e2 f7       	brpl	.-8      	; 0x696 <M_Dio_PinWrite+0x102>
 69e:	80 95       	com	r24
 6a0:	83 23       	and	r24, r19
 6a2:	82 bb       	out	0x12, r24	; 18
 6a4:	08 95       	ret

000006a6 <M_Dio_PinRead>:
		default:                            break;
	}
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 6a6:	9d ec       	ldi	r25, 0xCD	; 205
 6a8:	89 9f       	mul	r24, r25
 6aa:	91 2d       	mov	r25, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	29 2f       	mov	r18, r25
 6b0:	26 95       	lsr	r18
 6b2:	26 95       	lsr	r18
 6b4:	26 95       	lsr	r18
 6b6:	22 0f       	add	r18, r18
 6b8:	32 2f       	mov	r19, r18
 6ba:	33 0f       	add	r19, r19
 6bc:	33 0f       	add	r19, r19
 6be:	23 0f       	add	r18, r19
 6c0:	82 1b       	sub	r24, r18
 6c2:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
	switch(Local_u8_Port)
 6c4:	89 2f       	mov	r24, r25
 6c6:	86 95       	lsr	r24
 6c8:	86 95       	lsr	r24
 6ca:	86 95       	lsr	r24
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	91 f0       	breq	.+36     	; 0x6f4 <M_Dio_PinRead+0x4e>
 6d0:	18 f4       	brcc	.+6      	; 0x6d8 <M_Dio_PinRead+0x32>
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <M_Dio_PinRead+0x3c>
 6d6:	29 c0       	rjmp	.+82     	; 0x72a <M_Dio_PinRead+0x84>
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	a9 f0       	breq	.+42     	; 0x706 <M_Dio_PinRead+0x60>
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	e1 f0       	breq	.+56     	; 0x718 <M_Dio_PinRead+0x72>
 6e0:	24 c0       	rjmp	.+72     	; 0x72a <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_PinValue = GetBit(PINA,Local_u8_Pin); break;
 6e2:	89 b3       	in	r24, 0x19	; 25
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <M_Dio_PinRead+0x46>
 6e8:	95 95       	asr	r25
 6ea:	87 95       	ror	r24
 6ec:	2a 95       	dec	r18
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <M_Dio_PinRead+0x42>
 6f0:	81 70       	andi	r24, 0x01	; 1
 6f2:	08 95       	ret
		case 2: Local_u8_PinValue = GetBit(PINB,Local_u8_Pin); break;
 6f4:	86 b3       	in	r24, 0x16	; 22
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <M_Dio_PinRead+0x58>
 6fa:	95 95       	asr	r25
 6fc:	87 95       	ror	r24
 6fe:	2a 95       	dec	r18
 700:	e2 f7       	brpl	.-8      	; 0x6fa <M_Dio_PinRead+0x54>
 702:	81 70       	andi	r24, 0x01	; 1
 704:	08 95       	ret
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
 706:	83 b3       	in	r24, 0x13	; 19
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <M_Dio_PinRead+0x6a>
 70c:	95 95       	asr	r25
 70e:	87 95       	ror	r24
 710:	2a 95       	dec	r18
 712:	e2 f7       	brpl	.-8      	; 0x70c <M_Dio_PinRead+0x66>
 714:	81 70       	andi	r24, 0x01	; 1
 716:	08 95       	ret
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
 718:	80 b3       	in	r24, 0x10	; 16
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <M_Dio_PinRead+0x7c>
 71e:	95 95       	asr	r25
 720:	87 95       	ror	r24
 722:	2a 95       	dec	r18
 724:	e2 f7       	brpl	.-8      	; 0x71e <M_Dio_PinRead+0x78>
 726:	81 70       	andi	r24, 0x01	; 1
 728:	08 95       	ret
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
 72a:	80 e0       	ldi	r24, 0x00	; 0
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
		default:                                               break;
	}
	return Local_u8_PinValue;
}
 72c:	08 95       	ret

0000072e <M_Dio_PinPullUpResistor>:
void M_Dio_PinPullUpResistor(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 72e:	9d ec       	ldi	r25, 0xCD	; 205
 730:	89 9f       	mul	r24, r25
 732:	91 2d       	mov	r25, r1
 734:	11 24       	eor	r1, r1
 736:	29 2f       	mov	r18, r25
 738:	26 95       	lsr	r18
 73a:	26 95       	lsr	r18
 73c:	26 95       	lsr	r18
 73e:	22 0f       	add	r18, r18
 740:	32 2f       	mov	r19, r18
 742:	33 0f       	add	r19, r19
 744:	33 0f       	add	r19, r19
 746:	23 0f       	add	r18, r19
 748:	82 1b       	sub	r24, r18
 74a:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 74c:	96 95       	lsr	r25
 74e:	96 95       	lsr	r25
 750:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 752:	61 30       	cpi	r22, 0x01	; 1
 754:	19 f0       	breq	.+6      	; 0x75c <M_Dio_PinPullUpResistor+0x2e>
 756:	62 30       	cpi	r22, 0x02	; 2
 758:	c1 f1       	breq	.+112    	; 0x7ca <M_Dio_PinPullUpResistor+0x9c>
 75a:	08 95       	ret
	{
		case ENABLE:
		switch(Local_u8_Port)
 75c:	92 30       	cpi	r25, 0x02	; 2
 75e:	a1 f0       	breq	.+40     	; 0x788 <M_Dio_PinPullUpResistor+0x5a>
 760:	18 f4       	brcc	.+6      	; 0x768 <M_Dio_PinPullUpResistor+0x3a>
 762:	91 30       	cpi	r25, 0x01	; 1
 764:	31 f0       	breq	.+12     	; 0x772 <M_Dio_PinPullUpResistor+0x44>
 766:	08 95       	ret
 768:	93 30       	cpi	r25, 0x03	; 3
 76a:	c9 f0       	breq	.+50     	; 0x79e <M_Dio_PinPullUpResistor+0x70>
 76c:	94 30       	cpi	r25, 0x04	; 4
 76e:	11 f1       	breq	.+68     	; 0x7b4 <M_Dio_PinPullUpResistor+0x86>
 770:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 772:	3b b3       	in	r19, 0x1b	; 27
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <M_Dio_PinPullUpResistor+0x50>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	2a 95       	dec	r18
 780:	e2 f7       	brpl	.-8      	; 0x77a <M_Dio_PinPullUpResistor+0x4c>
 782:	83 2b       	or	r24, r19
 784:	8b bb       	out	0x1b, r24	; 27
 786:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 788:	38 b3       	in	r19, 0x18	; 24
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <M_Dio_PinPullUpResistor+0x66>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	2a 95       	dec	r18
 796:	e2 f7       	brpl	.-8      	; 0x790 <M_Dio_PinPullUpResistor+0x62>
 798:	83 2b       	or	r24, r19
 79a:	88 bb       	out	0x18, r24	; 24
 79c:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 79e:	35 b3       	in	r19, 0x15	; 21
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <M_Dio_PinPullUpResistor+0x7c>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	2a 95       	dec	r18
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <M_Dio_PinPullUpResistor+0x78>
 7ae:	83 2b       	or	r24, r19
 7b0:	85 bb       	out	0x15, r24	; 21
 7b2:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 7b4:	32 b3       	in	r19, 0x12	; 18
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <M_Dio_PinPullUpResistor+0x92>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	2a 95       	dec	r18
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <M_Dio_PinPullUpResistor+0x8e>
 7c4:	83 2b       	or	r24, r19
 7c6:	82 bb       	out	0x12, r24	; 18
 7c8:	08 95       	ret
			default:                           break;
		}break;
		case DISABLE:
		switch(Local_u8_Port)
 7ca:	92 30       	cpi	r25, 0x02	; 2
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <M_Dio_PinPullUpResistor+0xca>
 7ce:	18 f4       	brcc	.+6      	; 0x7d6 <M_Dio_PinPullUpResistor+0xa8>
 7d0:	91 30       	cpi	r25, 0x01	; 1
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <M_Dio_PinPullUpResistor+0xb2>
 7d4:	08 95       	ret
 7d6:	93 30       	cpi	r25, 0x03	; 3
 7d8:	d9 f0       	breq	.+54     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7da:	94 30       	cpi	r25, 0x04	; 4
 7dc:	29 f1       	breq	.+74     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7de:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 7e0:	3b b3       	in	r19, 0x1b	; 27
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <M_Dio_PinPullUpResistor+0xbe>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	2a 95       	dec	r18
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <M_Dio_PinPullUpResistor+0xba>
 7f0:	80 95       	com	r24
 7f2:	83 23       	and	r24, r19
 7f4:	8b bb       	out	0x1b, r24	; 27
 7f6:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 7f8:	38 b3       	in	r19, 0x18	; 24
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	2a 95       	dec	r18
 806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	80 95       	com	r24
 80a:	83 23       	and	r24, r19
 80c:	88 bb       	out	0x18, r24	; 24
 80e:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 810:	35 b3       	in	r19, 0x15	; 21
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	2a 95       	dec	r18
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	80 95       	com	r24
 822:	83 23       	and	r24, r19
 824:	85 bb       	out	0x15, r24	; 21
 826:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 828:	32 b3       	in	r19, 0x12	; 18
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	2a 95       	dec	r18
 836:	e2 f7       	brpl	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 838:	80 95       	com	r24
 83a:	83 23       	and	r24, r19
 83c:	82 bb       	out	0x12, r24	; 18
 83e:	08 95       	ret

00000840 <M_Uart_Init>:
 */ 

#include "Uart.h"
void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 840:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 842:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 844:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 846:	87 e6       	ldi	r24, 0x67	; 103
 848:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 84a:	86 e8       	ldi	r24, 0x86	; 134
 84c:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 84e:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 850:	53 9a       	sbi	0x0a, 3	; 10
 852:	08 95       	ret

00000854 <M_Uart_Transmit>:
}
void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 854:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 856:	5e 9b       	sbis	0x0b, 6	; 11
 858:	fe cf       	rjmp	.-4      	; 0x856 <M_Uart_Transmit+0x2>
}
 85a:	08 95       	ret

0000085c <M_Uart_Receive>:
u8   M_Uart_Receive(void)
{
	while((GetBit(UCSRA,7)) == 0);
 85c:	5f 9b       	sbis	0x0b, 7	; 11
 85e:	fe cf       	rjmp	.-4      	; 0x85c <M_Uart_Receive>
	return UDR;
 860:	8c b1       	in	r24, 0x0c	; 12
 862:	08 95       	ret

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
