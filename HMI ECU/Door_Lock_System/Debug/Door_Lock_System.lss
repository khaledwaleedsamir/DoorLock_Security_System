
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000007ba  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001490  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000947  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ea  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00003190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c9  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084a  00000000  00000000  00003969  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000041b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>


int main(void)
{
	H_Keypad_Init();
  82:	0e 94 65 00 	call	0xca	; 0xca <H_Keypad_Init>
	H_Lcd_Init();
  86:	0e 94 84 01 	call	0x308	; 0x308 <H_Lcd_Init>
	H_Lcd_WriteString("Init Done !");
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <H_Lcd_WriteString>
	M_Uart_Init();
  92:	0e 94 c9 03 	call	0x792	; 0x792 <M_Uart_Init>
	u8 msg;
	u8 msgR;
	H_Lcd_Clear();
  96:	0e 94 e6 01 	call	0x3cc	; 0x3cc <H_Lcd_Clear>

	
    /* Replace with your application code */
    while (1) 
    {    
		msg = H_Keypad_Read();
  9a:	0e 94 a6 00 	call	0x14c	; 0x14c <H_Keypad_Read>
  9e:	c8 2f       	mov	r28, r24
		H_Lcd_WriteChar(msg);
  a0:	0e 94 06 01 	call	0x20c	; 0x20c <H_Lcd_WriteChar>
		M_Uart_Transmit(msg);
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <M_Uart_Transmit>
		msgR = M_Uart_Receive();
  aa:	0e 94 d7 03 	call	0x7ae	; 0x7ae <M_Uart_Receive>
		if(msgR == 'T'){
  ae:	84 35       	cpi	r24, 0x54	; 84
  b0:	29 f4       	brne	.+10     	; 0xbc <main+0x3a>
		H_Lcd_WriteString("PASS");
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <H_Lcd_WriteString>
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x18>
		}
		else if(msgR == 'F'){
  bc:	86 34       	cpi	r24, 0x46	; 70
  be:	69 f7       	brne	.-38     	; 0x9a <main+0x18>
			H_Lcd_WriteString("Incorrect Pass!");
  c0:	81 e8       	ldi	r24, 0x81	; 129
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <H_Lcd_WriteString>
  c8:	e8 cf       	rjmp	.-48     	; 0x9a <main+0x18>

000000ca <H_Keypad_Init>:
 */ 
#include "Keypad.h"
void H_Keypad_Init(void)
{
	//Keypad rows set as output
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	8e e1       	ldi	r24, 0x1E	; 30
  ce:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	81 e2       	ldi	r24, 0x21	; 33
  e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	//Keypad columns set as input
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	82 e2       	ldi	r24, 0x22	; 34
  ee:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	83 e2       	ldi	r24, 0x23	; 35
  f6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	84 e2       	ldi	r24, 0x24	; 36
  fe:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
	//rows pins set to high
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	8e e1       	ldi	r24, 0x1E	; 30
 10e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e2       	ldi	r24, 0x21	; 33
 126:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
	//columns pins pull up resistors enabled
	M_Dio_PinPullUpResistor(KEYPAD_C0_PIN,ENABLE);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e2       	ldi	r24, 0x22	; 34
 12e:	0e 94 40 03 	call	0x680	; 0x680 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C1_PIN,ENABLE);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	83 e2       	ldi	r24, 0x23	; 35
 136:	0e 94 40 03 	call	0x680	; 0x680 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C2_PIN,ENABLE);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	0e 94 40 03 	call	0x680	; 0x680 <M_Dio_PinPullUpResistor>
	M_Dio_PinPullUpResistor(KEYPAD_C3_PIN,ENABLE);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	0e 94 40 03 	call	0x680	; 0x680 <M_Dio_PinPullUpResistor>
 14a:	08 95       	ret

0000014c <H_Keypad_Read>:
}
u8 H_Keypad_Read(void)
{
 14c:	bf 92       	push	r11
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	60 97       	sbiw	r28, 0x10	; 16
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4] = {{ '7' , '8' , '9' , '/' },
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	e0 e6       	ldi	r30, 0x60	; 96
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	de 01       	movw	r26, r28
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	01 90       	ld	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	8a 95       	dec	r24
 17e:	e1 f7       	brne	.-8      	; 0x178 <H_Keypad_Read+0x2c>
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	6c 01       	movw	r12, r24
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 186:	0e e1       	ldi	r16, 0x1E	; 30
	                         { '4' , '5' , '6' , '*' },
	                         { '1' , '2' , '3' , '-' },
	                         { 'C' , '0' , '=' , '+' }};
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
 188:	b1 2c       	mov	r11, r1
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 2f       	mov	r24, r16
 18e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 192:	76 01       	movw	r14, r12
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 194:	12 e2       	ldi	r17, 0x22	; 34
		{
			Local_u8_Reading = M_Dio_PinRead(Local_u8_Col);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
 19c:	81 11       	cpse	r24, r1
 19e:	15 c0       	rjmp	.+42     	; 0x1ca <H_Keypad_Read+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	9f ef       	ldi	r25, 0xFF	; 255
 1a2:	e9 ef       	ldi	r30, 0xF9	; 249
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	91 50       	subi	r25, 0x01	; 1
 1a8:	e0 40       	sbci	r30, 0x00	; 0
 1aa:	f0 40       	sbci	r31, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <H_Keypad_Read+0x5a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <H_Keypad_Read+0x64>
 1b0:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
 1b2:	81 2f       	mov	r24, r17
 1b4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <M_Dio_PinRead>
 1b8:	81 11       	cpse	r24, r1
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <H_Keypad_Read+0x7e>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
 1bc:	81 2f       	mov	r24, r17
 1be:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <M_Dio_PinRead>
 1c2:	88 23       	and	r24, r24
 1c4:	d9 f3       	breq	.-10     	; 0x1bc <H_Keypad_Read+0x70>
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
 1c6:	f7 01       	movw	r30, r14
 1c8:	b0 80       	ld	r11, Z
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for (Local_u8_Col=KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	ff ef       	ldi	r31, 0xFF	; 255
 1ce:	ef 1a       	sub	r14, r31
 1d0:	ff 0a       	sbc	r15, r31
 1d2:	16 32       	cpi	r17, 0x26	; 38
 1d4:	01 f7       	brne	.-64     	; 0x196 <H_Keypad_Read+0x4a>
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);
					Local_u8_Value =  Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
				}
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 2f       	mov	r24, r16
 1da:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
	
	u8 Local_u8_Reading = KEYPAD_RELEASED;
	u8 Local_u8_Value = 0;
	u8 Local_u8_Row = 0;
	u8 Local_u8_Col = 0;
	for (Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	24 e0       	ldi	r18, 0x04	; 4
 1e2:	c2 0e       	add	r12, r18
 1e4:	d1 1c       	adc	r13, r1
 1e6:	02 32       	cpi	r16, 0x22	; 34
 1e8:	81 f6       	brne	.-96     	; 0x18a <H_Keypad_Read+0x3e>
			}
		}
		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	return Local_u8_Value;
 1ea:	8b 2d       	mov	r24, r11
 1ec:	60 96       	adiw	r28, 0x10	; 16
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	08 95       	ret

0000020c <H_Lcd_WriteChar>:
		{
			H_Lcd_WriteChar(Local_u8_Arr[Local_s8_Counter] + 48);
			Local_s8_Counter--;
		}
	}
}
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	85 e1       	ldi	r24, 0x15	; 21
 214:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	9c 2f       	mov	r25, r28
 21c:	90 7f       	andi	r25, 0xF0	; 240
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	89 2b       	or	r24, r25
 222:	8b bb       	out	0x1b, r24	; 27
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	87 e1       	ldi	r24, 0x17	; 23
 228:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 22c:	8f e9       	ldi	r24, 0x9F	; 159
 22e:	9f e0       	ldi	r25, 0x0F	; 15
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <H_Lcd_WriteChar+0x24>
 234:	00 c0       	rjmp	.+0      	; 0x236 <H_Lcd_WriteChar+0x2a>
 236:	00 00       	nop
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	87 e1       	ldi	r24, 0x17	; 23
 23c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 240:	8f e1       	ldi	r24, 0x1F	; 31
 242:	9e e4       	ldi	r25, 0x4E	; 78
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <H_Lcd_WriteChar+0x38>
 248:	00 c0       	rjmp	.+0      	; 0x24a <H_Lcd_WriteChar+0x3e>
 24a:	00 00       	nop
 24c:	2b b3       	in	r18, 0x1b	; 27
 24e:	30 e1       	ldi	r19, 0x10	; 16
 250:	c3 9f       	mul	r28, r19
 252:	c0 01       	movw	r24, r0
 254:	11 24       	eor	r1, r1
 256:	92 2f       	mov	r25, r18
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	87 e1       	ldi	r24, 0x17	; 23
 262:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <H_Lcd_WriteChar+0x5e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <H_Lcd_WriteChar+0x64>
 270:	00 00       	nop
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	87 e1       	ldi	r24, 0x17	; 23
 276:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 27a:	8f e1       	ldi	r24, 0x1F	; 31
 27c:	9e e4       	ldi	r25, 0x4E	; 78
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <H_Lcd_WriteChar+0x72>
 282:	00 c0       	rjmp	.+0      	; 0x284 <H_Lcd_WriteChar+0x78>
 284:	00 00       	nop
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <H_Lcd_WriteCommand>:
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	85 e1       	ldi	r24, 0x15	; 21
 292:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	9c 2f       	mov	r25, r28
 29a:	90 7f       	andi	r25, 0xF0	; 240
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	89 2b       	or	r24, r25
 2a0:	8b bb       	out	0x1b, r24	; 27
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	87 e1       	ldi	r24, 0x17	; 23
 2a6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <H_Lcd_WriteCommand+0x24>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <H_Lcd_WriteCommand+0x2a>
 2b4:	00 00       	nop
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	87 e1       	ldi	r24, 0x17	; 23
 2ba:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	9e e4       	ldi	r25, 0x4E	; 78
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <H_Lcd_WriteCommand+0x38>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <H_Lcd_WriteCommand+0x3e>
 2c8:	00 00       	nop
 2ca:	2b b3       	in	r18, 0x1b	; 27
 2cc:	30 e1       	ldi	r19, 0x10	; 16
 2ce:	c3 9f       	mul	r28, r19
 2d0:	c0 01       	movw	r24, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	92 2f       	mov	r25, r18
 2d6:	9f 70       	andi	r25, 0x0F	; 15
 2d8:	89 2b       	or	r24, r25
 2da:	8b bb       	out	0x1b, r24	; 27
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	87 e1       	ldi	r24, 0x17	; 23
 2e0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 2e4:	8f e9       	ldi	r24, 0x9F	; 159
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <H_Lcd_WriteCommand+0x5e>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <H_Lcd_WriteCommand+0x64>
 2ee:	00 00       	nop
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	87 e1       	ldi	r24, 0x17	; 23
 2f4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	9e e4       	ldi	r25, 0x4E	; 78
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <H_Lcd_WriteCommand+0x72>
 300:	00 c0       	rjmp	.+0      	; 0x302 <H_Lcd_WriteCommand+0x78>
 302:	00 00       	nop
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <H_Lcd_Init>:
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	8b e0       	ldi	r24, 0x0B	; 11
 314:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	8e e0       	ldi	r24, 0x0E	; 14
 32c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	80 e1       	ldi	r24, 0x10	; 16
 33c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e1       	ldi	r24, 0x11	; 17
 344:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	85 e1       	ldi	r24, 0x15	; 21
 34c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	86 e1       	ldi	r24, 0x16	; 22
 354:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	87 e1       	ldi	r24, 0x17	; 23
 35c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <M_Dio_PinMode>
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	86 e1       	ldi	r24, 0x16	; 22
 364:	0e 94 73 02 	call	0x4e6	; 0x4e6 <M_Dio_PinWrite>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <H_Lcd_Init+0x66>
 376:	00 c0       	rjmp	.+0      	; 0x378 <H_Lcd_Init+0x70>
 378:	00 00       	nop
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 380:	82 e3       	ldi	r24, 0x32	; 50
 382:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 39e:	08 95       	ret

000003a0 <H_Lcd_WriteString>:
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	fc 01       	movw	r30, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	88 23       	and	r24, r24
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <H_Lcd_WriteString+0x24>
 3ae:	8f 01       	movw	r16, r30
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
 3b2:	0e 94 06 01 	call	0x20c	; 0x20c <H_Lcd_WriteChar>
 3b6:	cf 5f       	subi	r28, 0xFF	; 255
 3b8:	f8 01       	movw	r30, r16
 3ba:	ec 0f       	add	r30, r28
 3bc:	f1 1d       	adc	r31, r1
 3be:	80 81       	ld	r24, Z
 3c0:	81 11       	cpse	r24, r1
 3c2:	f7 cf       	rjmp	.-18     	; 0x3b2 <H_Lcd_WriteString+0x12>
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <H_Lcd_Clear>:
void H_Lcd_Clear(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 45 01 	call	0x28a	; 0x28a <H_Lcd_WriteCommand>
 3d2:	08 95       	ret

000003d4 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin); break;
		case 2: TogBit(PORTB,Local_u8_Pin); break;
		case 3: TogBit(PORTC,Local_u8_Pin); break;
		case 4: TogBit(PORTD,Local_u8_Pin); break;
 3d4:	9d ec       	ldi	r25, 0xCD	; 205
 3d6:	89 9f       	mul	r24, r25
 3d8:	91 2d       	mov	r25, r1
 3da:	11 24       	eor	r1, r1
 3dc:	29 2f       	mov	r18, r25
 3de:	26 95       	lsr	r18
 3e0:	26 95       	lsr	r18
 3e2:	26 95       	lsr	r18
 3e4:	22 0f       	add	r18, r18
 3e6:	32 2f       	mov	r19, r18
 3e8:	33 0f       	add	r19, r19
 3ea:	33 0f       	add	r19, r19
 3ec:	23 0f       	add	r18, r19
 3ee:	82 1b       	sub	r24, r18
 3f0:	28 2f       	mov	r18, r24
 3f2:	96 95       	lsr	r25
 3f4:	96 95       	lsr	r25
 3f6:	96 95       	lsr	r25
 3f8:	61 30       	cpi	r22, 0x01	; 1
 3fa:	19 f0       	breq	.+6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fc:	62 30       	cpi	r22, 0x02	; 2
 3fe:	c1 f1       	breq	.+112    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 400:	08 95       	ret
 402:	92 30       	cpi	r25, 0x02	; 2
 404:	a1 f0       	breq	.+40     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 406:	18 f4       	brcc	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	91 30       	cpi	r25, 0x01	; 1
 40a:	31 f0       	breq	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40c:	08 95       	ret
 40e:	93 30       	cpi	r25, 0x03	; 3
 410:	c9 f0       	breq	.+50     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 412:	94 30       	cpi	r25, 0x04	; 4
 414:	11 f1       	breq	.+68     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 416:	08 95       	ret
 418:	3a b3       	in	r19, 0x1a	; 26
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	2a 95       	dec	r18
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	83 2b       	or	r24, r19
 42a:	8a bb       	out	0x1a, r24	; 26
 42c:	08 95       	ret
 42e:	37 b3       	in	r19, 0x17	; 23
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	2a 95       	dec	r18
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	83 2b       	or	r24, r19
 440:	87 bb       	out	0x17, r24	; 23
 442:	08 95       	ret
 444:	34 b3       	in	r19, 0x14	; 20
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	2a 95       	dec	r18
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	83 2b       	or	r24, r19
 456:	84 bb       	out	0x14, r24	; 20
 458:	08 95       	ret
 45a:	31 b3       	in	r19, 0x11	; 17
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	2a 95       	dec	r18
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	83 2b       	or	r24, r19
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	08 95       	ret
 470:	92 30       	cpi	r25, 0x02	; 2
 472:	a9 f0       	breq	.+42     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 474:	18 f4       	brcc	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 476:	91 30       	cpi	r25, 0x01	; 1
 478:	31 f0       	breq	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47a:	08 95       	ret
 47c:	93 30       	cpi	r25, 0x03	; 3
 47e:	d9 f0       	breq	.+54     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 480:	94 30       	cpi	r25, 0x04	; 4
 482:	29 f1       	breq	.+74     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 484:	08 95       	ret
 486:	3a b3       	in	r19, 0x1a	; 26
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	2a 95       	dec	r18
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	80 95       	com	r24
 498:	83 23       	and	r24, r19
 49a:	8a bb       	out	0x1a, r24	; 26
 49c:	08 95       	ret
 49e:	37 b3       	in	r19, 0x17	; 23
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4ae:	80 95       	com	r24
 4b0:	83 23       	and	r24, r19
 4b2:	87 bb       	out	0x17, r24	; 23
 4b4:	08 95       	ret
 4b6:	34 b3       	in	r19, 0x14	; 20
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	2a 95       	dec	r18
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	80 95       	com	r24
 4c8:	83 23       	and	r24, r19
 4ca:	84 bb       	out	0x14, r24	; 20
 4cc:	08 95       	ret
 4ce:	31 b3       	in	r19, 0x11	; 17
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	2a 95       	dec	r18
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4de:	80 95       	com	r24
 4e0:	83 23       	and	r24, r19
 4e2:	81 bb       	out	0x11, r24	; 17
 4e4:	08 95       	ret

000004e6 <M_Dio_PinWrite>:
 4e6:	9d ec       	ldi	r25, 0xCD	; 205
 4e8:	89 9f       	mul	r24, r25
 4ea:	91 2d       	mov	r25, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	29 2f       	mov	r18, r25
 4f0:	26 95       	lsr	r18
 4f2:	26 95       	lsr	r18
 4f4:	26 95       	lsr	r18
 4f6:	22 0f       	add	r18, r18
 4f8:	32 2f       	mov	r19, r18
 4fa:	33 0f       	add	r19, r19
 4fc:	33 0f       	add	r19, r19
 4fe:	23 0f       	add	r18, r19
 500:	82 1b       	sub	r24, r18
 502:	28 2f       	mov	r18, r24
 504:	96 95       	lsr	r25
 506:	96 95       	lsr	r25
 508:	96 95       	lsr	r25
 50a:	61 30       	cpi	r22, 0x01	; 1
 50c:	19 f0       	breq	.+6      	; 0x514 <M_Dio_PinWrite+0x2e>
 50e:	62 30       	cpi	r22, 0x02	; 2
 510:	c1 f1       	breq	.+112    	; 0x582 <M_Dio_PinWrite+0x9c>
 512:	08 95       	ret
 514:	92 30       	cpi	r25, 0x02	; 2
 516:	a1 f0       	breq	.+40     	; 0x540 <M_Dio_PinWrite+0x5a>
 518:	18 f4       	brcc	.+6      	; 0x520 <M_Dio_PinWrite+0x3a>
 51a:	91 30       	cpi	r25, 0x01	; 1
 51c:	31 f0       	breq	.+12     	; 0x52a <M_Dio_PinWrite+0x44>
 51e:	08 95       	ret
 520:	93 30       	cpi	r25, 0x03	; 3
 522:	c9 f0       	breq	.+50     	; 0x556 <M_Dio_PinWrite+0x70>
 524:	94 30       	cpi	r25, 0x04	; 4
 526:	11 f1       	breq	.+68     	; 0x56c <M_Dio_PinWrite+0x86>
 528:	08 95       	ret
 52a:	3b b3       	in	r19, 0x1b	; 27
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <M_Dio_PinWrite+0x50>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	2a 95       	dec	r18
 538:	e2 f7       	brpl	.-8      	; 0x532 <M_Dio_PinWrite+0x4c>
 53a:	83 2b       	or	r24, r19
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	08 95       	ret
 540:	38 b3       	in	r19, 0x18	; 24
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <M_Dio_PinWrite+0x66>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	2a 95       	dec	r18
 54e:	e2 f7       	brpl	.-8      	; 0x548 <M_Dio_PinWrite+0x62>
 550:	83 2b       	or	r24, r19
 552:	88 bb       	out	0x18, r24	; 24
 554:	08 95       	ret
 556:	35 b3       	in	r19, 0x15	; 21
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <M_Dio_PinWrite+0x7c>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	2a 95       	dec	r18
 564:	e2 f7       	brpl	.-8      	; 0x55e <M_Dio_PinWrite+0x78>
 566:	83 2b       	or	r24, r19
 568:	85 bb       	out	0x15, r24	; 21
 56a:	08 95       	ret
 56c:	32 b3       	in	r19, 0x12	; 18
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <M_Dio_PinWrite+0x92>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	2a 95       	dec	r18
 57a:	e2 f7       	brpl	.-8      	; 0x574 <M_Dio_PinWrite+0x8e>
 57c:	83 2b       	or	r24, r19
 57e:	82 bb       	out	0x12, r24	; 18
 580:	08 95       	ret
 582:	92 30       	cpi	r25, 0x02	; 2
 584:	a9 f0       	breq	.+42     	; 0x5b0 <M_Dio_PinWrite+0xca>
 586:	18 f4       	brcc	.+6      	; 0x58e <M_Dio_PinWrite+0xa8>
 588:	91 30       	cpi	r25, 0x01	; 1
 58a:	31 f0       	breq	.+12     	; 0x598 <M_Dio_PinWrite+0xb2>
 58c:	08 95       	ret
 58e:	93 30       	cpi	r25, 0x03	; 3
 590:	d9 f0       	breq	.+54     	; 0x5c8 <M_Dio_PinWrite+0xe2>
 592:	94 30       	cpi	r25, 0x04	; 4
 594:	29 f1       	breq	.+74     	; 0x5e0 <M_Dio_PinWrite+0xfa>
 596:	08 95       	ret
 598:	3b b3       	in	r19, 0x1b	; 27
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <M_Dio_PinWrite+0xbe>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	2a 95       	dec	r18
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <M_Dio_PinWrite+0xba>
 5a8:	80 95       	com	r24
 5aa:	83 23       	and	r24, r19
 5ac:	8b bb       	out	0x1b, r24	; 27
 5ae:	08 95       	ret
 5b0:	38 b3       	in	r19, 0x18	; 24
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <M_Dio_PinWrite+0xd6>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	2a 95       	dec	r18
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <M_Dio_PinWrite+0xd2>
 5c0:	80 95       	com	r24
 5c2:	83 23       	and	r24, r19
 5c4:	88 bb       	out	0x18, r24	; 24
 5c6:	08 95       	ret
 5c8:	35 b3       	in	r19, 0x15	; 21
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <M_Dio_PinWrite+0xee>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	2a 95       	dec	r18
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <M_Dio_PinWrite+0xea>
 5d8:	80 95       	com	r24
 5da:	83 23       	and	r24, r19
 5dc:	85 bb       	out	0x15, r24	; 21
 5de:	08 95       	ret
 5e0:	32 b3       	in	r19, 0x12	; 18
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <M_Dio_PinWrite+0x106>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <M_Dio_PinWrite+0x102>
 5f0:	80 95       	com	r24
 5f2:	83 23       	and	r24, r19
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret

000005f8 <M_Dio_PinRead>:
		default:                            break;
	}
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 5f8:	9d ec       	ldi	r25, 0xCD	; 205
 5fa:	89 9f       	mul	r24, r25
 5fc:	91 2d       	mov	r25, r1
 5fe:	11 24       	eor	r1, r1
 600:	29 2f       	mov	r18, r25
 602:	26 95       	lsr	r18
 604:	26 95       	lsr	r18
 606:	26 95       	lsr	r18
 608:	22 0f       	add	r18, r18
 60a:	32 2f       	mov	r19, r18
 60c:	33 0f       	add	r19, r19
 60e:	33 0f       	add	r19, r19
 610:	23 0f       	add	r18, r19
 612:	82 1b       	sub	r24, r18
 614:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
	switch(Local_u8_Port)
 616:	89 2f       	mov	r24, r25
 618:	86 95       	lsr	r24
 61a:	86 95       	lsr	r24
 61c:	86 95       	lsr	r24
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	91 f0       	breq	.+36     	; 0x646 <M_Dio_PinRead+0x4e>
 622:	18 f4       	brcc	.+6      	; 0x62a <M_Dio_PinRead+0x32>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	31 f0       	breq	.+12     	; 0x634 <M_Dio_PinRead+0x3c>
 628:	29 c0       	rjmp	.+82     	; 0x67c <M_Dio_PinRead+0x84>
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	a9 f0       	breq	.+42     	; 0x658 <M_Dio_PinRead+0x60>
 62e:	84 30       	cpi	r24, 0x04	; 4
 630:	e1 f0       	breq	.+56     	; 0x66a <M_Dio_PinRead+0x72>
 632:	24 c0       	rjmp	.+72     	; 0x67c <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_PinValue = GetBit(PINA,Local_u8_Pin); break;
 634:	89 b3       	in	r24, 0x19	; 25
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <M_Dio_PinRead+0x46>
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	2a 95       	dec	r18
 640:	e2 f7       	brpl	.-8      	; 0x63a <M_Dio_PinRead+0x42>
 642:	81 70       	andi	r24, 0x01	; 1
 644:	08 95       	ret
		case 2: Local_u8_PinValue = GetBit(PINB,Local_u8_Pin); break;
 646:	86 b3       	in	r24, 0x16	; 22
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <M_Dio_PinRead+0x58>
 64c:	95 95       	asr	r25
 64e:	87 95       	ror	r24
 650:	2a 95       	dec	r18
 652:	e2 f7       	brpl	.-8      	; 0x64c <M_Dio_PinRead+0x54>
 654:	81 70       	andi	r24, 0x01	; 1
 656:	08 95       	ret
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
 658:	83 b3       	in	r24, 0x13	; 19
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <M_Dio_PinRead+0x6a>
 65e:	95 95       	asr	r25
 660:	87 95       	ror	r24
 662:	2a 95       	dec	r18
 664:	e2 f7       	brpl	.-8      	; 0x65e <M_Dio_PinRead+0x66>
 666:	81 70       	andi	r24, 0x01	; 1
 668:	08 95       	ret
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
 66a:	80 b3       	in	r24, 0x10	; 16
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <M_Dio_PinRead+0x7c>
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	2a 95       	dec	r18
 676:	e2 f7       	brpl	.-8      	; 0x670 <M_Dio_PinRead+0x78>
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	08 95       	ret
}
u8 M_Dio_PinRead(u8 Local_u8_Num)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_PinValue = 0;
 67c:	80 e0       	ldi	r24, 0x00	; 0
		case 3: Local_u8_PinValue = GetBit(PINC,Local_u8_Pin); break;
		case 4: Local_u8_PinValue = GetBit(PIND,Local_u8_Pin); break;
		default:                                               break;
	}
	return Local_u8_PinValue;
}
 67e:	08 95       	ret

00000680 <M_Dio_PinPullUpResistor>:
void M_Dio_PinPullUpResistor(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 680:	9d ec       	ldi	r25, 0xCD	; 205
 682:	89 9f       	mul	r24, r25
 684:	91 2d       	mov	r25, r1
 686:	11 24       	eor	r1, r1
 688:	29 2f       	mov	r18, r25
 68a:	26 95       	lsr	r18
 68c:	26 95       	lsr	r18
 68e:	26 95       	lsr	r18
 690:	22 0f       	add	r18, r18
 692:	32 2f       	mov	r19, r18
 694:	33 0f       	add	r19, r19
 696:	33 0f       	add	r19, r19
 698:	23 0f       	add	r18, r19
 69a:	82 1b       	sub	r24, r18
 69c:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 69e:	96 95       	lsr	r25
 6a0:	96 95       	lsr	r25
 6a2:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 6a4:	61 30       	cpi	r22, 0x01	; 1
 6a6:	19 f0       	breq	.+6      	; 0x6ae <M_Dio_PinPullUpResistor+0x2e>
 6a8:	62 30       	cpi	r22, 0x02	; 2
 6aa:	c1 f1       	breq	.+112    	; 0x71c <M_Dio_PinPullUpResistor+0x9c>
 6ac:	08 95       	ret
	{
		case ENABLE:
		switch(Local_u8_Port)
 6ae:	92 30       	cpi	r25, 0x02	; 2
 6b0:	a1 f0       	breq	.+40     	; 0x6da <M_Dio_PinPullUpResistor+0x5a>
 6b2:	18 f4       	brcc	.+6      	; 0x6ba <M_Dio_PinPullUpResistor+0x3a>
 6b4:	91 30       	cpi	r25, 0x01	; 1
 6b6:	31 f0       	breq	.+12     	; 0x6c4 <M_Dio_PinPullUpResistor+0x44>
 6b8:	08 95       	ret
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	c9 f0       	breq	.+50     	; 0x6f0 <M_Dio_PinPullUpResistor+0x70>
 6be:	94 30       	cpi	r25, 0x04	; 4
 6c0:	11 f1       	breq	.+68     	; 0x706 <M_Dio_PinPullUpResistor+0x86>
 6c2:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 6c4:	3b b3       	in	r19, 0x1b	; 27
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <M_Dio_PinPullUpResistor+0x50>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	2a 95       	dec	r18
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <M_Dio_PinPullUpResistor+0x4c>
 6d4:	83 2b       	or	r24, r19
 6d6:	8b bb       	out	0x1b, r24	; 27
 6d8:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 6da:	38 b3       	in	r19, 0x18	; 24
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <M_Dio_PinPullUpResistor+0x66>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	2a 95       	dec	r18
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <M_Dio_PinPullUpResistor+0x62>
 6ea:	83 2b       	or	r24, r19
 6ec:	88 bb       	out	0x18, r24	; 24
 6ee:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 6f0:	35 b3       	in	r19, 0x15	; 21
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <M_Dio_PinPullUpResistor+0x7c>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	2a 95       	dec	r18
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <M_Dio_PinPullUpResistor+0x78>
 700:	83 2b       	or	r24, r19
 702:	85 bb       	out	0x15, r24	; 21
 704:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 706:	32 b3       	in	r19, 0x12	; 18
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <M_Dio_PinPullUpResistor+0x92>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	2a 95       	dec	r18
 714:	e2 f7       	brpl	.-8      	; 0x70e <M_Dio_PinPullUpResistor+0x8e>
 716:	83 2b       	or	r24, r19
 718:	82 bb       	out	0x12, r24	; 18
 71a:	08 95       	ret
			default:                           break;
		}break;
		case DISABLE:
		switch(Local_u8_Port)
 71c:	92 30       	cpi	r25, 0x02	; 2
 71e:	a9 f0       	breq	.+42     	; 0x74a <M_Dio_PinPullUpResistor+0xca>
 720:	18 f4       	brcc	.+6      	; 0x728 <M_Dio_PinPullUpResistor+0xa8>
 722:	91 30       	cpi	r25, 0x01	; 1
 724:	31 f0       	breq	.+12     	; 0x732 <M_Dio_PinPullUpResistor+0xb2>
 726:	08 95       	ret
 728:	93 30       	cpi	r25, 0x03	; 3
 72a:	d9 f0       	breq	.+54     	; 0x762 <M_Dio_PinPullUpResistor+0xe2>
 72c:	94 30       	cpi	r25, 0x04	; 4
 72e:	29 f1       	breq	.+74     	; 0x77a <M_Dio_PinPullUpResistor+0xfa>
 730:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 732:	3b b3       	in	r19, 0x1b	; 27
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <M_Dio_PinPullUpResistor+0xbe>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	2a 95       	dec	r18
 740:	e2 f7       	brpl	.-8      	; 0x73a <M_Dio_PinPullUpResistor+0xba>
 742:	80 95       	com	r24
 744:	83 23       	and	r24, r19
 746:	8b bb       	out	0x1b, r24	; 27
 748:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 74a:	38 b3       	in	r19, 0x18	; 24
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <M_Dio_PinPullUpResistor+0xd6>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	2a 95       	dec	r18
 758:	e2 f7       	brpl	.-8      	; 0x752 <M_Dio_PinPullUpResistor+0xd2>
 75a:	80 95       	com	r24
 75c:	83 23       	and	r24, r19
 75e:	88 bb       	out	0x18, r24	; 24
 760:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 762:	35 b3       	in	r19, 0x15	; 21
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <M_Dio_PinPullUpResistor+0xee>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	2a 95       	dec	r18
 770:	e2 f7       	brpl	.-8      	; 0x76a <M_Dio_PinPullUpResistor+0xea>
 772:	80 95       	com	r24
 774:	83 23       	and	r24, r19
 776:	85 bb       	out	0x15, r24	; 21
 778:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 77a:	32 b3       	in	r19, 0x12	; 18
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <M_Dio_PinPullUpResistor+0x106>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	2a 95       	dec	r18
 788:	e2 f7       	brpl	.-8      	; 0x782 <M_Dio_PinPullUpResistor+0x102>
 78a:	80 95       	com	r24
 78c:	83 23       	and	r24, r19
 78e:	82 bb       	out	0x12, r24	; 18
 790:	08 95       	ret

00000792 <M_Uart_Init>:
 */ 

#include "Uart.h"
void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 792:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 794:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 796:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 798:	87 e6       	ldi	r24, 0x67	; 103
 79a:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 79c:	86 e8       	ldi	r24, 0x86	; 134
 79e:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 7a0:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 7a2:	53 9a       	sbi	0x0a, 3	; 10
 7a4:	08 95       	ret

000007a6 <M_Uart_Transmit>:
}
void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 7a6:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 7a8:	5e 9b       	sbis	0x0b, 6	; 11
 7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <M_Uart_Transmit+0x2>
}
 7ac:	08 95       	ret

000007ae <M_Uart_Receive>:
u8   M_Uart_Receive(void)
{
	while((GetBit(UCSRA,7)) == 0);
 7ae:	5f 9b       	sbis	0x0b, 7	; 11
 7b0:	fe cf       	rjmp	.-4      	; 0x7ae <M_Uart_Receive>
	return UDR;
 7b2:	8c b1       	in	r24, 0x0c	; 12
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
