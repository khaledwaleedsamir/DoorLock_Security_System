
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  00000a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c7a  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce3  00000000  00000000  000029d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001168  00000000  00000000  000036b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00004824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd5  00000000  00000000  0000561e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000063f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 13 05 	jmp	0xa26	; 0xa26 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <A_Timer0_Execution>:
 * Return        : void.
 */

void A_Timer0_Execution(void)
{
	H_Motor_Stop();
  7c:	0e 94 c3 02 	call	0x586	; 0x586 <H_Motor_Stop>
	H_Buzzer_Off();
  80:	0e 94 25 02 	call	0x44a	; 0x44a <H_Buzzer_Off>
	M_Timer0_Stop();
  84:	0e 94 4a 04 	call	0x894	; 0x894 <M_Timer0_Stop>
	Global_u8_SystemState = 2;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	08 95       	ret

00000090 <A_Main_ConfirmPassword>:
 */
u8 A_Main_ConfirmPassword(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
	{
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
  90:	fc 01       	movw	r30, r24
  92:	30 81       	ld	r19, Z
  94:	fb 01       	movw	r30, r22
  96:	20 81       	ld	r18, Z
  98:	32 13       	cpse	r19, r18
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <A_Main_ConfirmPassword+0x26>
  9c:	dc 01       	movw	r26, r24
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	31 96       	adiw	r30, 0x01	; 1
  a2:	05 96       	adiw	r24, 0x05	; 5
  a4:	3d 91       	ld	r19, X+
  a6:	21 91       	ld	r18, Z+
  a8:	32 13       	cpse	r19, r18
  aa:	07 c0       	rjmp	.+14     	; 0xba <A_Main_ConfirmPassword+0x2a>
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_ConfirmPassword(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
  ac:	a8 17       	cp	r26, r24
  ae:	b9 07       	cpc	r27, r25
  b0:	c9 f7       	brne	.-14     	; 0xa4 <A_Main_ConfirmPassword+0x14>
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
		}
	}
	return SUCCESS;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
	{
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret
  ba:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SUCCESS;
}
  bc:	08 95       	ret

000000be <A_Main_CheckPasswordEeprom>:
 *                 password in the EEPROM.
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_CheckPasswordEeprom(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	7c 01       	movw	r14, r24
  cc:	06 2f       	mov	r16, r22
  ce:	17 2f       	mov	r17, r23
  d0:	c1 e1       	ldi	r28, 0x11	; 17
  d2:	d3 e0       	ldi	r29, 0x03	; 3
	for (int i = 0; i<PASSWORD_SIZE; i++)
	{
		Local_u8_Str1[i]= H_Eeprom_Read(0x0311+i); // reads the saved password in the EEPROM 
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 4b 02 	call	0x496	; 0x496 <H_Eeprom_Read>
  da:	f7 01       	movw	r30, r14
  dc:	81 93       	st	Z+, r24
  de:	7f 01       	movw	r14, r30
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
  e0:	f8 01       	movw	r30, r16
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	89 13       	cpse	r24, r25
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <A_Main_CheckPasswordEeprom+0x3a>
  ea:	21 96       	adiw	r28, 0x01	; 1
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_CheckPasswordEeprom(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for (int i = 0; i<PASSWORD_SIZE; i++)
  ec:	c6 31       	cpi	r28, 0x16	; 22
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	df 07       	cpc	r29, r31
  f2:	81 f7       	brne	.-32     	; 0xd4 <A_Main_CheckPasswordEeprom+0x16>
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
		}
	}
	return SUCCESS;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <A_Main_CheckPasswordEeprom+0x3c>
	for (int i = 0; i<PASSWORD_SIZE; i++)
	{
		Local_u8_Str1[i]= H_Eeprom_Read(0x0311+i); // reads the saved password in the EEPROM 
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
  f8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SUCCESS;
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	08 95       	ret

00000108 <main>:


int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	2a 97       	sbiw	r28, 0x0a	; 10
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
	// Initializing UART, LEDs, Buzzer, and Motor.
	M_Uart_Init();
 11c:	0e 94 c5 04 	call	0x98a	; 0x98a <M_Uart_Init>
	H_Buzzer_Init();
 120:	0e 94 1b 02 	call	0x436	; 0x436 <H_Buzzer_Init>
	H_Leds_Init();
 124:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Leds_Init>
	H_Motor_Init();
 128:	0e 94 a9 02 	call	0x552	; 0x552 <H_Motor_Init>
	H_Eeprom_Init();
 12c:	0e 94 2a 02 	call	0x454	; 0x454 <H_Eeprom_Init>
	u8 Local_u8_StrPasswordCheck[PASSWORD_SIZE];
	u8 Local_u8_CheckPassword;
	u8 Local_u8_TrialCounter = 0;
	u8 Local_u8_Result;
	
	while(M_Uart_ReceiveByte() != HMI_READY );   // this waits until the HMI MC is ready
 130:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
 134:	80 32       	cpi	r24, 0x20	; 32
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x28>
	Local_u8_CheckPassword = H_Eeprom_Read(0x0311); // check if there is a password already in the EEPROM.
 138:	81 e1       	ldi	r24, 0x11	; 17
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	0e 94 4b 02 	call	0x496	; 0x496 <H_Eeprom_Read>
	if (Local_u8_CheckPassword != 0xFF)          // Determine the system current state based on EEPROM.
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	41 f0       	breq	.+16     	; 0x154 <main+0x4c>
	{
		Global_u8_SystemState = 2;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		M_Uart_SendByte(Global_u8_SystemState);
 14a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14e:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
 152:	06 c0       	rjmp	.+12     	; 0x160 <main+0x58>
	}
	else
	{
		Global_u8_SystemState = 0;
 154:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		M_Uart_SendByte(Global_u8_SystemState);
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
				M_Uart_SendByte(Global_u8_SystemState);
			}
			
			else if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 160:	91 2c       	mov	r9, r1
 162:	7e 01       	movw	r14, r28
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	e8 0e       	add	r14, r24
 168:	f1 1c       	adc	r15, r1
				H_Leds_On(Local_u8_TrialCounter);
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 16a:	0f 2e       	mov	r0, r31
 16c:	f5 e0       	ldi	r31, 0x05	; 5
 16e:	3f 2e       	mov	r3, r31
 170:	f0 2d       	mov	r31, r0
			break;
			
			
			/* This case is for when the user used the maximum amount of trials. */
			case 5:
			Global_u32_MS = 60000; // time for timer0 in ms.
 172:	0f 2e       	mov	r0, r31
 174:	f0 e6       	ldi	r31, 0x60	; 96
 176:	4f 2e       	mov	r4, r31
 178:	fa ee       	ldi	r31, 0xEA	; 234
 17a:	5f 2e       	mov	r5, r31
 17c:	61 2c       	mov	r6, r1
 17e:	71 2c       	mov	r7, r1
 180:	f0 2d       	mov	r31, r0
 182:	6e 01       	movw	r12, r28
 184:	9b e0       	ldi	r25, 0x0B	; 11
 186:	c9 0e       	add	r12, r25
 188:	d1 1c       	adc	r13, r1
			{
				Global_u8_SystemState = 4;
			}
			else if(Local_u8_Symbol == '-')
			{
				Global_u8_SystemState = 6;
 18a:	0f 2e       	mov	r0, r31
 18c:	f6 e0       	ldi	r31, 0x06	; 6
 18e:	2f 2e       	mov	r2, r31
 190:	f0 2d       	mov	r31, r0
			{
				Global_u8_SystemState = 3;
			}
			else if(Local_u8_Symbol == '+')
			{
				Global_u8_SystemState = 4;
 192:	68 94       	set
 194:	88 24       	eor	r8, r8
 196:	82 f8       	bld	r8, 2
	
	
	
    while (1) 
    {  
		switch (Global_u8_SystemState)
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	09 f4       	brne	.+2      	; 0x1a2 <main+0x9a>
 1a0:	57 c0       	rjmp	.+174    	; 0x250 <main+0x148>
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <main+0xa6>
 1a4:	88 23       	and	r24, r24
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <main+0xb8>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	b9 f1       	breq	.+110    	; 0x21a <main+0x112>
 1ac:	f5 cf       	rjmp	.-22     	; 0x198 <main+0x90>
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <main+0xac>
 1b2:	ca c0       	rjmp	.+404    	; 0x348 <main+0x240>
 1b4:	08 f4       	brcc	.+2      	; 0x1b8 <main+0xb0>
 1b6:	62 c0       	rjmp	.+196    	; 0x27c <main+0x174>
 1b8:	85 30       	cpi	r24, 0x05	; 5
 1ba:	09 f4       	brne	.+2      	; 0x1be <main+0xb6>
 1bc:	10 c1       	rjmp	.+544    	; 0x3de <main+0x2d6>
 1be:	ec cf       	rjmp	.-40     	; 0x198 <main+0x90>
 1c0:	8e 01       	movw	r16, r28
 1c2:	0f 5f       	subi	r16, 0xFF	; 255
 1c4:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			/* This case is the case of running the program for the first time with no password set before in the EEPROM */
			case 0:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
 1c6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
 1ca:	d8 01       	movw	r26, r16
 1cc:	8d 93       	st	X+, r24
 1ce:	8d 01       	movw	r16, r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	ef e9       	ldi	r30, 0x9F	; 159
 1d2:	ff e0       	ldi	r31, 0x0F	; 15
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0xcc>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xd2>
 1da:	00 00       	nop
    {  
		switch (Global_u8_SystemState)
		{
			/* This case is the case of running the program for the first time with no password set before in the EEPROM */
			case 0:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 1dc:	ea 16       	cp	r14, r26
 1de:	fb 06       	cpc	r15, r27
 1e0:	91 f7       	brne	.-28     	; 0x1c6 <main+0xbe>
 1e2:	8e 01       	movw	r16, r28
 1e4:	0a 5f       	subi	r16, 0xFA	; 250
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
				_delay_ms(1);
			}
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPasswordCheck[i] = M_Uart_ReceiveByte(); // Receiving the password confirmation from the HMI ECU.
 1e8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
 1ec:	d8 01       	movw	r26, r16
 1ee:	8d 93       	st	X+, r24
 1f0:	8d 01       	movw	r16, r26
 1f2:	ef e9       	ldi	r30, 0x9F	; 159
 1f4:	ff e0       	ldi	r31, 0x0F	; 15
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xee>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xf4>
 1fc:	00 00       	nop
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
				_delay_ms(1);
			}
			for (int i = 0; i<PASSWORD_SIZE; i++)
 1fe:	ca 16       	cp	r12, r26
 200:	db 06       	cpc	r13, r27
 202:	91 f7       	brne	.-28     	; 0x1e8 <main+0xe0>
				Local_u8_StrPasswordCheck[i] = M_Uart_ReceiveByte(); // Receiving the password confirmation from the HMI ECU.
				_delay_ms(1);
			}
			/* SUCCESS = 1 and ERROR = 0 , System state will be determined based on whether the entered passwords match or not. */
			
			Local_u8_CheckPassword = A_Main_ConfirmPassword(Local_u8_StrPassword, Local_u8_StrPasswordCheck);
 204:	b7 01       	movw	r22, r14
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	0e 94 48 00 	call	0x90	; 0x90 <A_Main_ConfirmPassword>
 20e:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_CheckPassword);
 210:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
			Global_u8_SystemState = Local_u8_CheckPassword;
 214:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 218:	bf cf       	rjmp	.-130    	; 0x198 <main+0x90>
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	5c 01       	movw	r10, r24
	
	
	
    while (1) 
    {  
		switch (Global_u8_SystemState)
 220:	01 e1       	ldi	r16, 0x11	; 17
 222:	13 e0       	ldi	r17, 0x03	; 3
			
			/* This case is follows the first case to save the password to the EEPROM if password entered and confirmed successfully. */
			case 1:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				H_Eeprom_Write(Local_u8_StrPassword[i],0x0311+i);
 224:	b8 01       	movw	r22, r16
 226:	d5 01       	movw	r26, r10
 228:	8d 91       	ld	r24, X+
 22a:	5d 01       	movw	r10, r26
 22c:	0e 94 2d 02 	call	0x45a	; 0x45a <H_Eeprom_Write>
 230:	ef e3       	ldi	r30, 0x3F	; 63
 232:	fc e9       	ldi	r31, 0x9C	; 156
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x12c>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x132>
 23a:	00 00       	nop
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
			Global_u8_SystemState = Local_u8_CheckPassword;
			break;
			
			/* This case is follows the first case to save the password to the EEPROM if password entered and confirmed successfully. */
			case 1:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 240:	06 31       	cpi	r16, 0x16	; 22
 242:	f3 e0       	ldi	r31, 0x03	; 3
 244:	1f 07       	cpc	r17, r31
 246:	71 f7       	brne	.-36     	; 0x224 <main+0x11c>
			{
				H_Eeprom_Write(Local_u8_StrPassword[i],0x0311+i);
				_delay_ms(10);
			}
			Global_u8_SystemState = 2;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 24e:	a4 cf       	rjmp	.-184    	; 0x198 <main+0x90>
			
			
			/* This case is the normal case of running the system with a password saved */
			case 2:
			M_Uart_SendByte(C_READY); // sending to the HMI ECU that the control ECU is ready.
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
			
			u8 Local_u8_Symbol = M_Uart_ReceiveByte(); // determining system state based on received symbol.
 256:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
			
			if(Local_u8_Symbol == '*')
 25a:	8a 32       	cpi	r24, 0x2A	; 42
 25c:	21 f4       	brne	.+8      	; 0x266 <main+0x15e>
			{
				Global_u8_SystemState = 3;
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 264:	99 cf       	rjmp	.-206    	; 0x198 <main+0x90>
			}
			else if(Local_u8_Symbol == '+')
 266:	8b 32       	cpi	r24, 0x2B	; 43
 268:	19 f4       	brne	.+6      	; 0x270 <main+0x168>
			{
				Global_u8_SystemState = 4;
 26a:	80 92 60 00 	sts	0x0060, r8	; 0x800060 <__DATA_REGION_ORIGIN__>
 26e:	94 cf       	rjmp	.-216    	; 0x198 <main+0x90>
			}
			else if(Local_u8_Symbol == '-')
 270:	8d 32       	cpi	r24, 0x2D	; 45
 272:	09 f0       	breq	.+2      	; 0x276 <main+0x16e>
 274:	91 cf       	rjmp	.-222    	; 0x198 <main+0x90>
			{
				Global_u8_SystemState = 6;
 276:	20 92 60 00 	sts	0x0060, r2	; 0x800060 <__DATA_REGION_ORIGIN__>
 27a:	8e cf       	rjmp	.-228    	; 0x198 <main+0x90>
 27c:	8e 01       	movw	r16, r28
 27e:	0f 5f       	subi	r16, 0xFF	; 255
 280:	1f 4f       	sbci	r17, 0xFF	; 255
			
			/* This case is the case of entering password to open the door. */
			case 3:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
 282:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
 286:	d8 01       	movw	r26, r16
 288:	8d 93       	st	X+, r24
 28a:	8d 01       	movw	r16, r26
 28c:	ef e9       	ldi	r30, 0x9F	; 159
 28e:	ff e0       	ldi	r31, 0x0F	; 15
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x188>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x18e>
 296:	00 00       	nop
			}
			break;
			
			/* This case is the case of entering password to open the door. */
			case 3:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 298:	ea 16       	cp	r14, r26
 29a:	fb 06       	cpc	r15, r27
 29c:	91 f7       	brne	.-28     	; 0x282 <main+0x17a>
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
				_delay_ms(1);
			}
			Local_u8_Result = A_Main_CheckPasswordEeprom(Local_u8_StrPasswordCheck, Local_u8_StrPassword); // comparing entered password to the saved password.
 29e:	be 01       	movw	r22, r28
 2a0:	6f 5f       	subi	r22, 0xFF	; 255
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	c7 01       	movw	r24, r14
 2a6:	0e 94 5f 00 	call	0xbe	; 0xbe <A_Main_CheckPasswordEeprom>
 2aa:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_Result);
 2ac:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
			/* Action will be taken based on the Result variable */
			
			if(Local_u8_Result == ERROR)
 2b0:	11 11       	cpse	r17, r1
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <main+0x1c2>
			{
				Local_u8_TrialCounter++;
 2b4:	93 94       	inc	r9
				H_Leds_On(Local_u8_TrialCounter); // lights a red led on each wrong trial.
 2b6:	89 2d       	mov	r24, r9
 2b8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <H_Leds_On>
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
 2bc:	f3 e0       	ldi	r31, 0x03	; 3
 2be:	9f 12       	cpse	r9, r31
 2c0:	af c0       	rjmp	.+350    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 2c2:	30 92 60 00 	sts	0x0060, r3	; 0x800060 <__DATA_REGION_ORIGIN__>
				Local_u8_TrialCounter++;
				H_Leds_On(Local_u8_TrialCounter); // lights a red led on each wrong trial.
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
 2c6:	91 2c       	mov	r9, r1
 2c8:	ab c0       	rjmp	.+342    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 2ca:	8f e9       	ldi	r24, 0x9F	; 159
 2cc:	9f e0       	ldi	r25, 0x0F	; 15
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x1c6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x1cc>
 2d4:	00 00       	nop
					Global_u8_SystemState = 5;
				}
			}
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
 2d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2da:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
			
			if(Local_u8_Result == SUCCESS)
 2de:	11 30       	cpi	r17, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0x1dc>
 2e2:	5a cf       	rjmp	.-332    	; 0x198 <main+0x90>
			{
				Local_u8_TrialCounter = 0;
				H_Leds_Off(LED0); H_Leds_Off(LED1); H_Leds_Off(LED2); // turning off all LEDs. 
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
				M_Uart_SendByte(C_READY);
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
				Global_u32_MS = 15000; // seconds needed for timer 0 in ms.
 2fc:	88 e9       	ldi	r24, 0x98	; 152
 2fe:	9a e3       	ldi	r25, 0x3A	; 58
 300:	a0 e0       	ldi	r26, 0x00	; 0
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Global_u32_MS>
 308:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Global_u32_MS+0x1>
 30c:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <Global_u32_MS+0x2>
 310:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <Global_u32_MS+0x3>
				
				/* Timer0 initialization and setting the required time for motor to open the door */
				
				M_Timer0_Init();
 314:	0e 94 de 03 	call	0x7bc	; 0x7bc <M_Timer0_Init>
				M_Timer0_SetCallBack(A_Timer0_Execution);
 318:	8e e3       	ldi	r24, 0x3E	; 62
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <M_Timer0_SetCallBack>
				M_Timer0_SetTime(Global_u32_MS);
 320:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Global_u32_MS>
 324:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Global_u32_MS+0x1>
 328:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Global_u32_MS+0x2>
 32c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Global_u32_MS+0x3>
 330:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <M_Timer0_SetTime>
				M_Timer0_Start();
 334:	0e 94 40 04 	call	0x880	; 0x880 <M_Timer0_Start>
				H_Motor_CW();
 338:	0e 94 ba 02 	call	0x574	; 0x574 <H_Motor_CW>
				
				/* next while loop is to wait until the door has opened and timer0 callback function is executed. */
				while(Global_u8_SystemState != 2);
 33c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x234>
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
			
			if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 344:	91 2c       	mov	r9, r1
 346:	28 cf       	rjmp	.-432    	; 0x198 <main+0x90>
 348:	8e 01       	movw	r16, r28
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
			
			/* This case is for doing the password reset */
			case 4:
			for(int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
 34e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <M_Uart_ReceiveByte>
 352:	d8 01       	movw	r26, r16
 354:	8d 93       	st	X+, r24
 356:	8d 01       	movw	r16, r26
 358:	ef e9       	ldi	r30, 0x9F	; 159
 35a:	ff e0       	ldi	r31, 0x0F	; 15
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <main+0x254>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x25a>
 362:	00 00       	nop
			break;
			
			
			/* This case is for doing the password reset */
			case 4:
			for(int i = 0; i<PASSWORD_SIZE; i++)
 364:	ae 15       	cp	r26, r14
 366:	bf 05       	cpc	r27, r15
 368:	91 f7       	brne	.-28     	; 0x34e <main+0x246>
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
				_delay_ms(1);
			}
			Local_u8_Result = A_Main_CheckPasswordEeprom(Local_u8_StrPasswordCheck, Local_u8_StrPassword);
 36a:	be 01       	movw	r22, r28
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	c7 01       	movw	r24, r14
 372:	0e 94 5f 00 	call	0xbe	; 0xbe <A_Main_CheckPasswordEeprom>
 376:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_Result);
 378:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
			
			/* Action will be taken based on the Result variable */
			if(Local_u8_Result == ERROR)
 37c:	11 11       	cpse	r17, r1
 37e:	15 c0       	rjmp	.+42     	; 0x3aa <main+0x2a2>
			{
				Local_u8_TrialCounter++;
 380:	93 94       	inc	r9
				H_Leds_On(Local_u8_TrialCounter);
 382:	89 2d       	mov	r24, r9
 384:	0e 94 7f 02 	call	0x4fe	; 0x4fe <H_Leds_On>
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
 388:	f3 e0       	ldi	r31, 0x03	; 3
 38a:	9f 12       	cpse	r9, r31
 38c:	03 c0       	rjmp	.+6      	; 0x394 <main+0x28c>
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 38e:	30 92 60 00 	sts	0x0060, r3	; 0x800060 <__DATA_REGION_ORIGIN__>
				Local_u8_TrialCounter++;
				H_Leds_On(Local_u8_TrialCounter);
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
 392:	91 2c       	mov	r9, r1
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <main+0x290>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x296>
 39e:	00 00       	nop
					Global_u8_SystemState = 5;
				}
				_delay_ms(1);
				M_Uart_SendByte(Global_u8_SystemState);
 3a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a4:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
 3a8:	f7 ce       	rjmp	.-530    	; 0x198 <main+0x90>
			}
			
			else if(Local_u8_Result == SUCCESS)
 3aa:	11 30       	cpi	r17, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x2a8>
 3ae:	f4 ce       	rjmp	.-536    	; 0x198 <main+0x90>
			{
				Local_u8_TrialCounter = 0;
				H_Leds_Off(LED0); H_Leds_Off(LED1); H_Leds_Off(LED2);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	0e 94 94 02 	call	0x528	; 0x528 <H_Leds_Off>
				Global_u8_SystemState = 0;
 3c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c6:	af e9       	ldi	r26, 0x9F	; 159
 3c8:	bf e0       	ldi	r27, 0x0F	; 15
 3ca:	11 97       	sbiw	r26, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x2c2>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x2c8>
 3d0:	00 00       	nop
				_delay_ms(1);
				M_Uart_SendByte(Global_u8_SystemState);
 3d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d6:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
				M_Uart_SendByte(Global_u8_SystemState);
			}
			
			else if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 3da:	91 2c       	mov	r9, r1
 3dc:	dd ce       	rjmp	.-582    	; 0x198 <main+0x90>
			break;
			
			
			/* This case is for when the user used the maximum amount of trials. */
			case 5:
			Global_u32_MS = 60000; // time for timer0 in ms.
 3de:	40 92 61 00 	sts	0x0061, r4	; 0x800061 <Global_u32_MS>
 3e2:	50 92 62 00 	sts	0x0062, r5	; 0x800062 <Global_u32_MS+0x1>
 3e6:	60 92 63 00 	sts	0x0063, r6	; 0x800063 <Global_u32_MS+0x2>
 3ea:	70 92 64 00 	sts	0x0064, r7	; 0x800064 <Global_u32_MS+0x3>
			M_Timer0_Init();
 3ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <M_Timer0_Init>
			M_Timer0_SetCallBack(A_Timer0_Execution);
 3f2:	8e e3       	ldi	r24, 0x3E	; 62
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <M_Timer0_SetCallBack>
			M_Timer0_SetTime(Global_u32_MS);
 3fa:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Global_u32_MS>
 3fe:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Global_u32_MS+0x1>
 402:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Global_u32_MS+0x2>
 406:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Global_u32_MS+0x3>
 40a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <M_Timer0_SetTime>
			H_Buzzer_On();
 40e:	0e 94 20 02 	call	0x440	; 0x440 <H_Buzzer_On>
			M_Timer0_Start();
 412:	0e 94 40 04 	call	0x880	; 0x880 <M_Timer0_Start>
			
			while(Global_u8_SystemState != 2); //to block waiting for timer0 ISR.
 416:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	bc ce       	rjmp	.-648    	; 0x198 <main+0x90>
 420:	ef e9       	ldi	r30, 0x9F	; 159
 422:	ff e0       	ldi	r31, 0x0F	; 15
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
				}
			}
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
 42c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 430:	0e 94 cf 04 	call	0x99e	; 0x99e <M_Uart_SendByte>
 434:	b1 ce       	rjmp	.-670    	; 0x198 <main+0x90>

00000436 <H_Buzzer_Init>:
 */ 
#include "Buzzer.h"

void H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZER_PIN,OUTPUT);
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	8d e0       	ldi	r24, 0x0D	; 13
 43a:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
 43e:	08 95       	ret

00000440 <H_Buzzer_On>:
}
void H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	8d e0       	ldi	r24, 0x0D	; 13
 444:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 448:	08 95       	ret

0000044a <H_Buzzer_Off>:
}
void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZER_PIN,LOW);
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 452:	08 95       	ret

00000454 <H_Eeprom_Init>:
#include "ExternalEeprom.h"
#include "Leds.h"

void H_Eeprom_Init(void)
{
	M_Twi_Init();
 454:	0e 94 a8 04 	call	0x950	; 0x950 <M_Twi_Init>
 458:	08 95       	ret

0000045a <H_Eeprom_Write>:
	//_delay_ms(1000);
}
void H_Eeprom_Write(u8 Local_u8_Data, u16 Local_u16_ByteAddress)
{
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	18 2f       	mov	r17, r24
 462:	eb 01       	movw	r28, r22
	M_Twi_StartCondition();
 464:	0e 94 ae 04 	call	0x95c	; 0x95c <M_Twi_StartCondition>
	M_Twi_SendByte((u8)(0xA0 | ((Local_u16_ByteAddress & 0x0700)>>7)));
 468:	ce 01       	movw	r24, r28
 46a:	88 27       	eor	r24, r24
 46c:	97 70       	andi	r25, 0x07	; 7
 46e:	88 0f       	add	r24, r24
 470:	89 2f       	mov	r24, r25
 472:	88 1f       	adc	r24, r24
 474:	99 0b       	sbc	r25, r25
 476:	91 95       	neg	r25
 478:	80 6a       	ori	r24, 0xA0	; 160
 47a:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	M_Twi_SendByte((u8)Local_u16_ByteAddress);
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	M_Twi_SendByte(Local_u8_Data);
 484:	81 2f       	mov	r24, r17
 486:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	M_Twi_StopCondition();
 48a:	0e 94 c2 04 	call	0x984	; 0x984 <M_Twi_StopCondition>
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	08 95       	ret

00000496 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u16 Local_u16_ByteAddress)
{
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	8c 01       	movw	r16, r24
	u8 Local_u8_Data = 0;
	M_Twi_StartCondition();
 4a0:	0e 94 ae 04 	call	0x95c	; 0x95c <M_Twi_StartCondition>
	M_Twi_SendByte((u8)((0xA0) | ((Local_u16_ByteAddress & 0x0700)>>7)));
 4a4:	e8 01       	movw	r28, r16
 4a6:	cc 27       	eor	r28, r28
 4a8:	d7 70       	andi	r29, 0x07	; 7
 4aa:	cc 0f       	add	r28, r28
 4ac:	cd 2f       	mov	r28, r29
 4ae:	cc 1f       	adc	r28, r28
 4b0:	dd 0b       	sbc	r29, r29
 4b2:	d1 95       	neg	r29
 4b4:	8c 2f       	mov	r24, r28
 4b6:	80 6a       	ori	r24, 0xA0	; 160
 4b8:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	M_Twi_SendByte((u8)Local_u16_ByteAddress);
 4bc:	80 2f       	mov	r24, r16
 4be:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	M_Twi_StartCondition();
 4c2:	0e 94 ae 04 	call	0x95c	; 0x95c <M_Twi_StartCondition>
	M_Twi_SendByte((u8)((0xA0) | ((Local_u16_ByteAddress & 0x0700)>>7) | 1));
 4c6:	8c 2f       	mov	r24, r28
 4c8:	81 6a       	ori	r24, 0xA1	; 161
 4ca:	0e 94 b4 04 	call	0x968	; 0x968 <M_Twi_SendByte>
	Local_u8_Data = M_Twi_ReadByte();
 4ce:	0e 94 bb 04 	call	0x976	; 0x976 <M_Twi_ReadByte>
 4d2:	c8 2f       	mov	r28, r24
	M_Twi_StopCondition();
 4d4:	0e 94 c2 04 	call	0x984	; 0x984 <M_Twi_StopCondition>
	return Local_u8_Data;
 4d8:	8c 2f       	mov	r24, r28
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	8a e0       	ldi	r24, 0x0A	; 10
 4e8:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	8b e0       	ldi	r24, 0x0B	; 11
 4f0:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	8c e0       	ldi	r24, 0x0C	; 12
 4f8:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
 4fc:	08 95       	ret

000004fe <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	49 f0       	breq	.+18     	; 0x514 <H_Leds_On+0x16>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	61 f0       	breq	.+24     	; 0x51e <H_Leds_On+0x20>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	71 f4       	brne	.+28     	; 0x526 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	8a e0       	ldi	r24, 0x0A	; 10
 50e:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 512:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8b e0       	ldi	r24, 0x0B	; 11
 518:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 51c:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 526:	08 95       	ret

00000528 <H_Leds_Off>:
		default:                                   break;
	}
}
void H_Leds_Off(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	49 f0       	breq	.+18     	; 0x53e <H_Leds_Off+0x16>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	61 f0       	breq	.+24     	; 0x548 <H_Leds_Off+0x20>
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	71 f4       	brne	.+28     	; 0x550 <H_Leds_Off+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,LOW);  break;
 534:	62 e0       	ldi	r22, 0x02	; 2
 536:	8a e0       	ldi	r24, 0x0A	; 10
 538:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 53c:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,LOW);  break;
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	8b e0       	ldi	r24, 0x0B	; 11
 542:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 546:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,LOW);  break;
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 550:	08 95       	ret

00000552 <H_Motor_Init>:
	
}
void H_Motor_CCW(void)
{
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
	M_Dio_PinWrite(MOTOR_PIN2,LOW);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	81 e2       	ldi	r24, 0x21	; 33
 556:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	81 e2       	ldi	r24, 0x21	; 33
 55e:	0e 94 cc 02 	call	0x598	; 0x598 <M_Dio_PinMode>
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	81 e2       	ldi	r24, 0x21	; 33
 566:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	82 e2       	ldi	r24, 0x22	; 34
 56e:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 572:	08 95       	ret

00000574 <H_Motor_CW>:
 574:	62 e0       	ldi	r22, 0x02	; 2
 576:	81 e2       	ldi	r24, 0x21	; 33
 578:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	82 e2       	ldi	r24, 0x22	; 34
 580:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 584:	08 95       	ret

00000586 <H_Motor_Stop>:
}
void H_Motor_Stop(void)
{
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	81 e2       	ldi	r24, 0x21	; 33
 58a:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	81 e2       	ldi	r24, 0x21	; 33
 592:	0e 94 55 03 	call	0x6aa	; 0x6aa <M_Dio_PinWrite>
 596:	08 95       	ret

00000598 <M_Dio_PinMode>:
 */ 

#include "Dio.h"
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 598:	9d ec       	ldi	r25, 0xCD	; 205
 59a:	89 9f       	mul	r24, r25
 59c:	91 2d       	mov	r25, r1
 59e:	11 24       	eor	r1, r1
 5a0:	29 2f       	mov	r18, r25
 5a2:	26 95       	lsr	r18
 5a4:	26 95       	lsr	r18
 5a6:	26 95       	lsr	r18
 5a8:	22 0f       	add	r18, r18
 5aa:	32 2f       	mov	r19, r18
 5ac:	33 0f       	add	r19, r19
 5ae:	33 0f       	add	r19, r19
 5b0:	23 0f       	add	r18, r19
 5b2:	82 1b       	sub	r24, r18
 5b4:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 5b6:	96 95       	lsr	r25
 5b8:	96 95       	lsr	r25
 5ba:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 5bc:	61 30       	cpi	r22, 0x01	; 1
 5be:	19 f0       	breq	.+6      	; 0x5c6 <M_Dio_PinMode+0x2e>
 5c0:	62 30       	cpi	r22, 0x02	; 2
 5c2:	c1 f1       	breq	.+112    	; 0x634 <M_Dio_PinMode+0x9c>
 5c4:	08 95       	ret
	{
		case OUTPUT:
		switch(Local_u8_Port)
 5c6:	92 30       	cpi	r25, 0x02	; 2
 5c8:	a1 f0       	breq	.+40     	; 0x5f2 <M_Dio_PinMode+0x5a>
 5ca:	18 f4       	brcc	.+6      	; 0x5d2 <M_Dio_PinMode+0x3a>
 5cc:	91 30       	cpi	r25, 0x01	; 1
 5ce:	31 f0       	breq	.+12     	; 0x5dc <M_Dio_PinMode+0x44>
 5d0:	08 95       	ret
 5d2:	93 30       	cpi	r25, 0x03	; 3
 5d4:	c9 f0       	breq	.+50     	; 0x608 <M_Dio_PinMode+0x70>
 5d6:	94 30       	cpi	r25, 0x04	; 4
 5d8:	11 f1       	breq	.+68     	; 0x61e <M_Dio_PinMode+0x86>
 5da:	08 95       	ret
		{
			case 1: SetBit(DDRA,Local_u8_Pin); break;
 5dc:	3a b3       	in	r19, 0x1a	; 26
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <M_Dio_PinMode+0x50>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	2a 95       	dec	r18
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <M_Dio_PinMode+0x4c>
 5ec:	83 2b       	or	r24, r19
 5ee:	8a bb       	out	0x1a, r24	; 26
 5f0:	08 95       	ret
			case 2: SetBit(DDRB,Local_u8_Pin); break;
 5f2:	37 b3       	in	r19, 0x17	; 23
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <M_Dio_PinMode+0x66>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	2a 95       	dec	r18
 600:	e2 f7       	brpl	.-8      	; 0x5fa <M_Dio_PinMode+0x62>
 602:	83 2b       	or	r24, r19
 604:	87 bb       	out	0x17, r24	; 23
 606:	08 95       	ret
			case 3: SetBit(DDRC,Local_u8_Pin); break;
 608:	34 b3       	in	r19, 0x14	; 20
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <M_Dio_PinMode+0x7c>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	2a 95       	dec	r18
 616:	e2 f7       	brpl	.-8      	; 0x610 <M_Dio_PinMode+0x78>
 618:	83 2b       	or	r24, r19
 61a:	84 bb       	out	0x14, r24	; 20
 61c:	08 95       	ret
			case 4: SetBit(DDRD,Local_u8_Pin); break;
 61e:	31 b3       	in	r19, 0x11	; 17
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <M_Dio_PinMode+0x92>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	2a 95       	dec	r18
 62c:	e2 f7       	brpl	.-8      	; 0x626 <M_Dio_PinMode+0x8e>
 62e:	83 2b       	or	r24, r19
 630:	81 bb       	out	0x11, r24	; 17
 632:	08 95       	ret
			default:                           break;
		}break;
		case INPUT:
		switch(Local_u8_Port)
 634:	92 30       	cpi	r25, 0x02	; 2
 636:	a9 f0       	breq	.+42     	; 0x662 <M_Dio_PinMode+0xca>
 638:	18 f4       	brcc	.+6      	; 0x640 <M_Dio_PinMode+0xa8>
 63a:	91 30       	cpi	r25, 0x01	; 1
 63c:	31 f0       	breq	.+12     	; 0x64a <M_Dio_PinMode+0xb2>
 63e:	08 95       	ret
 640:	93 30       	cpi	r25, 0x03	; 3
 642:	d9 f0       	breq	.+54     	; 0x67a <M_Dio_PinMode+0xe2>
 644:	94 30       	cpi	r25, 0x04	; 4
 646:	29 f1       	breq	.+74     	; 0x692 <M_Dio_PinMode+0xfa>
 648:	08 95       	ret
		{
			case 1: ClrBit(DDRA,Local_u8_Pin); break;
 64a:	3a b3       	in	r19, 0x1a	; 26
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <M_Dio_PinMode+0xbe>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	2a 95       	dec	r18
 658:	e2 f7       	brpl	.-8      	; 0x652 <M_Dio_PinMode+0xba>
 65a:	80 95       	com	r24
 65c:	83 23       	and	r24, r19
 65e:	8a bb       	out	0x1a, r24	; 26
 660:	08 95       	ret
			case 2: ClrBit(DDRB,Local_u8_Pin); break;
 662:	37 b3       	in	r19, 0x17	; 23
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <M_Dio_PinMode+0xd6>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <M_Dio_PinMode+0xd2>
 672:	80 95       	com	r24
 674:	83 23       	and	r24, r19
 676:	87 bb       	out	0x17, r24	; 23
 678:	08 95       	ret
			case 3: ClrBit(DDRC,Local_u8_Pin); break;
 67a:	34 b3       	in	r19, 0x14	; 20
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <M_Dio_PinMode+0xee>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <M_Dio_PinMode+0xea>
 68a:	80 95       	com	r24
 68c:	83 23       	and	r24, r19
 68e:	84 bb       	out	0x14, r24	; 20
 690:	08 95       	ret
			case 4: ClrBit(DDRD,Local_u8_Pin); break;
 692:	31 b3       	in	r19, 0x11	; 17
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <M_Dio_PinMode+0x106>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	2a 95       	dec	r18
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <M_Dio_PinMode+0x102>
 6a2:	80 95       	com	r24
 6a4:	83 23       	and	r24, r19
 6a6:	81 bb       	out	0x11, r24	; 17
 6a8:	08 95       	ret

000006aa <M_Dio_PinWrite>:
default: break;
	}
}
void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 6aa:	9d ec       	ldi	r25, 0xCD	; 205
 6ac:	89 9f       	mul	r24, r25
 6ae:	91 2d       	mov	r25, r1
 6b0:	11 24       	eor	r1, r1
 6b2:	29 2f       	mov	r18, r25
 6b4:	26 95       	lsr	r18
 6b6:	26 95       	lsr	r18
 6b8:	26 95       	lsr	r18
 6ba:	22 0f       	add	r18, r18
 6bc:	32 2f       	mov	r19, r18
 6be:	33 0f       	add	r19, r19
 6c0:	33 0f       	add	r19, r19
 6c2:	23 0f       	add	r18, r19
 6c4:	82 1b       	sub	r24, r18
 6c6:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 6c8:	96 95       	lsr	r25
 6ca:	96 95       	lsr	r25
 6cc:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 6ce:	61 30       	cpi	r22, 0x01	; 1
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <M_Dio_PinWrite+0x2e>
 6d2:	62 30       	cpi	r22, 0x02	; 2
 6d4:	c1 f1       	breq	.+112    	; 0x746 <M_Dio_PinWrite+0x9c>
 6d6:	08 95       	ret
	{
		case HIGH:
		switch(Local_u8_Port)
 6d8:	92 30       	cpi	r25, 0x02	; 2
 6da:	a1 f0       	breq	.+40     	; 0x704 <M_Dio_PinWrite+0x5a>
 6dc:	18 f4       	brcc	.+6      	; 0x6e4 <M_Dio_PinWrite+0x3a>
 6de:	91 30       	cpi	r25, 0x01	; 1
 6e0:	31 f0       	breq	.+12     	; 0x6ee <M_Dio_PinWrite+0x44>
 6e2:	08 95       	ret
 6e4:	93 30       	cpi	r25, 0x03	; 3
 6e6:	c9 f0       	breq	.+50     	; 0x71a <M_Dio_PinWrite+0x70>
 6e8:	94 30       	cpi	r25, 0x04	; 4
 6ea:	11 f1       	breq	.+68     	; 0x730 <M_Dio_PinWrite+0x86>
 6ec:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 6ee:	3b b3       	in	r19, 0x1b	; 27
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <M_Dio_PinWrite+0x50>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	2a 95       	dec	r18
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <M_Dio_PinWrite+0x4c>
 6fe:	83 2b       	or	r24, r19
 700:	8b bb       	out	0x1b, r24	; 27
 702:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 704:	38 b3       	in	r19, 0x18	; 24
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <M_Dio_PinWrite+0x66>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	2a 95       	dec	r18
 712:	e2 f7       	brpl	.-8      	; 0x70c <M_Dio_PinWrite+0x62>
 714:	83 2b       	or	r24, r19
 716:	88 bb       	out	0x18, r24	; 24
 718:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 71a:	35 b3       	in	r19, 0x15	; 21
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <M_Dio_PinWrite+0x7c>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	2a 95       	dec	r18
 728:	e2 f7       	brpl	.-8      	; 0x722 <M_Dio_PinWrite+0x78>
 72a:	83 2b       	or	r24, r19
 72c:	85 bb       	out	0x15, r24	; 21
 72e:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 730:	32 b3       	in	r19, 0x12	; 18
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <M_Dio_PinWrite+0x92>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	2a 95       	dec	r18
 73e:	e2 f7       	brpl	.-8      	; 0x738 <M_Dio_PinWrite+0x8e>
 740:	83 2b       	or	r24, r19
 742:	82 bb       	out	0x12, r24	; 18
 744:	08 95       	ret
			default:                           break;
		}break;
		case LOW:
		switch(Local_u8_Port)
 746:	92 30       	cpi	r25, 0x02	; 2
 748:	a9 f0       	breq	.+42     	; 0x774 <M_Dio_PinWrite+0xca>
 74a:	18 f4       	brcc	.+6      	; 0x752 <M_Dio_PinWrite+0xa8>
 74c:	91 30       	cpi	r25, 0x01	; 1
 74e:	31 f0       	breq	.+12     	; 0x75c <M_Dio_PinWrite+0xb2>
 750:	08 95       	ret
 752:	93 30       	cpi	r25, 0x03	; 3
 754:	d9 f0       	breq	.+54     	; 0x78c <M_Dio_PinWrite+0xe2>
 756:	94 30       	cpi	r25, 0x04	; 4
 758:	29 f1       	breq	.+74     	; 0x7a4 <M_Dio_PinWrite+0xfa>
 75a:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 75c:	3b b3       	in	r19, 0x1b	; 27
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <M_Dio_PinWrite+0xbe>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	2a 95       	dec	r18
 76a:	e2 f7       	brpl	.-8      	; 0x764 <M_Dio_PinWrite+0xba>
 76c:	80 95       	com	r24
 76e:	83 23       	and	r24, r19
 770:	8b bb       	out	0x1b, r24	; 27
 772:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 774:	38 b3       	in	r19, 0x18	; 24
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <M_Dio_PinWrite+0xd6>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	2a 95       	dec	r18
 782:	e2 f7       	brpl	.-8      	; 0x77c <M_Dio_PinWrite+0xd2>
 784:	80 95       	com	r24
 786:	83 23       	and	r24, r19
 788:	88 bb       	out	0x18, r24	; 24
 78a:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 78c:	35 b3       	in	r19, 0x15	; 21
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <M_Dio_PinWrite+0xee>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	2a 95       	dec	r18
 79a:	e2 f7       	brpl	.-8      	; 0x794 <M_Dio_PinWrite+0xea>
 79c:	80 95       	com	r24
 79e:	83 23       	and	r24, r19
 7a0:	85 bb       	out	0x15, r24	; 21
 7a2:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 7a4:	32 b3       	in	r19, 0x12	; 18
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <M_Dio_PinWrite+0x106>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	2a 95       	dec	r18
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <M_Dio_PinWrite+0x102>
 7b4:	80 95       	com	r24
 7b6:	83 23       	and	r24, r19
 7b8:	82 bb       	out	0x12, r24	; 18
 7ba:	08 95       	ret

000007bc <M_Timer0_Init>:
{
	M_Timer0_Start();
}
void M_Timer0_Pwm0Stop(void)
{
	M_Timer0_Stop();
 7bc:	83 b7       	in	r24, 0x33	; 51
 7be:	88 60       	ori	r24, 0x08	; 8
 7c0:	83 bf       	out	0x33, r24	; 51
 7c2:	83 b7       	in	r24, 0x33	; 51
 7c4:	8f 7b       	andi	r24, 0xBF	; 191
 7c6:	83 bf       	out	0x33, r24	; 51
 7c8:	89 b7       	in	r24, 0x39	; 57
 7ca:	82 60       	ori	r24, 0x02	; 2
 7cc:	89 bf       	out	0x39, r24	; 57
 7ce:	8f b7       	in	r24, 0x3f	; 63
 7d0:	80 68       	ori	r24, 0x80	; 128
 7d2:	8f bf       	out	0x3f, r24	; 63
 7d4:	08 95       	ret

000007d6 <M_Timer0_SetTime>:
 7d6:	8f 92       	push	r8
 7d8:	9f 92       	push	r9
 7da:	af 92       	push	r10
 7dc:	bf 92       	push	r11
 7de:	cf 92       	push	r12
 7e0:	df 92       	push	r13
 7e2:	ef 92       	push	r14
 7e4:	ff 92       	push	r15
 7e6:	cf 93       	push	r28
 7e8:	9b 01       	movw	r18, r22
 7ea:	ac 01       	movw	r20, r24
 7ec:	a8 ee       	ldi	r26, 0xE8	; 232
 7ee:	b3 e0       	ldi	r27, 0x03	; 3
 7f0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__muluhisi3>
 7f4:	4b 01       	movw	r8, r22
 7f6:	5c 01       	movw	r10, r24
 7f8:	68 94       	set
 7fa:	15 f8       	bld	r1, 5
 7fc:	b6 94       	lsr	r11
 7fe:	a7 94       	ror	r10
 800:	97 94       	ror	r9
 802:	87 94       	ror	r8
 804:	16 94       	lsr	r1
 806:	d1 f7       	brne	.-12     	; 0x7fc <M_Timer0_SetTime+0x26>
 808:	c5 01       	movw	r24, r10
 80a:	b4 01       	movw	r22, r8
 80c:	2f ef       	ldi	r18, 0xFF	; 255
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__udivmodsi4>
 818:	67 2b       	or	r22, r23
 81a:	68 2b       	or	r22, r24
 81c:	69 2b       	or	r22, r25
 81e:	89 f4       	brne	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 820:	cf ef       	ldi	r28, 0xFF	; 255
 822:	c1 50       	subi	r28, 0x01	; 1
 824:	cc 2e       	mov	r12, r28
 826:	d1 2c       	mov	r13, r1
 828:	e1 2c       	mov	r14, r1
 82a:	f1 2c       	mov	r15, r1
 82c:	c5 01       	movw	r24, r10
 82e:	b4 01       	movw	r22, r8
 830:	a7 01       	movw	r20, r14
 832:	96 01       	movw	r18, r12
 834:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__udivmodsi4>
 838:	67 2b       	or	r22, r23
 83a:	68 2b       	or	r22, r24
 83c:	69 2b       	or	r22, r25
 83e:	89 f3       	breq	.-30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 840:	05 c0       	rjmp	.+10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 842:	c1 2c       	mov	r12, r1
 844:	d1 2c       	mov	r13, r1
 846:	76 01       	movw	r14, r12
 848:	ca 94       	dec	r12
 84a:	cf ef       	ldi	r28, 0xFF	; 255
 84c:	c5 01       	movw	r24, r10
 84e:	b4 01       	movw	r22, r8
 850:	a7 01       	movw	r20, r14
 852:	96 01       	movw	r18, r12
 854:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__udivmodsi4>
 858:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Timer0_NumberOfCompareMatch>
 85c:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Timer0_NumberOfCompareMatch+0x1>
 860:	40 93 6b 00 	sts	0x006B, r20	; 0x80006b <Timer0_NumberOfCompareMatch+0x2>
 864:	50 93 6c 00 	sts	0x006C, r21	; 0x80006c <Timer0_NumberOfCompareMatch+0x3>
 868:	c1 50       	subi	r28, 0x01	; 1
 86a:	cc bf       	out	0x3c, r28	; 60
 86c:	cf 91       	pop	r28
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	08 95       	ret

00000880 <M_Timer0_Start>:
 880:	83 b7       	in	r24, 0x33	; 51
 882:	81 60       	ori	r24, 0x01	; 1
 884:	83 bf       	out	0x33, r24	; 51
 886:	83 b7       	in	r24, 0x33	; 51
 888:	8d 7f       	andi	r24, 0xFD	; 253
 88a:	83 bf       	out	0x33, r24	; 51
 88c:	83 b7       	in	r24, 0x33	; 51
 88e:	84 60       	ori	r24, 0x04	; 4
 890:	83 bf       	out	0x33, r24	; 51
 892:	08 95       	ret

00000894 <M_Timer0_Stop>:
 894:	83 b7       	in	r24, 0x33	; 51
 896:	8e 7f       	andi	r24, 0xFE	; 254
 898:	83 bf       	out	0x33, r24	; 51
 89a:	83 b7       	in	r24, 0x33	; 51
 89c:	8d 7f       	andi	r24, 0xFD	; 253
 89e:	83 bf       	out	0x33, r24	; 51
 8a0:	83 b7       	in	r24, 0x33	; 51
 8a2:	8b 7f       	andi	r24, 0xFB	; 251
 8a4:	83 bf       	out	0x33, r24	; 51
 8a6:	08 95       	ret

000008a8 <M_Timer0_SetCallBack>:
}


void M_Timer0_SetCallBack(void (*Ptr)(void))
{
	CallBack = Ptr;
 8a8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <CallBack+0x1>
 8ac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <CallBack>
 8b0:	08 95       	ret

000008b2 <__vector_10>:
	}
	
}
#elif TIMER0_MODE == CTC_MODE
ISR(TIMER0_COMP_vect)
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	2f 93       	push	r18
 8be:	3f 93       	push	r19
 8c0:	4f 93       	push	r20
 8c2:	5f 93       	push	r21
 8c4:	6f 93       	push	r22
 8c6:	7f 93       	push	r23
 8c8:	8f 93       	push	r24
 8ca:	9f 93       	push	r25
 8cc:	af 93       	push	r26
 8ce:	bf 93       	push	r27
 8d0:	ef 93       	push	r30
 8d2:	ff 93       	push	r31
	static u32 Local_u32_Counter = 0;
	Local_u32_Counter++;
 8d4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Local_u32_Counter.1671>
 8d8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Local_u32_Counter.1671+0x1>
 8dc:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <Local_u32_Counter.1671+0x2>
 8e0:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <Local_u32_Counter.1671+0x3>
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	a1 1d       	adc	r26, r1
 8e8:	b1 1d       	adc	r27, r1
 8ea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Local_u32_Counter.1671>
 8ee:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Local_u32_Counter.1671+0x1>
 8f2:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <Local_u32_Counter.1671+0x2>
 8f6:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <Local_u32_Counter.1671+0x3>
	if(Local_u32_Counter == Timer0_NumberOfCompareMatch)
 8fa:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <Timer0_NumberOfCompareMatch>
 8fe:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <Timer0_NumberOfCompareMatch+0x1>
 902:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Timer0_NumberOfCompareMatch+0x2>
 906:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <Timer0_NumberOfCompareMatch+0x3>
 90a:	84 17       	cp	r24, r20
 90c:	95 07       	cpc	r25, r21
 90e:	a6 07       	cpc	r26, r22
 910:	b7 07       	cpc	r27, r23
 912:	69 f4       	brne	.+26     	; 0x92e <__vector_10+0x7c>
	{
		CallBack();
 914:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBack>
 918:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBack+0x1>
 91c:	09 95       	icall
		Local_u32_Counter = 0;
 91e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Local_u32_Counter.1671>
 922:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Local_u32_Counter.1671+0x1>
 926:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Local_u32_Counter.1671+0x2>
 92a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Local_u32_Counter.1671+0x3>
		
	}
	
}
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	7f 91       	pop	r23
 93c:	6f 91       	pop	r22
 93e:	5f 91       	pop	r21
 940:	4f 91       	pop	r20
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <M_Twi_Init>:
{
	SetBit(TWCR,5);
	SetBit(TWCR,7);                //to clear the flag
	while ((GetBit(TWCR,7)) == 0);
	while ((TWSR & 0xF8) != REP_START_ACK);
}
 950:	8c e0       	ldi	r24, 0x0C	; 12
 952:	80 b9       	out	0x00, r24	; 0
 954:	86 b7       	in	r24, 0x36	; 54
 956:	84 60       	ori	r24, 0x04	; 4
 958:	86 bf       	out	0x36, r24	; 54
 95a:	08 95       	ret

0000095c <M_Twi_StartCondition>:
 95c:	84 ea       	ldi	r24, 0xA4	; 164
 95e:	86 bf       	out	0x36, r24	; 54
 960:	06 b6       	in	r0, 0x36	; 54
 962:	07 fe       	sbrs	r0, 7
 964:	fd cf       	rjmp	.-6      	; 0x960 <M_Twi_StartCondition+0x4>
 966:	08 95       	ret

00000968 <M_Twi_SendByte>:
 968:	83 b9       	out	0x03, r24	; 3
 96a:	84 e8       	ldi	r24, 0x84	; 132
 96c:	86 bf       	out	0x36, r24	; 54
 96e:	06 b6       	in	r0, 0x36	; 54
 970:	07 fe       	sbrs	r0, 7
 972:	fd cf       	rjmp	.-6      	; 0x96e <M_Twi_SendByte+0x6>
 974:	08 95       	ret

00000976 <M_Twi_ReadByte>:
 976:	84 e8       	ldi	r24, 0x84	; 132
 978:	86 bf       	out	0x36, r24	; 54
 97a:	06 b6       	in	r0, 0x36	; 54
 97c:	07 fe       	sbrs	r0, 7
 97e:	fd cf       	rjmp	.-6      	; 0x97a <M_Twi_ReadByte+0x4>
 980:	83 b1       	in	r24, 0x03	; 3
 982:	08 95       	ret

00000984 <M_Twi_StopCondition>:
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 984:	84 e9       	ldi	r24, 0x94	; 148
 986:	86 bf       	out	0x36, r24	; 54
 988:	08 95       	ret

0000098a <M_Uart_Init>:

#include "Uart.h"

void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 98a:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 98c:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 98e:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 990:	87 e6       	ldi	r24, 0x67	; 103
 992:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 994:	86 e8       	ldi	r24, 0x86	; 134
 996:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 998:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 99a:	53 9a       	sbi	0x0a, 3	; 10
 99c:	08 95       	ret

0000099e <M_Uart_SendByte>:
}

void M_Uart_SendByte(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 99e:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 9a0:	5e 9b       	sbis	0x0b, 6	; 11
 9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <M_Uart_SendByte+0x2>
}
 9a4:	08 95       	ret

000009a6 <M_Uart_ReceiveByte>:

u8   M_Uart_ReceiveByte(void)
{
	while((GetBit(UCSRA,7)) == 0);
 9a6:	5f 9b       	sbis	0x0b, 7	; 11
 9a8:	fe cf       	rjmp	.-4      	; 0x9a6 <M_Uart_ReceiveByte>
	return UDR;
 9aa:	8c b1       	in	r24, 0x0c	; 12
}
 9ac:	08 95       	ret

000009ae <__udivmodsi4>:
 9ae:	a1 e2       	ldi	r26, 0x21	; 33
 9b0:	1a 2e       	mov	r1, r26
 9b2:	aa 1b       	sub	r26, r26
 9b4:	bb 1b       	sub	r27, r27
 9b6:	fd 01       	movw	r30, r26
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__udivmodsi4_ep>

000009ba <__udivmodsi4_loop>:
 9ba:	aa 1f       	adc	r26, r26
 9bc:	bb 1f       	adc	r27, r27
 9be:	ee 1f       	adc	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	a2 17       	cp	r26, r18
 9c4:	b3 07       	cpc	r27, r19
 9c6:	e4 07       	cpc	r30, r20
 9c8:	f5 07       	cpc	r31, r21
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__udivmodsi4_ep>
 9cc:	a2 1b       	sub	r26, r18
 9ce:	b3 0b       	sbc	r27, r19
 9d0:	e4 0b       	sbc	r30, r20
 9d2:	f5 0b       	sbc	r31, r21

000009d4 <__udivmodsi4_ep>:
 9d4:	66 1f       	adc	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	1a 94       	dec	r1
 9de:	69 f7       	brne	.-38     	; 0x9ba <__udivmodsi4_loop>
 9e0:	60 95       	com	r22
 9e2:	70 95       	com	r23
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	9b 01       	movw	r18, r22
 9ea:	ac 01       	movw	r20, r24
 9ec:	bd 01       	movw	r22, r26
 9ee:	cf 01       	movw	r24, r30
 9f0:	08 95       	ret

000009f2 <__muluhisi3>:
 9f2:	0e 94 04 05 	call	0xa08	; 0xa08 <__umulhisi3>
 9f6:	a5 9f       	mul	r26, r21
 9f8:	90 0d       	add	r25, r0
 9fa:	b4 9f       	mul	r27, r20
 9fc:	90 0d       	add	r25, r0
 9fe:	a4 9f       	mul	r26, r20
 a00:	80 0d       	add	r24, r0
 a02:	91 1d       	adc	r25, r1
 a04:	11 24       	eor	r1, r1
 a06:	08 95       	ret

00000a08 <__umulhisi3>:
 a08:	a2 9f       	mul	r26, r18
 a0a:	b0 01       	movw	r22, r0
 a0c:	b3 9f       	mul	r27, r19
 a0e:	c0 01       	movw	r24, r0
 a10:	a3 9f       	mul	r26, r19
 a12:	70 0d       	add	r23, r0
 a14:	81 1d       	adc	r24, r1
 a16:	11 24       	eor	r1, r1
 a18:	91 1d       	adc	r25, r1
 a1a:	b2 9f       	mul	r27, r18
 a1c:	70 0d       	add	r23, r0
 a1e:	81 1d       	adc	r24, r1
 a20:	11 24       	eor	r1, r1
 a22:	91 1d       	adc	r25, r1
 a24:	08 95       	ret

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
