
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800064  00800064  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001156  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ba  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a4  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000335  00000000  00000000  0000361b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "System.h"


int main(void)
{
	A_System_Init();
  92:	0e 94 50 00 	call	0xa0	; 0xa0 <A_System_Init>
    while (1) 
    {  
		A_System_GetPassword();
  96:	0e 94 59 00 	call	0xb2	; 0xb2 <A_System_GetPassword>
		A_System_CheckPassword();
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <A_System_CheckPassword>
  9e:	fb cf       	rjmp	.-10     	; 0x96 <main+0x4>

000000a0 <A_System_Init>:
u16 Global_u16_Trials = 0;
u8  Global_u8_EnteredPassword[PASSWORD_SIZE];

void A_System_Init(void)
{
	H_ServoMotor_Init();
  a0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <H_ServoMotor_Init>
	M_Uart_Init();
  a4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <M_Uart_Init>
	H_Leds_Init();
  a8:	0e 94 c0 00 	call	0x180	; 0x180 <H_Leds_Init>
	H_Buzzer_Init();
  ac:	0e 94 b6 00 	call	0x16c	; 0x16c <H_Buzzer_Init>
  b0:	08 95       	ret

000000b2 <A_System_GetPassword>:
}
void A_System_GetPassword(void)
{
	u8 Local_u8_Msg = 0;
	Local_u8_Msg = M_Uart_Receive();
  b2:	0e 94 5f 02 	call	0x4be	; 0x4be <M_Uart_Receive>
	if(Local_u8_Msg != 0)
  b6:	88 23       	and	r24, r24
  b8:	71 f0       	breq	.+28     	; 0xd6 <A_System_GetPassword+0x24>
	{
		Global_u8_EnteredPassword[Global_u16_CharCounter] = Local_u8_Msg;
  ba:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <Global_u16_CharCounter>
  be:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <Global_u16_CharCounter+0x1>
  c2:	f9 01       	movw	r30, r18
  c4:	e6 59       	subi	r30, 0x96	; 150
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 83       	st	Z, r24
		Global_u16_CharCounter++;
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <Global_u16_CharCounter+0x1>
  d2:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <Global_u16_CharCounter>
  d6:	08 95       	ret

000000d8 <A_System_CheckPassword>:
	}
}
void A_System_CheckPassword(void)
{
	if (Global_u16_CharCounter == PASSWORD_SIZE)
  d8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Global_u16_CharCounter>
  dc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Global_u16_CharCounter+0x1>
  e0:	04 97       	sbiw	r24, 0x04	; 4
  e2:	09 f0       	breq	.+2      	; 0xe6 <A_System_CheckPassword+0xe>
  e4:	42 c0       	rjmp	.+132    	; 0x16a <A_System_CheckPassword+0x92>
  e6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Global_u16_Check>
  ea:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <Global_u16_Check+0x1>
  ee:	ea e6       	ldi	r30, 0x6A	; 106
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	4e e6       	ldi	r20, 0x6E	; 110
  f8:	50 e0       	ldi	r21, 0x00	; 0
	{
		for(int i = 0; i<PASSWORD_SIZE; i++)
		{
			if(Global_u8_EnteredPassword[i] == Global_u8_Password[i])
  fa:	91 91       	ld	r25, Z+
  fc:	8d 91       	ld	r24, X+
  fe:	98 13       	cpse	r25, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <A_System_CheckPassword+0x2e>
			{
				Global_u16_Check++;
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
}
void A_System_CheckPassword(void)
{
	if (Global_u16_CharCounter == PASSWORD_SIZE)
	{
		for(int i = 0; i<PASSWORD_SIZE; i++)
 106:	e4 17       	cp	r30, r20
 108:	f5 07       	cpc	r31, r21
 10a:	b9 f7       	brne	.-18     	; 0xfa <A_System_CheckPassword+0x22>
 10c:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <Global_u16_Check+0x1>
 110:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Global_u16_Check>
			if(Global_u8_EnteredPassword[i] == Global_u8_Password[i])
			{
				Global_u16_Check++;
			}
		}
		if(Global_u16_Check == PASSWORD_SIZE)
 114:	24 30       	cpi	r18, 0x04	; 4
 116:	31 05       	cpc	r19, r1
 118:	41 f4       	brne	.+16     	; 0x12a <A_System_CheckPassword+0x52>
		{
			M_Uart_Transmit('T');
 11a:	84 e5       	ldi	r24, 0x54	; 84
 11c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <M_Uart_Transmit>
			H_ServoMotor_SetAngle(5);
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <H_ServoMotor_SetAngle>
			H_ServoMotor_Start();
 126:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <H_ServoMotor_Start>
		}
		if(Global_u16_Check < PASSWORD_SIZE)
 12a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Global_u16_Check>
 12e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Global_u16_Check+0x1>
 132:	04 97       	sbiw	r24, 0x04	; 4
 134:	90 f4       	brcc	.+36     	; 0x15a <A_System_CheckPassword+0x82>
		{
			M_Uart_Transmit('F');
 136:	86 e4       	ldi	r24, 0x46	; 70
 138:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <M_Uart_Transmit>
			Global_u16_Trials++;
 13c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 140:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 14a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			Global_u16_CharCounter = 0;
 14e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Global_u16_CharCounter+0x1>
 152:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Global_u16_CharCounter>
			H_Leds_On(Global_u16_Trials);
 156:	0e 94 cd 00 	call	0x19a	; 0x19a <H_Leds_On>
		}
		if(Global_u16_Trials >= MAX_TRIALS)
 15a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 15e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 162:	03 97       	sbiw	r24, 0x03	; 3
 164:	10 f0       	brcs	.+4      	; 0x16a <A_System_CheckPassword+0x92>
		{
			H_Buzzer_On();
 166:	0e 94 bb 00 	call	0x176	; 0x176 <H_Buzzer_On>
 16a:	08 95       	ret

0000016c <H_Buzzer_Init>:
 */ 
#include "Buzzer.h"

void H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZER_PIN,OUTPUT);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	0e 94 ff 00 	call	0x1fe	; 0x1fe <M_Dio_PinMode>
 174:	08 95       	ret

00000176 <H_Buzzer_On>:
}
void H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	0e 94 88 01 	call	0x310	; 0x310 <M_Dio_PinWrite>
 17e:	08 95       	ret

00000180 <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	0e 94 ff 00 	call	0x1fe	; 0x1fe <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	8b e0       	ldi	r24, 0x0B	; 11
 18c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	0e 94 ff 00 	call	0x1fe	; 0x1fe <M_Dio_PinMode>
 198:	08 95       	ret

0000019a <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	49 f0       	breq	.+18     	; 0x1b0 <H_Leds_On+0x16>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	61 f0       	breq	.+24     	; 0x1ba <H_Leds_On+0x20>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	71 f4       	brne	.+28     	; 0x1c2 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	0e 94 88 01 	call	0x310	; 0x310 <M_Dio_PinWrite>
 1ae:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	8b e0       	ldi	r24, 0x0B	; 11
 1b4:	0e 94 88 01 	call	0x310	; 0x310 <M_Dio_PinWrite>
 1b8:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	0e 94 88 01 	call	0x310	; 0x310 <M_Dio_PinWrite>
 1c2:	08 95       	ret

000001c4 <H_ServoMotor_Init>:
 */ 

#include "Servo.h"
void H_ServoMotor_Init(void)
{
	M_Timer1_Pwm1Init();
 1c4:	0e 94 11 02 	call	0x422	; 0x422 <M_Timer1_Pwm1Init>
	M_Timer1_Pmw1SetFrequency(50);
 1c8:	62 e3       	ldi	r22, 0x32	; 50
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 25 02 	call	0x44a	; 0x44a <M_Timer1_Pmw1SetFrequency>
 1d4:	08 95       	ret

000001d6 <H_ServoMotor_SetAngle>:
}
void H_ServoMotor_SetAngle(u8 Local_u8_Angle)
{
	u8 Local_u8_DutyCycle = (((Local_u8_Angle*5)/180) + 5);
	M_Timer1_Pwm1DutyCycle(Local_u8_DutyCycle);
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9c 01       	movw	r18, r24
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	64 eb       	ldi	r22, 0xB4	; 180
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divmodhi4>
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	86 0f       	add	r24, r22
 1f2:	0e 94 30 02 	call	0x460	; 0x460 <M_Timer1_Pwm1DutyCycle>
 1f6:	08 95       	ret

000001f8 <H_ServoMotor_Start>:
}
void H_ServoMotor_Start(void)
{
	M_Timer1_Pwm1Start();
 1f8:	0e 94 47 02 	call	0x48e	; 0x48e <M_Timer1_Pwm1Start>
 1fc:	08 95       	ret

000001fe <M_Dio_PinMode>:
 */ 

#include "Dio.h"
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 1fe:	9d ec       	ldi	r25, 0xCD	; 205
 200:	89 9f       	mul	r24, r25
 202:	91 2d       	mov	r25, r1
 204:	11 24       	eor	r1, r1
 206:	29 2f       	mov	r18, r25
 208:	26 95       	lsr	r18
 20a:	26 95       	lsr	r18
 20c:	26 95       	lsr	r18
 20e:	22 0f       	add	r18, r18
 210:	32 2f       	mov	r19, r18
 212:	33 0f       	add	r19, r19
 214:	33 0f       	add	r19, r19
 216:	23 0f       	add	r18, r19
 218:	82 1b       	sub	r24, r18
 21a:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 222:	61 30       	cpi	r22, 0x01	; 1
 224:	19 f0       	breq	.+6      	; 0x22c <M_Dio_PinMode+0x2e>
 226:	62 30       	cpi	r22, 0x02	; 2
 228:	c1 f1       	breq	.+112    	; 0x29a <M_Dio_PinMode+0x9c>
 22a:	08 95       	ret
	{
		case OUTPUT:
		switch(Local_u8_Port)
 22c:	92 30       	cpi	r25, 0x02	; 2
 22e:	a1 f0       	breq	.+40     	; 0x258 <M_Dio_PinMode+0x5a>
 230:	18 f4       	brcc	.+6      	; 0x238 <M_Dio_PinMode+0x3a>
 232:	91 30       	cpi	r25, 0x01	; 1
 234:	31 f0       	breq	.+12     	; 0x242 <M_Dio_PinMode+0x44>
 236:	08 95       	ret
 238:	93 30       	cpi	r25, 0x03	; 3
 23a:	c9 f0       	breq	.+50     	; 0x26e <M_Dio_PinMode+0x70>
 23c:	94 30       	cpi	r25, 0x04	; 4
 23e:	11 f1       	breq	.+68     	; 0x284 <M_Dio_PinMode+0x86>
 240:	08 95       	ret
		{
			case 1: SetBit(DDRA,Local_u8_Pin); break;
 242:	3a b3       	in	r19, 0x1a	; 26
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <M_Dio_PinMode+0x50>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <M_Dio_PinMode+0x4c>
 252:	83 2b       	or	r24, r19
 254:	8a bb       	out	0x1a, r24	; 26
 256:	08 95       	ret
			case 2: SetBit(DDRB,Local_u8_Pin); break;
 258:	37 b3       	in	r19, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <M_Dio_PinMode+0x66>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <M_Dio_PinMode+0x62>
 268:	83 2b       	or	r24, r19
 26a:	87 bb       	out	0x17, r24	; 23
 26c:	08 95       	ret
			case 3: SetBit(DDRC,Local_u8_Pin); break;
 26e:	34 b3       	in	r19, 0x14	; 20
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <M_Dio_PinMode+0x7c>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <M_Dio_PinMode+0x78>
 27e:	83 2b       	or	r24, r19
 280:	84 bb       	out	0x14, r24	; 20
 282:	08 95       	ret
			case 4: SetBit(DDRD,Local_u8_Pin); break;
 284:	31 b3       	in	r19, 0x11	; 17
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <M_Dio_PinMode+0x92>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	2a 95       	dec	r18
 292:	e2 f7       	brpl	.-8      	; 0x28c <M_Dio_PinMode+0x8e>
 294:	83 2b       	or	r24, r19
 296:	81 bb       	out	0x11, r24	; 17
 298:	08 95       	ret
			default:                           break;
		}break;
		case INPUT:
		switch(Local_u8_Port)
 29a:	92 30       	cpi	r25, 0x02	; 2
 29c:	a9 f0       	breq	.+42     	; 0x2c8 <M_Dio_PinMode+0xca>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <M_Dio_PinMode+0xa8>
 2a0:	91 30       	cpi	r25, 0x01	; 1
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <M_Dio_PinMode+0xb2>
 2a4:	08 95       	ret
 2a6:	93 30       	cpi	r25, 0x03	; 3
 2a8:	d9 f0       	breq	.+54     	; 0x2e0 <M_Dio_PinMode+0xe2>
 2aa:	94 30       	cpi	r25, 0x04	; 4
 2ac:	29 f1       	breq	.+74     	; 0x2f8 <M_Dio_PinMode+0xfa>
 2ae:	08 95       	ret
		{
			case 1: ClrBit(DDRA,Local_u8_Pin); break;
 2b0:	3a b3       	in	r19, 0x1a	; 26
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <M_Dio_PinMode+0xbe>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	2a 95       	dec	r18
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <M_Dio_PinMode+0xba>
 2c0:	80 95       	com	r24
 2c2:	83 23       	and	r24, r19
 2c4:	8a bb       	out	0x1a, r24	; 26
 2c6:	08 95       	ret
			case 2: ClrBit(DDRB,Local_u8_Pin); break;
 2c8:	37 b3       	in	r19, 0x17	; 23
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <M_Dio_PinMode+0xd6>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	2a 95       	dec	r18
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <M_Dio_PinMode+0xd2>
 2d8:	80 95       	com	r24
 2da:	83 23       	and	r24, r19
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	08 95       	ret
			case 3: ClrBit(DDRC,Local_u8_Pin); break;
 2e0:	34 b3       	in	r19, 0x14	; 20
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <M_Dio_PinMode+0xee>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	2a 95       	dec	r18
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <M_Dio_PinMode+0xea>
 2f0:	80 95       	com	r24
 2f2:	83 23       	and	r24, r19
 2f4:	84 bb       	out	0x14, r24	; 20
 2f6:	08 95       	ret
			case 4: ClrBit(DDRD,Local_u8_Pin); break;
 2f8:	31 b3       	in	r19, 0x11	; 17
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <M_Dio_PinMode+0x106>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <M_Dio_PinMode+0x102>
 308:	80 95       	com	r24
 30a:	83 23       	and	r24, r19
 30c:	81 bb       	out	0x11, r24	; 17
 30e:	08 95       	ret

00000310 <M_Dio_PinWrite>:
default: break;
	}
}
void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 310:	9d ec       	ldi	r25, 0xCD	; 205
 312:	89 9f       	mul	r24, r25
 314:	91 2d       	mov	r25, r1
 316:	11 24       	eor	r1, r1
 318:	29 2f       	mov	r18, r25
 31a:	26 95       	lsr	r18
 31c:	26 95       	lsr	r18
 31e:	26 95       	lsr	r18
 320:	22 0f       	add	r18, r18
 322:	32 2f       	mov	r19, r18
 324:	33 0f       	add	r19, r19
 326:	33 0f       	add	r19, r19
 328:	23 0f       	add	r18, r19
 32a:	82 1b       	sub	r24, r18
 32c:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 32e:	96 95       	lsr	r25
 330:	96 95       	lsr	r25
 332:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 334:	61 30       	cpi	r22, 0x01	; 1
 336:	19 f0       	breq	.+6      	; 0x33e <M_Dio_PinWrite+0x2e>
 338:	62 30       	cpi	r22, 0x02	; 2
 33a:	c1 f1       	breq	.+112    	; 0x3ac <M_Dio_PinWrite+0x9c>
 33c:	08 95       	ret
	{
		case HIGH:
		switch(Local_u8_Port)
 33e:	92 30       	cpi	r25, 0x02	; 2
 340:	a1 f0       	breq	.+40     	; 0x36a <M_Dio_PinWrite+0x5a>
 342:	18 f4       	brcc	.+6      	; 0x34a <M_Dio_PinWrite+0x3a>
 344:	91 30       	cpi	r25, 0x01	; 1
 346:	31 f0       	breq	.+12     	; 0x354 <M_Dio_PinWrite+0x44>
 348:	08 95       	ret
 34a:	93 30       	cpi	r25, 0x03	; 3
 34c:	c9 f0       	breq	.+50     	; 0x380 <M_Dio_PinWrite+0x70>
 34e:	94 30       	cpi	r25, 0x04	; 4
 350:	11 f1       	breq	.+68     	; 0x396 <M_Dio_PinWrite+0x86>
 352:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 354:	3b b3       	in	r19, 0x1b	; 27
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <M_Dio_PinWrite+0x50>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	2a 95       	dec	r18
 362:	e2 f7       	brpl	.-8      	; 0x35c <M_Dio_PinWrite+0x4c>
 364:	83 2b       	or	r24, r19
 366:	8b bb       	out	0x1b, r24	; 27
 368:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 36a:	38 b3       	in	r19, 0x18	; 24
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <M_Dio_PinWrite+0x66>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <M_Dio_PinWrite+0x62>
 37a:	83 2b       	or	r24, r19
 37c:	88 bb       	out	0x18, r24	; 24
 37e:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 380:	35 b3       	in	r19, 0x15	; 21
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <M_Dio_PinWrite+0x7c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <M_Dio_PinWrite+0x78>
 390:	83 2b       	or	r24, r19
 392:	85 bb       	out	0x15, r24	; 21
 394:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 396:	32 b3       	in	r19, 0x12	; 18
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <M_Dio_PinWrite+0x92>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	2a 95       	dec	r18
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <M_Dio_PinWrite+0x8e>
 3a6:	83 2b       	or	r24, r19
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret
			default:                           break;
		}break;
		case LOW:
		switch(Local_u8_Port)
 3ac:	92 30       	cpi	r25, 0x02	; 2
 3ae:	a9 f0       	breq	.+42     	; 0x3da <M_Dio_PinWrite+0xca>
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <M_Dio_PinWrite+0xa8>
 3b2:	91 30       	cpi	r25, 0x01	; 1
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <M_Dio_PinWrite+0xb2>
 3b6:	08 95       	ret
 3b8:	93 30       	cpi	r25, 0x03	; 3
 3ba:	d9 f0       	breq	.+54     	; 0x3f2 <M_Dio_PinWrite+0xe2>
 3bc:	94 30       	cpi	r25, 0x04	; 4
 3be:	29 f1       	breq	.+74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3c0:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 3c2:	3b b3       	in	r19, 0x1b	; 27
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <M_Dio_PinWrite+0xbe>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	2a 95       	dec	r18
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <M_Dio_PinWrite+0xba>
 3d2:	80 95       	com	r24
 3d4:	83 23       	and	r24, r19
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 3da:	38 b3       	in	r19, 0x18	; 24
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <M_Dio_PinWrite+0xd6>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	2a 95       	dec	r18
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <M_Dio_PinWrite+0xd2>
 3ea:	80 95       	com	r24
 3ec:	83 23       	and	r24, r19
 3ee:	88 bb       	out	0x18, r24	; 24
 3f0:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 3f2:	35 b3       	in	r19, 0x15	; 21
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <M_Dio_PinWrite+0xee>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	2a 95       	dec	r18
 400:	e2 f7       	brpl	.-8      	; 0x3fa <M_Dio_PinWrite+0xea>
 402:	80 95       	com	r24
 404:	83 23       	and	r24, r19
 406:	85 bb       	out	0x15, r24	; 21
 408:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 40a:	32 b3       	in	r19, 0x12	; 18
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	2a 95       	dec	r18
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	83 23       	and	r24, r19
 41e:	82 bb       	out	0x12, r24	; 18
 420:	08 95       	ret

00000422 <M_Timer1_Pwm1Init>:
#include "Timer1.h"

void M_Timer1_Pwm1Init(void)
{
	//to make PD5 --> output
	SetBit(DDRD,5);
 422:	8d 9a       	sbi	0x11, 5	; 17
	//to select fast PWM mode with top ICR1 (MODE 14 in Data Sheet Table 47.)
	ClrBit(TCCR1A,0);
 424:	8f b5       	in	r24, 0x2f	; 47
 426:	8e 7f       	andi	r24, 0xFE	; 254
 428:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,1);
 42a:	8f b5       	in	r24, 0x2f	; 47
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1B,3);
 430:	8e b5       	in	r24, 0x2e	; 46
 432:	88 60       	ori	r24, 0x08	; 8
 434:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,4);
 436:	8e b5       	in	r24, 0x2e	; 46
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	8e bd       	out	0x2e, r24	; 46
	//to select non inverted mode and generate PWM at OC1A pin
	ClrBit(TCCR1A,6);
 43c:	8f b5       	in	r24, 0x2f	; 47
 43e:	8f 7b       	andi	r24, 0xBF	; 191
 440:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,7);
 442:	8f b5       	in	r24, 0x2f	; 47
 444:	80 68       	ori	r24, 0x80	; 128
 446:	8f bd       	out	0x2f, r24	; 47
 448:	08 95       	ret

0000044a <M_Timer1_Pmw1SetFrequency>:
}
void M_Timer1_Pmw1SetFrequency(u32 Local_u32_Frequency)
{
 44a:	9b 01       	movw	r18, r22
 44c:	ac 01       	movw	r20, r24
	ICR1 = (((F_OSC * 1000000) / TIMER1_PRESCALER) / Local_u32_Frequency);
 44e:	64 e2       	ldi	r22, 0x24	; 36
 450:	74 ef       	ldi	r23, 0xF4	; 244
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 77 02 	call	0x4ee	; 0x4ee <__udivmodsi4>
 45a:	37 bd       	out	0x27, r19	; 39
 45c:	26 bd       	out	0x26, r18	; 38
 45e:	08 95       	ret

00000460 <M_Timer1_Pwm1DutyCycle>:
}
void M_Timer1_Pwm1DutyCycle(u8 Local_u8_DutyCycle)
{
	//fast PWM non inverted
	OCR1A = (((Local_u8_DutyCycle*ICR1)/100)-1);
 460:	46 b5       	in	r20, 0x26	; 38
 462:	57 b5       	in	r21, 0x27	; 39
 464:	28 2f       	mov	r18, r24
 466:	24 9f       	mul	r18, r20
 468:	c0 01       	movw	r24, r0
 46a:	25 9f       	mul	r18, r21
 46c:	90 0d       	add	r25, r0
 46e:	11 24       	eor	r1, r1
 470:	9c 01       	movw	r18, r24
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	36 95       	lsr	r19
 478:	27 95       	ror	r18
 47a:	ab e7       	ldi	r26, 0x7B	; 123
 47c:	b4 e1       	ldi	r27, 0x14	; 20
 47e:	0e 94 99 02 	call	0x532	; 0x532 <__umulhisi3>
 482:	96 95       	lsr	r25
 484:	87 95       	ror	r24
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	9b bd       	out	0x2b, r25	; 43
 48a:	8a bd       	out	0x2a, r24	; 42
 48c:	08 95       	ret

0000048e <M_Timer1_Pwm1Start>:
}
void M_Timer1_Pwm1Start(void)
{
	#if   TIMER1_PRESCALER == 256
	ClrBit(TCCR1B,0);
 48e:	8e b5       	in	r24, 0x2e	; 46
 490:	8e 7f       	andi	r24, 0xFE	; 254
 492:	8e bd       	out	0x2e, r24	; 46
	ClrBit(TCCR1B,1);
 494:	8e b5       	in	r24, 0x2e	; 46
 496:	8d 7f       	andi	r24, 0xFD	; 253
 498:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,2);
 49a:	8e b5       	in	r24, 0x2e	; 46
 49c:	84 60       	ori	r24, 0x04	; 4
 49e:	8e bd       	out	0x2e, r24	; 46
 4a0:	08 95       	ret

000004a2 <M_Uart_Init>:
 */ 

#include "Uart.h"
void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 4a2:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 4a4:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 4a6:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 4a8:	87 e6       	ldi	r24, 0x67	; 103
 4aa:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 4ac:	86 e8       	ldi	r24, 0x86	; 134
 4ae:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 4b0:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 4b2:	53 9a       	sbi	0x0a, 3	; 10
 4b4:	08 95       	ret

000004b6 <M_Uart_Transmit>:
}
void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 4b6:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 4b8:	5e 9b       	sbis	0x0b, 6	; 11
 4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <M_Uart_Transmit+0x2>
}
 4bc:	08 95       	ret

000004be <M_Uart_Receive>:
u8   M_Uart_Receive(void)
{
	while((GetBit(UCSRA,7)) == 0);
 4be:	5f 9b       	sbis	0x0b, 7	; 11
 4c0:	fe cf       	rjmp	.-4      	; 0x4be <M_Uart_Receive>
	return UDR;
 4c2:	8c b1       	in	r24, 0x0c	; 12
 4c4:	08 95       	ret

000004c6 <__divmodhi4>:
 4c6:	97 fb       	bst	r25, 7
 4c8:	07 2e       	mov	r0, r23
 4ca:	16 f4       	brtc	.+4      	; 0x4d0 <__divmodhi4+0xa>
 4cc:	00 94       	com	r0
 4ce:	07 d0       	rcall	.+14     	; 0x4de <__divmodhi4_neg1>
 4d0:	77 fd       	sbrc	r23, 7
 4d2:	09 d0       	rcall	.+18     	; 0x4e6 <__divmodhi4_neg2>
 4d4:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodhi4>
 4d8:	07 fc       	sbrc	r0, 7
 4da:	05 d0       	rcall	.+10     	; 0x4e6 <__divmodhi4_neg2>
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__divmodhi4_exit>

000004de <__divmodhi4_neg1>:
 4de:	90 95       	com	r25
 4e0:	81 95       	neg	r24
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__divmodhi4_neg2>:
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255

000004ec <__divmodhi4_exit>:
 4ec:	08 95       	ret

000004ee <__udivmodsi4>:
 4ee:	a1 e2       	ldi	r26, 0x21	; 33
 4f0:	1a 2e       	mov	r1, r26
 4f2:	aa 1b       	sub	r26, r26
 4f4:	bb 1b       	sub	r27, r27
 4f6:	fd 01       	movw	r30, r26
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <__udivmodsi4_ep>

000004fa <__udivmodsi4_loop>:
 4fa:	aa 1f       	adc	r26, r26
 4fc:	bb 1f       	adc	r27, r27
 4fe:	ee 1f       	adc	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	a2 17       	cp	r26, r18
 504:	b3 07       	cpc	r27, r19
 506:	e4 07       	cpc	r30, r20
 508:	f5 07       	cpc	r31, r21
 50a:	20 f0       	brcs	.+8      	; 0x514 <__udivmodsi4_ep>
 50c:	a2 1b       	sub	r26, r18
 50e:	b3 0b       	sbc	r27, r19
 510:	e4 0b       	sbc	r30, r20
 512:	f5 0b       	sbc	r31, r21

00000514 <__udivmodsi4_ep>:
 514:	66 1f       	adc	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	1a 94       	dec	r1
 51e:	69 f7       	brne	.-38     	; 0x4fa <__udivmodsi4_loop>
 520:	60 95       	com	r22
 522:	70 95       	com	r23
 524:	80 95       	com	r24
 526:	90 95       	com	r25
 528:	9b 01       	movw	r18, r22
 52a:	ac 01       	movw	r20, r24
 52c:	bd 01       	movw	r22, r26
 52e:	cf 01       	movw	r24, r30
 530:	08 95       	ret

00000532 <__umulhisi3>:
 532:	a2 9f       	mul	r26, r18
 534:	b0 01       	movw	r22, r0
 536:	b3 9f       	mul	r27, r19
 538:	c0 01       	movw	r24, r0
 53a:	a3 9f       	mul	r26, r19
 53c:	70 0d       	add	r23, r0
 53e:	81 1d       	adc	r24, r1
 540:	11 24       	eor	r1, r1
 542:	91 1d       	adc	r25, r1
 544:	b2 9f       	mul	r27, r18
 546:	70 0d       	add	r23, r0
 548:	81 1d       	adc	r24, r1
 54a:	11 24       	eor	r1, r1
 54c:	91 1d       	adc	r25, r1
 54e:	08 95       	ret

00000550 <__udivmodhi4>:
 550:	aa 1b       	sub	r26, r26
 552:	bb 1b       	sub	r27, r27
 554:	51 e1       	ldi	r21, 0x11	; 17
 556:	07 c0       	rjmp	.+14     	; 0x566 <__udivmodhi4_ep>

00000558 <__udivmodhi4_loop>:
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	a6 17       	cp	r26, r22
 55e:	b7 07       	cpc	r27, r23
 560:	10 f0       	brcs	.+4      	; 0x566 <__udivmodhi4_ep>
 562:	a6 1b       	sub	r26, r22
 564:	b7 0b       	sbc	r27, r23

00000566 <__udivmodhi4_ep>:
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	5a 95       	dec	r21
 56c:	a9 f7       	brne	.-22     	; 0x558 <__udivmodhi4_loop>
 56e:	80 95       	com	r24
 570:	90 95       	com	r25
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
