
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a18  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  00000a8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c7a  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce3  00000000  00000000  000029c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001155  00000000  00000000  000036a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  000047fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd5  00000000  00000000  000055f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000063cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <A_Timer0_Execution>:
 * Return        : void.
 */

void A_Timer0_Execution(void)
{
	H_Motor_Stop();
  7c:	0e 94 ba 02 	call	0x574	; 0x574 <H_Motor_Stop>
	H_Buzzer_Off();
  80:	0e 94 1c 02 	call	0x438	; 0x438 <H_Buzzer_Off>
	M_Timer0_Stop();
  84:	0e 94 41 04 	call	0x882	; 0x882 <M_Timer0_Stop>
	Global_u8_SystemState = 2;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	08 95       	ret

00000090 <A_Main_ConfirmPassword>:
 */
u8 A_Main_ConfirmPassword(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
	{
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
  90:	fc 01       	movw	r30, r24
  92:	30 81       	ld	r19, Z
  94:	fb 01       	movw	r30, r22
  96:	20 81       	ld	r18, Z
  98:	32 13       	cpse	r19, r18
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <A_Main_ConfirmPassword+0x26>
  9c:	dc 01       	movw	r26, r24
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	31 96       	adiw	r30, 0x01	; 1
  a2:	05 96       	adiw	r24, 0x05	; 5
  a4:	3d 91       	ld	r19, X+
  a6:	21 91       	ld	r18, Z+
  a8:	32 13       	cpse	r19, r18
  aa:	07 c0       	rjmp	.+14     	; 0xba <A_Main_ConfirmPassword+0x2a>
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_ConfirmPassword(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
  ac:	a8 17       	cp	r26, r24
  ae:	b9 07       	cpc	r27, r25
  b0:	c9 f7       	brne	.-14     	; 0xa4 <A_Main_ConfirmPassword+0x14>
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
		}
	}
	return SUCCESS;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
{
	for(int i = 0; i<PASSWORD_SIZE; i++)
	{
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret
  ba:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SUCCESS;
}
  bc:	08 95       	ret

000000be <A_Main_CheckPasswordEeprom>:
 *                 password in the EEPROM.
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_CheckPasswordEeprom(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	7c 01       	movw	r14, r24
  cc:	06 2f       	mov	r16, r22
  ce:	17 2f       	mov	r17, r23
  d0:	c1 e1       	ldi	r28, 0x11	; 17
  d2:	d3 e0       	ldi	r29, 0x03	; 3
	for (int i = 0; i<PASSWORD_SIZE; i++)
	{
		Local_u8_Str1[i]= H_Eeprom_Read(0x0311+i); // reads the saved password in the EEPROM 
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 42 02 	call	0x484	; 0x484 <H_Eeprom_Read>
  da:	f7 01       	movw	r30, r14
  dc:	81 93       	st	Z+, r24
  de:	7f 01       	movw	r14, r30
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
  e0:	f8 01       	movw	r30, r16
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	89 13       	cpse	r24, r25
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <A_Main_CheckPasswordEeprom+0x3a>
  ea:	21 96       	adiw	r28, 0x01	; 1
 * Parameters    : 2 pointer to characters (2 strings to compare).
 * Return        : u8 value
 */
u8 A_Main_CheckPasswordEeprom(u8 * Local_u8_Str1, u8* Local_u8_Str2)
{
	for (int i = 0; i<PASSWORD_SIZE; i++)
  ec:	c6 31       	cpi	r28, 0x16	; 22
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	df 07       	cpc	r29, r31
  f2:	81 f7       	brne	.-32     	; 0xd4 <A_Main_CheckPasswordEeprom+0x16>
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
		}
	}
	return SUCCESS;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <A_Main_CheckPasswordEeprom+0x3c>
	for (int i = 0; i<PASSWORD_SIZE; i++)
	{
		Local_u8_Str1[i]= H_Eeprom_Read(0x0311+i); // reads the saved password in the EEPROM 
		if(Local_u8_Str1[i] != Local_u8_Str2[i])
		{
			return ERROR;
  f8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SUCCESS;
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	08 95       	ret

00000108 <main>:


int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	2a 97       	sbiw	r28, 0x0a	; 10
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
	// Initializing UART, LEDs, Buzzer, and Motor.
	M_Uart_Init();
 11c:	0e 94 bc 04 	call	0x978	; 0x978 <M_Uart_Init>
	H_Buzzer_Init();
 120:	0e 94 12 02 	call	0x424	; 0x424 <H_Buzzer_Init>
	H_Leds_Init();
 124:	0e 94 69 02 	call	0x4d2	; 0x4d2 <H_Leds_Init>
	H_Motor_Init();
 128:	0e 94 a0 02 	call	0x540	; 0x540 <H_Motor_Init>
	H_Eeprom_Init();
 12c:	0e 94 21 02 	call	0x442	; 0x442 <H_Eeprom_Init>
	u8 Local_u8_StrPasswordCheck[PASSWORD_SIZE];
	u8 Local_u8_CheckPassword;
	u8 Local_u8_TrialCounter = 0;
	u8 Local_u8_Result;
	
	while(M_Uart_ReceiveByte() != HMI_READY );   // this waits until the HMI MC is ready
 130:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
 134:	80 32       	cpi	r24, 0x20	; 32
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x28>
	Local_u8_CheckPassword = H_Eeprom_Read(0x0311); // check if there is a password already in the EEPROM.
 138:	81 e1       	ldi	r24, 0x11	; 17
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	0e 94 42 02 	call	0x484	; 0x484 <H_Eeprom_Read>
	if (Local_u8_CheckPassword != 0xFF)          // Determine the system current state based on EEPROM.
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	41 f0       	breq	.+16     	; 0x154 <main+0x4c>
	{
		Global_u8_SystemState = 2;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		M_Uart_SendByte(Global_u8_SystemState);
 14a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14e:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
 152:	06 c0       	rjmp	.+12     	; 0x160 <main+0x58>
	}
	else
	{
		Global_u8_SystemState = 0;
 154:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		M_Uart_SendByte(Global_u8_SystemState);
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
				M_Uart_SendByte(Global_u8_SystemState);
			}
			
			else if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 160:	91 2c       	mov	r9, r1
 162:	7e 01       	movw	r14, r28
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	e8 0e       	add	r14, r24
 168:	f1 1c       	adc	r15, r1
				H_Leds_On(Local_u8_TrialCounter);
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 16a:	0f 2e       	mov	r0, r31
 16c:	f5 e0       	ldi	r31, 0x05	; 5
 16e:	3f 2e       	mov	r3, r31
 170:	f0 2d       	mov	r31, r0
			break;
			
			
			/* This case is for when the user used the maximum amount of trials. */
			case 5:
			Global_u32_MS = 60000; // time for timer0 in ms.
 172:	0f 2e       	mov	r0, r31
 174:	f0 e6       	ldi	r31, 0x60	; 96
 176:	4f 2e       	mov	r4, r31
 178:	fa ee       	ldi	r31, 0xEA	; 234
 17a:	5f 2e       	mov	r5, r31
 17c:	61 2c       	mov	r6, r1
 17e:	71 2c       	mov	r7, r1
 180:	f0 2d       	mov	r31, r0
 182:	6e 01       	movw	r12, r28
 184:	9b e0       	ldi	r25, 0x0B	; 11
 186:	c9 0e       	add	r12, r25
 188:	d1 1c       	adc	r13, r1
			{
				Global_u8_SystemState = 3;
			}
			else if(Local_u8_Symbol == '+')
			{
				Global_u8_SystemState = 4;
 18a:	68 94       	set
 18c:	88 24       	eor	r8, r8
 18e:	82 f8       	bld	r8, 2
	
	
	
    while (1) 
    {  
		switch (Global_u8_SystemState)
 190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <main+0x92>
 198:	57 c0       	rjmp	.+174    	; 0x248 <main+0x140>
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <main+0x9e>
 19c:	88 23       	and	r24, r24
 19e:	61 f0       	breq	.+24     	; 0x1b8 <main+0xb0>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	b9 f1       	breq	.+110    	; 0x212 <main+0x10a>
 1a4:	f5 cf       	rjmp	.-22     	; 0x190 <main+0x88>
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0xa4>
 1aa:	c5 c0       	rjmp	.+394    	; 0x336 <main+0x22e>
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <main+0xa8>
 1ae:	5d c0       	rjmp	.+186    	; 0x26a <main+0x162>
 1b0:	85 30       	cpi	r24, 0x05	; 5
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <main+0xae>
 1b4:	0b c1       	rjmp	.+534    	; 0x3cc <main+0x2c4>
 1b6:	ec cf       	rjmp	.-40     	; 0x190 <main+0x88>
 1b8:	8e 01       	movw	r16, r28
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			/* This case is the case of running the program for the first time with no password set before in the EEPROM */
			case 0:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
 1be:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
 1c2:	d8 01       	movw	r26, r16
 1c4:	8d 93       	st	X+, r24
 1c6:	8d 01       	movw	r16, r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	ef e9       	ldi	r30, 0x9F	; 159
 1ca:	ff e0       	ldi	r31, 0x0F	; 15
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0xc4>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xca>
 1d2:	00 00       	nop
    {  
		switch (Global_u8_SystemState)
		{
			/* This case is the case of running the program for the first time with no password set before in the EEPROM */
			case 0:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 1d4:	ea 16       	cp	r14, r26
 1d6:	fb 06       	cpc	r15, r27
 1d8:	91 f7       	brne	.-28     	; 0x1be <main+0xb6>
 1da:	8e 01       	movw	r16, r28
 1dc:	0a 5f       	subi	r16, 0xFA	; 250
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
				_delay_ms(1);
			}
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPasswordCheck[i] = M_Uart_ReceiveByte(); // Receiving the password confirmation from the HMI ECU.
 1e0:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
 1e4:	d8 01       	movw	r26, r16
 1e6:	8d 93       	st	X+, r24
 1e8:	8d 01       	movw	r16, r26
 1ea:	ef e9       	ldi	r30, 0x9F	; 159
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0xe6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xec>
 1f4:	00 00       	nop
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte(); // Receiving the password from the HMI ECU.
				_delay_ms(1);
			}
			for (int i = 0; i<PASSWORD_SIZE; i++)
 1f6:	ca 16       	cp	r12, r26
 1f8:	db 06       	cpc	r13, r27
 1fa:	91 f7       	brne	.-28     	; 0x1e0 <main+0xd8>
				Local_u8_StrPasswordCheck[i] = M_Uart_ReceiveByte(); // Receiving the password confirmation from the HMI ECU.
				_delay_ms(1);
			}
			/* SUCCESS = 1 and ERROR = 0 , System state will be determined based on whether the entered passwords match or not. */
			
			Local_u8_CheckPassword = A_Main_ConfirmPassword(Local_u8_StrPassword, Local_u8_StrPasswordCheck);
 1fc:	b7 01       	movw	r22, r14
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 48 00 	call	0x90	; 0x90 <A_Main_ConfirmPassword>
 206:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_CheckPassword);
 208:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
			Global_u8_SystemState = Local_u8_CheckPassword;
 20c:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 210:	bf cf       	rjmp	.-130    	; 0x190 <main+0x88>
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	5c 01       	movw	r10, r24
	
	
	
    while (1) 
    {  
		switch (Global_u8_SystemState)
 218:	01 e1       	ldi	r16, 0x11	; 17
 21a:	13 e0       	ldi	r17, 0x03	; 3
			
			/* This case is follows the first case to save the password to the EEPROM if password entered and confirmed successfully. */
			case 1:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				H_Eeprom_Write(Local_u8_StrPassword[i],0x0311+i);
 21c:	b8 01       	movw	r22, r16
 21e:	d5 01       	movw	r26, r10
 220:	8d 91       	ld	r24, X+
 222:	5d 01       	movw	r10, r26
 224:	0e 94 24 02 	call	0x448	; 0x448 <H_Eeprom_Write>
 228:	ef e3       	ldi	r30, 0x3F	; 63
 22a:	fc e9       	ldi	r31, 0x9C	; 156
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x124>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x12a>
 232:	00 00       	nop
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
			Global_u8_SystemState = Local_u8_CheckPassword;
			break;
			
			/* This case is follows the first case to save the password to the EEPROM if password entered and confirmed successfully. */
			case 1:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 238:	06 31       	cpi	r16, 0x16	; 22
 23a:	f3 e0       	ldi	r31, 0x03	; 3
 23c:	1f 07       	cpc	r17, r31
 23e:	71 f7       	brne	.-36     	; 0x21c <main+0x114>
			{
				H_Eeprom_Write(Local_u8_StrPassword[i],0x0311+i);
				_delay_ms(10);
			}
			Global_u8_SystemState = 2;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 246:	a4 cf       	rjmp	.-184    	; 0x190 <main+0x88>
			
			
			/* This case is the normal case of running the system with a password saved */
			case 2:
			M_Uart_SendByte(C_READY); // sending to the HMI ECU that the control ECU is ready.
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
			
			u8 Local_u8_Symbol = M_Uart_ReceiveByte(); // determining system state based on received symbol.
 24e:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
			
			if(Local_u8_Symbol == '*')
 252:	8a 32       	cpi	r24, 0x2A	; 42
 254:	21 f4       	brne	.+8      	; 0x25e <main+0x156>
			{
				Global_u8_SystemState = 3;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 25c:	99 cf       	rjmp	.-206    	; 0x190 <main+0x88>
			}
			else if(Local_u8_Symbol == '+')
 25e:	8b 32       	cpi	r24, 0x2B	; 43
 260:	09 f0       	breq	.+2      	; 0x264 <main+0x15c>
 262:	96 cf       	rjmp	.-212    	; 0x190 <main+0x88>
			{
				Global_u8_SystemState = 4;
 264:	80 92 60 00 	sts	0x0060, r8	; 0x800060 <__DATA_REGION_ORIGIN__>
 268:	93 cf       	rjmp	.-218    	; 0x190 <main+0x88>
 26a:	8e 01       	movw	r16, r28
 26c:	0f 5f       	subi	r16, 0xFF	; 255
 26e:	1f 4f       	sbci	r17, 0xFF	; 255
			
			/* This case is the case of entering password to open the door. */
			case 3:
			for (int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
 270:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
 274:	d8 01       	movw	r26, r16
 276:	8d 93       	st	X+, r24
 278:	8d 01       	movw	r16, r26
 27a:	ef e9       	ldi	r30, 0x9F	; 159
 27c:	ff e0       	ldi	r31, 0x0F	; 15
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x176>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x17c>
 284:	00 00       	nop
			}
			break;
			
			/* This case is the case of entering password to open the door. */
			case 3:
			for (int i = 0; i<PASSWORD_SIZE; i++)
 286:	ea 16       	cp	r14, r26
 288:	fb 06       	cpc	r15, r27
 28a:	91 f7       	brne	.-28     	; 0x270 <main+0x168>
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
				_delay_ms(1);
			}
			Local_u8_Result = A_Main_CheckPasswordEeprom(Local_u8_StrPasswordCheck, Local_u8_StrPassword); // comparing entered password to the saved password.
 28c:	be 01       	movw	r22, r28
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	c7 01       	movw	r24, r14
 294:	0e 94 5f 00 	call	0xbe	; 0xbe <A_Main_CheckPasswordEeprom>
 298:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_Result);
 29a:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
			/* Action will be taken based on the Result variable */
			
			if(Local_u8_Result == ERROR)
 29e:	11 11       	cpse	r17, r1
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <main+0x1b0>
			{
				Local_u8_TrialCounter++;
 2a2:	93 94       	inc	r9
				H_Leds_On(Local_u8_TrialCounter); // lights a red led on each wrong trial.
 2a4:	89 2d       	mov	r24, r9
 2a6:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_Leds_On>
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
 2aa:	f3 e0       	ldi	r31, 0x03	; 3
 2ac:	9f 12       	cpse	r9, r31
 2ae:	af c0       	rjmp	.+350    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 2b0:	30 92 60 00 	sts	0x0060, r3	; 0x800060 <__DATA_REGION_ORIGIN__>
				Local_u8_TrialCounter++;
				H_Leds_On(Local_u8_TrialCounter); // lights a red led on each wrong trial.
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
 2b4:	91 2c       	mov	r9, r1
 2b6:	ab c0       	rjmp	.+342    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x1b4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x1ba>
 2c2:	00 00       	nop
					Global_u8_SystemState = 5;
				}
			}
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
 2c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c8:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
			
			if(Local_u8_Result == SUCCESS)
 2cc:	11 30       	cpi	r17, 0x01	; 1
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <main+0x1ca>
 2d0:	5f cf       	rjmp	.-322    	; 0x190 <main+0x88>
			{
				Local_u8_TrialCounter = 0;
				H_Leds_Off(LED0); H_Leds_Off(LED1); H_Leds_Off(LED2); // turning off all LEDs. 
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
				M_Uart_SendByte(C_READY);
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
				Global_u32_MS = 15000; // seconds needed for timer 0 in ms.
 2ea:	88 e9       	ldi	r24, 0x98	; 152
 2ec:	9a e3       	ldi	r25, 0x3A	; 58
 2ee:	a0 e0       	ldi	r26, 0x00	; 0
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Global_u32_MS>
 2f6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Global_u32_MS+0x1>
 2fa:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <Global_u32_MS+0x2>
 2fe:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <Global_u32_MS+0x3>
				
				/* Timer0 initialization and setting the required time for motor to open the door */
				
				M_Timer0_Init();
 302:	0e 94 d5 03 	call	0x7aa	; 0x7aa <M_Timer0_Init>
				M_Timer0_SetCallBack(A_Timer0_Execution);
 306:	8e e3       	ldi	r24, 0x3E	; 62
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 4b 04 	call	0x896	; 0x896 <M_Timer0_SetCallBack>
				M_Timer0_SetTime(Global_u32_MS);
 30e:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Global_u32_MS>
 312:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Global_u32_MS+0x1>
 316:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Global_u32_MS+0x2>
 31a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Global_u32_MS+0x3>
 31e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_Timer0_SetTime>
				M_Timer0_Start();
 322:	0e 94 37 04 	call	0x86e	; 0x86e <M_Timer0_Start>
				H_Motor_CW();
 326:	0e 94 b1 02 	call	0x562	; 0x562 <H_Motor_CW>
				
				/* next while loop is to wait until the door has opened and timer0 callback function is executed. */
				while(Global_u8_SystemState != 2);
 32a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x222>
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
			
			if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 332:	91 2c       	mov	r9, r1
 334:	2d cf       	rjmp	.-422    	; 0x190 <main+0x88>
 336:	8e 01       	movw	r16, r28
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
			
			/* This case is for doing the password reset */
			case 4:
			for(int i = 0; i<PASSWORD_SIZE; i++)
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
 33c:	0e 94 ca 04 	call	0x994	; 0x994 <M_Uart_ReceiveByte>
 340:	d8 01       	movw	r26, r16
 342:	8d 93       	st	X+, r24
 344:	8d 01       	movw	r16, r26
 346:	ef e9       	ldi	r30, 0x9F	; 159
 348:	ff e0       	ldi	r31, 0x0F	; 15
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x242>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x248>
 350:	00 00       	nop
			break;
			
			
			/* This case is for doing the password reset */
			case 4:
			for(int i = 0; i<PASSWORD_SIZE; i++)
 352:	ae 15       	cp	r26, r14
 354:	bf 05       	cpc	r27, r15
 356:	91 f7       	brne	.-28     	; 0x33c <main+0x234>
			{
				Local_u8_StrPassword[i] = M_Uart_ReceiveByte();
				_delay_ms(1);
			}
			Local_u8_Result = A_Main_CheckPasswordEeprom(Local_u8_StrPasswordCheck, Local_u8_StrPassword);
 358:	be 01       	movw	r22, r28
 35a:	6f 5f       	subi	r22, 0xFF	; 255
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	c7 01       	movw	r24, r14
 360:	0e 94 5f 00 	call	0xbe	; 0xbe <A_Main_CheckPasswordEeprom>
 364:	18 2f       	mov	r17, r24
			M_Uart_SendByte(Local_u8_Result);
 366:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
			
			/* Action will be taken based on the Result variable */
			if(Local_u8_Result == ERROR)
 36a:	11 11       	cpse	r17, r1
 36c:	15 c0       	rjmp	.+42     	; 0x398 <main+0x290>
			{
				Local_u8_TrialCounter++;
 36e:	93 94       	inc	r9
				H_Leds_On(Local_u8_TrialCounter);
 370:	89 2d       	mov	r24, r9
 372:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_Leds_On>
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
 376:	f3 e0       	ldi	r31, 0x03	; 3
 378:	9f 12       	cpse	r9, r31
 37a:	03 c0       	rjmp	.+6      	; 0x382 <main+0x27a>
				{
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
 37c:	30 92 60 00 	sts	0x0060, r3	; 0x800060 <__DATA_REGION_ORIGIN__>
				Local_u8_TrialCounter++;
				H_Leds_On(Local_u8_TrialCounter);
				
				if(Local_u8_TrialCounter == MAX_TRIALS)
				{
					Local_u8_TrialCounter = 0;
 380:	91 2c       	mov	r9, r1
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x27e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x284>
 38c:	00 00       	nop
					Global_u8_SystemState = 5;
				}
				_delay_ms(1);
				M_Uart_SendByte(Global_u8_SystemState);
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 392:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
 396:	fc ce       	rjmp	.-520    	; 0x190 <main+0x88>
			}
			
			else if(Local_u8_Result == SUCCESS)
 398:	11 30       	cpi	r17, 0x01	; 1
 39a:	09 f0       	breq	.+2      	; 0x39e <main+0x296>
 39c:	f9 ce       	rjmp	.-526    	; 0x190 <main+0x88>
			{
				Local_u8_TrialCounter = 0;
				H_Leds_Off(LED0); H_Leds_Off(LED1); H_Leds_Off(LED2);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 8b 02 	call	0x516	; 0x516 <H_Leds_Off>
				Global_u8_SystemState = 0;
 3b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b4:	af e9       	ldi	r26, 0x9F	; 159
 3b6:	bf e0       	ldi	r27, 0x0F	; 15
 3b8:	11 97       	sbiw	r26, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <main+0x2b0>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x2b6>
 3be:	00 00       	nop
				_delay_ms(1);
				M_Uart_SendByte(Global_u8_SystemState);
 3c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c4:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
				M_Uart_SendByte(Global_u8_SystemState);
			}
			
			else if(Local_u8_Result == SUCCESS)
			{
				Local_u8_TrialCounter = 0;
 3c8:	91 2c       	mov	r9, r1
 3ca:	e2 ce       	rjmp	.-572    	; 0x190 <main+0x88>
			break;
			
			
			/* This case is for when the user used the maximum amount of trials. */
			case 5:
			Global_u32_MS = 60000; // time for timer0 in ms.
 3cc:	40 92 61 00 	sts	0x0061, r4	; 0x800061 <Global_u32_MS>
 3d0:	50 92 62 00 	sts	0x0062, r5	; 0x800062 <Global_u32_MS+0x1>
 3d4:	60 92 63 00 	sts	0x0063, r6	; 0x800063 <Global_u32_MS+0x2>
 3d8:	70 92 64 00 	sts	0x0064, r7	; 0x800064 <Global_u32_MS+0x3>
			M_Timer0_Init();
 3dc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <M_Timer0_Init>
			M_Timer0_SetCallBack(A_Timer0_Execution);
 3e0:	8e e3       	ldi	r24, 0x3E	; 62
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 4b 04 	call	0x896	; 0x896 <M_Timer0_SetCallBack>
			M_Timer0_SetTime(Global_u32_MS);
 3e8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Global_u32_MS>
 3ec:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Global_u32_MS+0x1>
 3f0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Global_u32_MS+0x2>
 3f4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Global_u32_MS+0x3>
 3f8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_Timer0_SetTime>
			H_Buzzer_On();
 3fc:	0e 94 17 02 	call	0x42e	; 0x42e <H_Buzzer_On>
			M_Timer0_Start();
 400:	0e 94 37 04 	call	0x86e	; 0x86e <M_Timer0_Start>
			
			while(Global_u8_SystemState != 2); //to block waiting for timer0 ISR.
 404:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	c1 ce       	rjmp	.-638    	; 0x190 <main+0x88>
 40e:	ef e9       	ldi	r30, 0x9F	; 159
 410:	ff e0       	ldi	r31, 0x0F	; 15
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
					Local_u8_TrialCounter = 0;
					Global_u8_SystemState = 5;
				}
			}
			_delay_ms(1);
			M_Uart_SendByte(Global_u8_SystemState);
 41a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41e:	0e 94 c6 04 	call	0x98c	; 0x98c <M_Uart_SendByte>
 422:	b6 ce       	rjmp	.-660    	; 0x190 <main+0x88>

00000424 <H_Buzzer_Init>:
 */ 
#include "Buzzer.h"

void H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZER_PIN,OUTPUT);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	8d e0       	ldi	r24, 0x0D	; 13
 428:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
 42c:	08 95       	ret

0000042e <H_Buzzer_On>:
}
void H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8d e0       	ldi	r24, 0x0D	; 13
 432:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 436:	08 95       	ret

00000438 <H_Buzzer_Off>:
}
void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZER_PIN,LOW);
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	8d e0       	ldi	r24, 0x0D	; 13
 43c:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 440:	08 95       	ret

00000442 <H_Eeprom_Init>:
#include "ExternalEeprom.h"
#include "Leds.h"

void H_Eeprom_Init(void)
{
	M_Twi_Init();
 442:	0e 94 9f 04 	call	0x93e	; 0x93e <M_Twi_Init>
 446:	08 95       	ret

00000448 <H_Eeprom_Write>:
	//_delay_ms(1000);
}
void H_Eeprom_Write(u8 Local_u8_Data, u16 Local_u16_ByteAddress)
{
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	18 2f       	mov	r17, r24
 450:	eb 01       	movw	r28, r22
	M_Twi_StartCondition();
 452:	0e 94 a5 04 	call	0x94a	; 0x94a <M_Twi_StartCondition>
	M_Twi_SendByte((u8)(0xA0 | ((Local_u16_ByteAddress & 0x0700)>>7)));
 456:	ce 01       	movw	r24, r28
 458:	88 27       	eor	r24, r24
 45a:	97 70       	andi	r25, 0x07	; 7
 45c:	88 0f       	add	r24, r24
 45e:	89 2f       	mov	r24, r25
 460:	88 1f       	adc	r24, r24
 462:	99 0b       	sbc	r25, r25
 464:	91 95       	neg	r25
 466:	80 6a       	ori	r24, 0xA0	; 160
 468:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	M_Twi_SendByte((u8)Local_u16_ByteAddress);
 46c:	8c 2f       	mov	r24, r28
 46e:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	M_Twi_SendByte(Local_u8_Data);
 472:	81 2f       	mov	r24, r17
 474:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	M_Twi_StopCondition();
 478:	0e 94 b9 04 	call	0x972	; 0x972 <M_Twi_StopCondition>
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	08 95       	ret

00000484 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u16 Local_u16_ByteAddress)
{
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	8c 01       	movw	r16, r24
	u8 Local_u8_Data = 0;
	M_Twi_StartCondition();
 48e:	0e 94 a5 04 	call	0x94a	; 0x94a <M_Twi_StartCondition>
	M_Twi_SendByte((u8)((0xA0) | ((Local_u16_ByteAddress & 0x0700)>>7)));
 492:	e8 01       	movw	r28, r16
 494:	cc 27       	eor	r28, r28
 496:	d7 70       	andi	r29, 0x07	; 7
 498:	cc 0f       	add	r28, r28
 49a:	cd 2f       	mov	r28, r29
 49c:	cc 1f       	adc	r28, r28
 49e:	dd 0b       	sbc	r29, r29
 4a0:	d1 95       	neg	r29
 4a2:	8c 2f       	mov	r24, r28
 4a4:	80 6a       	ori	r24, 0xA0	; 160
 4a6:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	M_Twi_SendByte((u8)Local_u16_ByteAddress);
 4aa:	80 2f       	mov	r24, r16
 4ac:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	M_Twi_StartCondition();
 4b0:	0e 94 a5 04 	call	0x94a	; 0x94a <M_Twi_StartCondition>
	M_Twi_SendByte((u8)((0xA0) | ((Local_u16_ByteAddress & 0x0700)>>7) | 1));
 4b4:	8c 2f       	mov	r24, r28
 4b6:	81 6a       	ori	r24, 0xA1	; 161
 4b8:	0e 94 ab 04 	call	0x956	; 0x956 <M_Twi_SendByte>
	Local_u8_Data = M_Twi_ReadByte();
 4bc:	0e 94 b2 04 	call	0x964	; 0x964 <M_Twi_ReadByte>
 4c0:	c8 2f       	mov	r28, r24
	M_Twi_StopCondition();
 4c2:	0e 94 b9 04 	call	0x972	; 0x972 <M_Twi_StopCondition>
	return Local_u8_Data;
 4c6:	8c 2f       	mov	r24, r28
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	8a e0       	ldi	r24, 0x0A	; 10
 4d6:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	8b e0       	ldi	r24, 0x0B	; 11
 4de:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	8c e0       	ldi	r24, 0x0C	; 12
 4e6:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
 4ea:	08 95       	ret

000004ec <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	49 f0       	breq	.+18     	; 0x502 <H_Leds_On+0x16>
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	61 f0       	breq	.+24     	; 0x50c <H_Leds_On+0x20>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	71 f4       	brne	.+28     	; 0x514 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 500:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	8b e0       	ldi	r24, 0x0B	; 11
 506:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 50a:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	8c e0       	ldi	r24, 0x0C	; 12
 510:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 514:	08 95       	ret

00000516 <H_Leds_Off>:
		default:                                   break;
	}
}
void H_Leds_Off(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	49 f0       	breq	.+18     	; 0x52c <H_Leds_Off+0x16>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	61 f0       	breq	.+24     	; 0x536 <H_Leds_Off+0x20>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	71 f4       	brne	.+28     	; 0x53e <H_Leds_Off+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,LOW);  break;
 522:	62 e0       	ldi	r22, 0x02	; 2
 524:	8a e0       	ldi	r24, 0x0A	; 10
 526:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 52a:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,LOW);  break;
 52c:	62 e0       	ldi	r22, 0x02	; 2
 52e:	8b e0       	ldi	r24, 0x0B	; 11
 530:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 534:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,LOW);  break;
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	8c e0       	ldi	r24, 0x0C	; 12
 53a:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 53e:	08 95       	ret

00000540 <H_Motor_Init>:
	
}
void H_Motor_CCW(void)
{
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
	M_Dio_PinWrite(MOTOR_PIN2,LOW);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e2       	ldi	r24, 0x21	; 33
 544:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	81 e2       	ldi	r24, 0x21	; 33
 54c:	0e 94 c3 02 	call	0x586	; 0x586 <M_Dio_PinMode>
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	81 e2       	ldi	r24, 0x21	; 33
 554:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	82 e2       	ldi	r24, 0x22	; 34
 55c:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 560:	08 95       	ret

00000562 <H_Motor_CW>:
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	81 e2       	ldi	r24, 0x21	; 33
 566:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	82 e2       	ldi	r24, 0x22	; 34
 56e:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 572:	08 95       	ret

00000574 <H_Motor_Stop>:
}
void H_Motor_Stop(void)
{
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	81 e2       	ldi	r24, 0x21	; 33
 578:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
	M_Dio_PinWrite(MOTOR_PIN1,HIGH);
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	81 e2       	ldi	r24, 0x21	; 33
 580:	0e 94 4c 03 	call	0x698	; 0x698 <M_Dio_PinWrite>
 584:	08 95       	ret

00000586 <M_Dio_PinMode>:
 */ 

#include "Dio.h"
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 586:	9d ec       	ldi	r25, 0xCD	; 205
 588:	89 9f       	mul	r24, r25
 58a:	91 2d       	mov	r25, r1
 58c:	11 24       	eor	r1, r1
 58e:	29 2f       	mov	r18, r25
 590:	26 95       	lsr	r18
 592:	26 95       	lsr	r18
 594:	26 95       	lsr	r18
 596:	22 0f       	add	r18, r18
 598:	32 2f       	mov	r19, r18
 59a:	33 0f       	add	r19, r19
 59c:	33 0f       	add	r19, r19
 59e:	23 0f       	add	r18, r19
 5a0:	82 1b       	sub	r24, r18
 5a2:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 5a4:	96 95       	lsr	r25
 5a6:	96 95       	lsr	r25
 5a8:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 5aa:	61 30       	cpi	r22, 0x01	; 1
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <M_Dio_PinMode+0x2e>
 5ae:	62 30       	cpi	r22, 0x02	; 2
 5b0:	c1 f1       	breq	.+112    	; 0x622 <M_Dio_PinMode+0x9c>
 5b2:	08 95       	ret
	{
		case OUTPUT:
		switch(Local_u8_Port)
 5b4:	92 30       	cpi	r25, 0x02	; 2
 5b6:	a1 f0       	breq	.+40     	; 0x5e0 <M_Dio_PinMode+0x5a>
 5b8:	18 f4       	brcc	.+6      	; 0x5c0 <M_Dio_PinMode+0x3a>
 5ba:	91 30       	cpi	r25, 0x01	; 1
 5bc:	31 f0       	breq	.+12     	; 0x5ca <M_Dio_PinMode+0x44>
 5be:	08 95       	ret
 5c0:	93 30       	cpi	r25, 0x03	; 3
 5c2:	c9 f0       	breq	.+50     	; 0x5f6 <M_Dio_PinMode+0x70>
 5c4:	94 30       	cpi	r25, 0x04	; 4
 5c6:	11 f1       	breq	.+68     	; 0x60c <M_Dio_PinMode+0x86>
 5c8:	08 95       	ret
		{
			case 1: SetBit(DDRA,Local_u8_Pin); break;
 5ca:	3a b3       	in	r19, 0x1a	; 26
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <M_Dio_PinMode+0x50>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <M_Dio_PinMode+0x4c>
 5da:	83 2b       	or	r24, r19
 5dc:	8a bb       	out	0x1a, r24	; 26
 5de:	08 95       	ret
			case 2: SetBit(DDRB,Local_u8_Pin); break;
 5e0:	37 b3       	in	r19, 0x17	; 23
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <M_Dio_PinMode+0x66>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <M_Dio_PinMode+0x62>
 5f0:	83 2b       	or	r24, r19
 5f2:	87 bb       	out	0x17, r24	; 23
 5f4:	08 95       	ret
			case 3: SetBit(DDRC,Local_u8_Pin); break;
 5f6:	34 b3       	in	r19, 0x14	; 20
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <M_Dio_PinMode+0x7c>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	2a 95       	dec	r18
 604:	e2 f7       	brpl	.-8      	; 0x5fe <M_Dio_PinMode+0x78>
 606:	83 2b       	or	r24, r19
 608:	84 bb       	out	0x14, r24	; 20
 60a:	08 95       	ret
			case 4: SetBit(DDRD,Local_u8_Pin); break;
 60c:	31 b3       	in	r19, 0x11	; 17
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <M_Dio_PinMode+0x92>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	2a 95       	dec	r18
 61a:	e2 f7       	brpl	.-8      	; 0x614 <M_Dio_PinMode+0x8e>
 61c:	83 2b       	or	r24, r19
 61e:	81 bb       	out	0x11, r24	; 17
 620:	08 95       	ret
			default:                           break;
		}break;
		case INPUT:
		switch(Local_u8_Port)
 622:	92 30       	cpi	r25, 0x02	; 2
 624:	a9 f0       	breq	.+42     	; 0x650 <M_Dio_PinMode+0xca>
 626:	18 f4       	brcc	.+6      	; 0x62e <M_Dio_PinMode+0xa8>
 628:	91 30       	cpi	r25, 0x01	; 1
 62a:	31 f0       	breq	.+12     	; 0x638 <M_Dio_PinMode+0xb2>
 62c:	08 95       	ret
 62e:	93 30       	cpi	r25, 0x03	; 3
 630:	d9 f0       	breq	.+54     	; 0x668 <M_Dio_PinMode+0xe2>
 632:	94 30       	cpi	r25, 0x04	; 4
 634:	29 f1       	breq	.+74     	; 0x680 <M_Dio_PinMode+0xfa>
 636:	08 95       	ret
		{
			case 1: ClrBit(DDRA,Local_u8_Pin); break;
 638:	3a b3       	in	r19, 0x1a	; 26
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <M_Dio_PinMode+0xbe>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	2a 95       	dec	r18
 646:	e2 f7       	brpl	.-8      	; 0x640 <M_Dio_PinMode+0xba>
 648:	80 95       	com	r24
 64a:	83 23       	and	r24, r19
 64c:	8a bb       	out	0x1a, r24	; 26
 64e:	08 95       	ret
			case 2: ClrBit(DDRB,Local_u8_Pin); break;
 650:	37 b3       	in	r19, 0x17	; 23
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <M_Dio_PinMode+0xd6>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	2a 95       	dec	r18
 65e:	e2 f7       	brpl	.-8      	; 0x658 <M_Dio_PinMode+0xd2>
 660:	80 95       	com	r24
 662:	83 23       	and	r24, r19
 664:	87 bb       	out	0x17, r24	; 23
 666:	08 95       	ret
			case 3: ClrBit(DDRC,Local_u8_Pin); break;
 668:	34 b3       	in	r19, 0x14	; 20
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <M_Dio_PinMode+0xee>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	2a 95       	dec	r18
 676:	e2 f7       	brpl	.-8      	; 0x670 <M_Dio_PinMode+0xea>
 678:	80 95       	com	r24
 67a:	83 23       	and	r24, r19
 67c:	84 bb       	out	0x14, r24	; 20
 67e:	08 95       	ret
			case 4: ClrBit(DDRD,Local_u8_Pin); break;
 680:	31 b3       	in	r19, 0x11	; 17
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <M_Dio_PinMode+0x106>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	2a 95       	dec	r18
 68e:	e2 f7       	brpl	.-8      	; 0x688 <M_Dio_PinMode+0x102>
 690:	80 95       	com	r24
 692:	83 23       	and	r24, r19
 694:	81 bb       	out	0x11, r24	; 17
 696:	08 95       	ret

00000698 <M_Dio_PinWrite>:
default: break;
	}
}
void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 698:	9d ec       	ldi	r25, 0xCD	; 205
 69a:	89 9f       	mul	r24, r25
 69c:	91 2d       	mov	r25, r1
 69e:	11 24       	eor	r1, r1
 6a0:	29 2f       	mov	r18, r25
 6a2:	26 95       	lsr	r18
 6a4:	26 95       	lsr	r18
 6a6:	26 95       	lsr	r18
 6a8:	22 0f       	add	r18, r18
 6aa:	32 2f       	mov	r19, r18
 6ac:	33 0f       	add	r19, r19
 6ae:	33 0f       	add	r19, r19
 6b0:	23 0f       	add	r18, r19
 6b2:	82 1b       	sub	r24, r18
 6b4:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 6b6:	96 95       	lsr	r25
 6b8:	96 95       	lsr	r25
 6ba:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 6bc:	61 30       	cpi	r22, 0x01	; 1
 6be:	19 f0       	breq	.+6      	; 0x6c6 <M_Dio_PinWrite+0x2e>
 6c0:	62 30       	cpi	r22, 0x02	; 2
 6c2:	c1 f1       	breq	.+112    	; 0x734 <M_Dio_PinWrite+0x9c>
 6c4:	08 95       	ret
	{
		case HIGH:
		switch(Local_u8_Port)
 6c6:	92 30       	cpi	r25, 0x02	; 2
 6c8:	a1 f0       	breq	.+40     	; 0x6f2 <M_Dio_PinWrite+0x5a>
 6ca:	18 f4       	brcc	.+6      	; 0x6d2 <M_Dio_PinWrite+0x3a>
 6cc:	91 30       	cpi	r25, 0x01	; 1
 6ce:	31 f0       	breq	.+12     	; 0x6dc <M_Dio_PinWrite+0x44>
 6d0:	08 95       	ret
 6d2:	93 30       	cpi	r25, 0x03	; 3
 6d4:	c9 f0       	breq	.+50     	; 0x708 <M_Dio_PinWrite+0x70>
 6d6:	94 30       	cpi	r25, 0x04	; 4
 6d8:	11 f1       	breq	.+68     	; 0x71e <M_Dio_PinWrite+0x86>
 6da:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 6dc:	3b b3       	in	r19, 0x1b	; 27
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <M_Dio_PinWrite+0x50>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	2a 95       	dec	r18
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <M_Dio_PinWrite+0x4c>
 6ec:	83 2b       	or	r24, r19
 6ee:	8b bb       	out	0x1b, r24	; 27
 6f0:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 6f2:	38 b3       	in	r19, 0x18	; 24
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <M_Dio_PinWrite+0x66>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	2a 95       	dec	r18
 700:	e2 f7       	brpl	.-8      	; 0x6fa <M_Dio_PinWrite+0x62>
 702:	83 2b       	or	r24, r19
 704:	88 bb       	out	0x18, r24	; 24
 706:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 708:	35 b3       	in	r19, 0x15	; 21
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <M_Dio_PinWrite+0x7c>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	2a 95       	dec	r18
 716:	e2 f7       	brpl	.-8      	; 0x710 <M_Dio_PinWrite+0x78>
 718:	83 2b       	or	r24, r19
 71a:	85 bb       	out	0x15, r24	; 21
 71c:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 71e:	32 b3       	in	r19, 0x12	; 18
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <M_Dio_PinWrite+0x92>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	2a 95       	dec	r18
 72c:	e2 f7       	brpl	.-8      	; 0x726 <M_Dio_PinWrite+0x8e>
 72e:	83 2b       	or	r24, r19
 730:	82 bb       	out	0x12, r24	; 18
 732:	08 95       	ret
			default:                           break;
		}break;
		case LOW:
		switch(Local_u8_Port)
 734:	92 30       	cpi	r25, 0x02	; 2
 736:	a9 f0       	breq	.+42     	; 0x762 <M_Dio_PinWrite+0xca>
 738:	18 f4       	brcc	.+6      	; 0x740 <M_Dio_PinWrite+0xa8>
 73a:	91 30       	cpi	r25, 0x01	; 1
 73c:	31 f0       	breq	.+12     	; 0x74a <M_Dio_PinWrite+0xb2>
 73e:	08 95       	ret
 740:	93 30       	cpi	r25, 0x03	; 3
 742:	d9 f0       	breq	.+54     	; 0x77a <M_Dio_PinWrite+0xe2>
 744:	94 30       	cpi	r25, 0x04	; 4
 746:	29 f1       	breq	.+74     	; 0x792 <M_Dio_PinWrite+0xfa>
 748:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 74a:	3b b3       	in	r19, 0x1b	; 27
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <M_Dio_PinWrite+0xbe>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	2a 95       	dec	r18
 758:	e2 f7       	brpl	.-8      	; 0x752 <M_Dio_PinWrite+0xba>
 75a:	80 95       	com	r24
 75c:	83 23       	and	r24, r19
 75e:	8b bb       	out	0x1b, r24	; 27
 760:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 762:	38 b3       	in	r19, 0x18	; 24
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <M_Dio_PinWrite+0xd6>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	2a 95       	dec	r18
 770:	e2 f7       	brpl	.-8      	; 0x76a <M_Dio_PinWrite+0xd2>
 772:	80 95       	com	r24
 774:	83 23       	and	r24, r19
 776:	88 bb       	out	0x18, r24	; 24
 778:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 77a:	35 b3       	in	r19, 0x15	; 21
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <M_Dio_PinWrite+0xee>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	2a 95       	dec	r18
 788:	e2 f7       	brpl	.-8      	; 0x782 <M_Dio_PinWrite+0xea>
 78a:	80 95       	com	r24
 78c:	83 23       	and	r24, r19
 78e:	85 bb       	out	0x15, r24	; 21
 790:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 792:	32 b3       	in	r19, 0x12	; 18
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <M_Dio_PinWrite+0x106>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	2a 95       	dec	r18
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <M_Dio_PinWrite+0x102>
 7a2:	80 95       	com	r24
 7a4:	83 23       	and	r24, r19
 7a6:	82 bb       	out	0x12, r24	; 18
 7a8:	08 95       	ret

000007aa <M_Timer0_Init>:
{
	M_Timer0_Start();
}
void M_Timer0_Pwm0Stop(void)
{
	M_Timer0_Stop();
 7aa:	83 b7       	in	r24, 0x33	; 51
 7ac:	88 60       	ori	r24, 0x08	; 8
 7ae:	83 bf       	out	0x33, r24	; 51
 7b0:	83 b7       	in	r24, 0x33	; 51
 7b2:	8f 7b       	andi	r24, 0xBF	; 191
 7b4:	83 bf       	out	0x33, r24	; 51
 7b6:	89 b7       	in	r24, 0x39	; 57
 7b8:	82 60       	ori	r24, 0x02	; 2
 7ba:	89 bf       	out	0x39, r24	; 57
 7bc:	8f b7       	in	r24, 0x3f	; 63
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	8f bf       	out	0x3f, r24	; 63
 7c2:	08 95       	ret

000007c4 <M_Timer0_SetTime>:
 7c4:	8f 92       	push	r8
 7c6:	9f 92       	push	r9
 7c8:	af 92       	push	r10
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	cf 93       	push	r28
 7d6:	9b 01       	movw	r18, r22
 7d8:	ac 01       	movw	r20, r24
 7da:	a8 ee       	ldi	r26, 0xE8	; 232
 7dc:	b3 e0       	ldi	r27, 0x03	; 3
 7de:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__muluhisi3>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	68 94       	set
 7e8:	15 f8       	bld	r1, 5
 7ea:	b6 94       	lsr	r11
 7ec:	a7 94       	ror	r10
 7ee:	97 94       	ror	r9
 7f0:	87 94       	ror	r8
 7f2:	16 94       	lsr	r1
 7f4:	d1 f7       	brne	.-12     	; 0x7ea <M_Timer0_SetTime+0x26>
 7f6:	c5 01       	movw	r24, r10
 7f8:	b4 01       	movw	r22, r8
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 806:	67 2b       	or	r22, r23
 808:	68 2b       	or	r22, r24
 80a:	69 2b       	or	r22, r25
 80c:	89 f4       	brne	.+34     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80e:	cf ef       	ldi	r28, 0xFF	; 255
 810:	c1 50       	subi	r28, 0x01	; 1
 812:	cc 2e       	mov	r12, r28
 814:	d1 2c       	mov	r13, r1
 816:	e1 2c       	mov	r14, r1
 818:	f1 2c       	mov	r15, r1
 81a:	c5 01       	movw	r24, r10
 81c:	b4 01       	movw	r22, r8
 81e:	a7 01       	movw	r20, r14
 820:	96 01       	movw	r18, r12
 822:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 826:	67 2b       	or	r22, r23
 828:	68 2b       	or	r22, r24
 82a:	69 2b       	or	r22, r25
 82c:	89 f3       	breq	.-30     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 82e:	05 c0       	rjmp	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 830:	c1 2c       	mov	r12, r1
 832:	d1 2c       	mov	r13, r1
 834:	76 01       	movw	r14, r12
 836:	ca 94       	dec	r12
 838:	cf ef       	ldi	r28, 0xFF	; 255
 83a:	c5 01       	movw	r24, r10
 83c:	b4 01       	movw	r22, r8
 83e:	a7 01       	movw	r20, r14
 840:	96 01       	movw	r18, r12
 842:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 846:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Timer0_NumberOfCompareMatch>
 84a:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Timer0_NumberOfCompareMatch+0x1>
 84e:	40 93 6b 00 	sts	0x006B, r20	; 0x80006b <Timer0_NumberOfCompareMatch+0x2>
 852:	50 93 6c 00 	sts	0x006C, r21	; 0x80006c <Timer0_NumberOfCompareMatch+0x3>
 856:	c1 50       	subi	r28, 0x01	; 1
 858:	cc bf       	out	0x3c, r28	; 60
 85a:	cf 91       	pop	r28
 85c:	ff 90       	pop	r15
 85e:	ef 90       	pop	r14
 860:	df 90       	pop	r13
 862:	cf 90       	pop	r12
 864:	bf 90       	pop	r11
 866:	af 90       	pop	r10
 868:	9f 90       	pop	r9
 86a:	8f 90       	pop	r8
 86c:	08 95       	ret

0000086e <M_Timer0_Start>:
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	81 60       	ori	r24, 0x01	; 1
 872:	83 bf       	out	0x33, r24	; 51
 874:	83 b7       	in	r24, 0x33	; 51
 876:	8d 7f       	andi	r24, 0xFD	; 253
 878:	83 bf       	out	0x33, r24	; 51
 87a:	83 b7       	in	r24, 0x33	; 51
 87c:	84 60       	ori	r24, 0x04	; 4
 87e:	83 bf       	out	0x33, r24	; 51
 880:	08 95       	ret

00000882 <M_Timer0_Stop>:
 882:	83 b7       	in	r24, 0x33	; 51
 884:	8e 7f       	andi	r24, 0xFE	; 254
 886:	83 bf       	out	0x33, r24	; 51
 888:	83 b7       	in	r24, 0x33	; 51
 88a:	8d 7f       	andi	r24, 0xFD	; 253
 88c:	83 bf       	out	0x33, r24	; 51
 88e:	83 b7       	in	r24, 0x33	; 51
 890:	8b 7f       	andi	r24, 0xFB	; 251
 892:	83 bf       	out	0x33, r24	; 51
 894:	08 95       	ret

00000896 <M_Timer0_SetCallBack>:
}


void M_Timer0_SetCallBack(void (*Ptr)(void))
{
	CallBack = Ptr;
 896:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <CallBack+0x1>
 89a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <CallBack>
 89e:	08 95       	ret

000008a0 <__vector_10>:
	}
	
}
#elif TIMER0_MODE == CTC_MODE
ISR(TIMER0_COMP_vect)
{
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 93       	push	r18
 8ac:	3f 93       	push	r19
 8ae:	4f 93       	push	r20
 8b0:	5f 93       	push	r21
 8b2:	6f 93       	push	r22
 8b4:	7f 93       	push	r23
 8b6:	8f 93       	push	r24
 8b8:	9f 93       	push	r25
 8ba:	af 93       	push	r26
 8bc:	bf 93       	push	r27
 8be:	ef 93       	push	r30
 8c0:	ff 93       	push	r31
	static u32 Local_u32_Counter = 0;
	Local_u32_Counter++;
 8c2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Local_u32_Counter.1671>
 8c6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Local_u32_Counter.1671+0x1>
 8ca:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <Local_u32_Counter.1671+0x2>
 8ce:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <Local_u32_Counter.1671+0x3>
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Local_u32_Counter.1671>
 8dc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Local_u32_Counter.1671+0x1>
 8e0:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <Local_u32_Counter.1671+0x2>
 8e4:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <Local_u32_Counter.1671+0x3>
	if(Local_u32_Counter == Timer0_NumberOfCompareMatch)
 8e8:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <Timer0_NumberOfCompareMatch>
 8ec:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <Timer0_NumberOfCompareMatch+0x1>
 8f0:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <Timer0_NumberOfCompareMatch+0x2>
 8f4:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <Timer0_NumberOfCompareMatch+0x3>
 8f8:	84 17       	cp	r24, r20
 8fa:	95 07       	cpc	r25, r21
 8fc:	a6 07       	cpc	r26, r22
 8fe:	b7 07       	cpc	r27, r23
 900:	69 f4       	brne	.+26     	; 0x91c <__vector_10+0x7c>
	{
		CallBack();
 902:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBack>
 906:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBack+0x1>
 90a:	09 95       	icall
		Local_u32_Counter = 0;
 90c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Local_u32_Counter.1671>
 910:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Local_u32_Counter.1671+0x1>
 914:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Local_u32_Counter.1671+0x2>
 918:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Local_u32_Counter.1671+0x3>
		
	}
	
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <M_Twi_Init>:
{
	SetBit(TWCR,5);
	SetBit(TWCR,7);                //to clear the flag
	while ((GetBit(TWCR,7)) == 0);
	while ((TWSR & 0xF8) != REP_START_ACK);
}
 93e:	8c e0       	ldi	r24, 0x0C	; 12
 940:	80 b9       	out	0x00, r24	; 0
 942:	86 b7       	in	r24, 0x36	; 54
 944:	84 60       	ori	r24, 0x04	; 4
 946:	86 bf       	out	0x36, r24	; 54
 948:	08 95       	ret

0000094a <M_Twi_StartCondition>:
 94a:	84 ea       	ldi	r24, 0xA4	; 164
 94c:	86 bf       	out	0x36, r24	; 54
 94e:	06 b6       	in	r0, 0x36	; 54
 950:	07 fe       	sbrs	r0, 7
 952:	fd cf       	rjmp	.-6      	; 0x94e <M_Twi_StartCondition+0x4>
 954:	08 95       	ret

00000956 <M_Twi_SendByte>:
 956:	83 b9       	out	0x03, r24	; 3
 958:	84 e8       	ldi	r24, 0x84	; 132
 95a:	86 bf       	out	0x36, r24	; 54
 95c:	06 b6       	in	r0, 0x36	; 54
 95e:	07 fe       	sbrs	r0, 7
 960:	fd cf       	rjmp	.-6      	; 0x95c <M_Twi_SendByte+0x6>
 962:	08 95       	ret

00000964 <M_Twi_ReadByte>:
 964:	84 e8       	ldi	r24, 0x84	; 132
 966:	86 bf       	out	0x36, r24	; 54
 968:	06 b6       	in	r0, 0x36	; 54
 96a:	07 fe       	sbrs	r0, 7
 96c:	fd cf       	rjmp	.-6      	; 0x968 <M_Twi_ReadByte+0x4>
 96e:	83 b1       	in	r24, 0x03	; 3
 970:	08 95       	ret

00000972 <M_Twi_StopCondition>:
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 972:	84 e9       	ldi	r24, 0x94	; 148
 974:	86 bf       	out	0x36, r24	; 54
 976:	08 95       	ret

00000978 <M_Uart_Init>:

#include "Uart.h"

void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 978:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 97a:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 97c:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 97e:	87 e6       	ldi	r24, 0x67	; 103
 980:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 982:	86 e8       	ldi	r24, 0x86	; 134
 984:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 986:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 988:	53 9a       	sbi	0x0a, 3	; 10
 98a:	08 95       	ret

0000098c <M_Uart_SendByte>:
}

void M_Uart_SendByte(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 98c:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 98e:	5e 9b       	sbis	0x0b, 6	; 11
 990:	fe cf       	rjmp	.-4      	; 0x98e <M_Uart_SendByte+0x2>
}
 992:	08 95       	ret

00000994 <M_Uart_ReceiveByte>:

u8   M_Uart_ReceiveByte(void)
{
	while((GetBit(UCSRA,7)) == 0);
 994:	5f 9b       	sbis	0x0b, 7	; 11
 996:	fe cf       	rjmp	.-4      	; 0x994 <M_Uart_ReceiveByte>
	return UDR;
 998:	8c b1       	in	r24, 0x0c	; 12
}
 99a:	08 95       	ret

0000099c <__udivmodsi4>:
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	1a 2e       	mov	r1, r26
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	fd 01       	movw	r30, r26
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__udivmodsi4_ep>

000009a8 <__udivmodsi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	ee 1f       	adc	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	a2 17       	cp	r26, r18
 9b2:	b3 07       	cpc	r27, r19
 9b4:	e4 07       	cpc	r30, r20
 9b6:	f5 07       	cpc	r31, r21
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__udivmodsi4_ep>
 9ba:	a2 1b       	sub	r26, r18
 9bc:	b3 0b       	sbc	r27, r19
 9be:	e4 0b       	sbc	r30, r20
 9c0:	f5 0b       	sbc	r31, r21

000009c2 <__udivmodsi4_ep>:
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a 94       	dec	r1
 9cc:	69 f7       	brne	.-38     	; 0x9a8 <__udivmodsi4_loop>
 9ce:	60 95       	com	r22
 9d0:	70 95       	com	r23
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	bd 01       	movw	r22, r26
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret

000009e0 <__muluhisi3>:
 9e0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__umulhisi3>
 9e4:	a5 9f       	mul	r26, r21
 9e6:	90 0d       	add	r25, r0
 9e8:	b4 9f       	mul	r27, r20
 9ea:	90 0d       	add	r25, r0
 9ec:	a4 9f       	mul	r26, r20
 9ee:	80 0d       	add	r24, r0
 9f0:	91 1d       	adc	r25, r1
 9f2:	11 24       	eor	r1, r1
 9f4:	08 95       	ret

000009f6 <__umulhisi3>:
 9f6:	a2 9f       	mul	r26, r18
 9f8:	b0 01       	movw	r22, r0
 9fa:	b3 9f       	mul	r27, r19
 9fc:	c0 01       	movw	r24, r0
 9fe:	a3 9f       	mul	r26, r19
 a00:	70 0d       	add	r23, r0
 a02:	81 1d       	adc	r24, r1
 a04:	11 24       	eor	r1, r1
 a06:	91 1d       	adc	r25, r1
 a08:	b2 9f       	mul	r27, r18
 a0a:	70 0d       	add	r23, r0
 a0c:	81 1d       	adc	r24, r1
 a0e:	11 24       	eor	r1, r1
 a10:	91 1d       	adc	r25, r1
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
