
Door_Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8d  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076d  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051f  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000358  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	    M_Uart_Init();
  80:	0e 94 e5 01 	call	0x3ca	; 0x3ca <M_Uart_Init>
		H_Leds_Init();
  84:	0e 94 b1 00 	call	0x162	; 0x162 <H_Leds_Init>
		H_Buzzer_Init();
  88:	0e 94 a7 00 	call	0x14e	; 0x14e <H_Buzzer_Init>
		u8 Str [4];
		u8 Password[4] = {'1','2','3','4'};
  8c:	81 e3       	ldi	r24, 0x31	; 49
  8e:	8d 83       	std	Y+5, r24	; 0x05
  90:	82 e3       	ldi	r24, 0x32	; 50
  92:	8e 83       	std	Y+6, r24	; 0x06
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	8f 83       	std	Y+7, r24	; 0x07
  98:	84 e3       	ldi	r24, 0x34	; 52
  9a:	88 87       	std	Y+8, r24	; 0x08
		int counter = 0;
		int check = 0;
		int trials = 0;
  9c:	00 e0       	ldi	r16, 0x00	; 0
  9e:	10 e0       	ldi	r17, 0x00	; 0
		H_Leds_Init();
		H_Buzzer_Init();
		u8 Str [4];
		u8 Password[4] = {'1','2','3','4'};
		int counter = 0;
		int check = 0;
  a0:	c1 2c       	mov	r12, r1
  a2:	d1 2c       	mov	r13, r1
	    M_Uart_Init();
		H_Leds_Init();
		H_Buzzer_Init();
		u8 Str [4];
		u8 Password[4] = {'1','2','3','4'};
		int counter = 0;
  a4:	e1 2c       	mov	r14, r1
  a6:	f1 2c       	mov	r15, r1
		int check = 0;
		int trials = 0;
    while (1) 
    {   u8 msg = 0;
		msg = M_Uart_Receive();
  a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <M_Uart_Receive>
		if (msg != 0){
  ac:	88 23       	and	r24, r24
  ae:	09 f4       	brne	.+2      	; 0xb2 <main+0x46>
  b0:	44 c0       	rjmp	.+136    	; 0x13a <main+0xce>
			Str[counter]=msg;
  b2:	e1 e0       	ldi	r30, 0x01	; 1
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	ee 0d       	add	r30, r14
  bc:	ff 1d       	adc	r31, r15
  be:	80 83       	st	Z, r24
			counter++;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	e8 1a       	sub	r14, r24
  c4:	f8 0a       	sbc	r15, r24
  c6:	39 c0       	rjmp	.+114    	; 0x13a <main+0xce>
		}
	
	       if(counter == 4){
			for(int i = 0;i<4;i++){
				if(Str[i] == Password[i]){
  c8:	91 91       	ld	r25, Z+
  ca:	8d 91       	ld	r24, X+
  cc:	98 13       	cpse	r25, r24
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <main+0x6a>
				  check++;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	c8 1a       	sub	r12, r24
  d4:	d8 0a       	sbc	r13, r24
			Str[counter]=msg;
			counter++;
		}
	
	       if(counter == 4){
			for(int i = 0;i<4;i++){
  d6:	2e 17       	cp	r18, r30
  d8:	3f 07       	cpc	r19, r31
  da:	b1 f7       	brne	.-20     	; 0xc8 <main+0x5c>
				if(Str[i] == Password[i]){
				  check++;
				}
			}
			if(check == 4){M_Uart_Transmit('T');}
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	c8 16       	cp	r12, r24
  e0:	d1 04       	cpc	r13, r1
  e2:	21 f4       	brne	.+8      	; 0xec <main+0x80>
  e4:	84 e5       	ldi	r24, 0x54	; 84
  e6:	0e 94 ef 01 	call	0x3de	; 0x3de <M_Uart_Transmit>
  ea:	0b c0       	rjmp	.+22     	; 0x102 <main+0x96>
			if(check  < 4){M_Uart_Transmit('F');
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	c8 16       	cp	r12, r24
  f0:	d1 04       	cpc	r13, r1
  f2:	3c f4       	brge	.+14     	; 0x102 <main+0x96>
  f4:	86 e4       	ldi	r24, 0x46	; 70
  f6:	0e 94 ef 01 	call	0x3de	; 0x3de <M_Uart_Transmit>
			trials++; counter = 0;}
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	e1 2c       	mov	r14, r1
 100:	f1 2c       	mov	r15, r1
		}
		if(trials == 1){H_Leds_On(LED0);}
 102:	01 30       	cpi	r16, 0x01	; 1
 104:	11 05       	cpc	r17, r1
 106:	21 f4       	brne	.+8      	; 0x110 <main+0xa4>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 be 00 	call	0x17c	; 0x17c <H_Leds_On>
 10e:	0e c0       	rjmp	.+28     	; 0x12c <main+0xc0>
		if(trials == 2){H_Leds_On(LED1);}
 110:	02 30       	cpi	r16, 0x02	; 2
 112:	11 05       	cpc	r17, r1
 114:	21 f4       	brne	.+8      	; 0x11e <main+0xb2>
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 be 00 	call	0x17c	; 0x17c <H_Leds_On>
 11c:	c5 cf       	rjmp	.-118    	; 0xa8 <main+0x3c>
		if(trials == 3){H_Leds_On(LED2);}
 11e:	03 30       	cpi	r16, 0x03	; 3
 120:	11 05       	cpc	r17, r1
 122:	21 f4       	brne	.+8      	; 0x12c <main+0xc0>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 be 00 	call	0x17c	; 0x17c <H_Leds_On>
 12a:	be cf       	rjmp	.-132    	; 0xa8 <main+0x3c>
		if(trials == 4){H_Buzzer_On();}
 12c:	04 30       	cpi	r16, 0x04	; 4
 12e:	11 05       	cpc	r17, r1
 130:	09 f0       	breq	.+2      	; 0x134 <main+0xc8>
 132:	ba cf       	rjmp	.-140    	; 0xa8 <main+0x3c>
 134:	0e 94 ac 00 	call	0x158	; 0x158 <H_Buzzer_On>
 138:	b7 cf       	rjmp	.-146    	; 0xa8 <main+0x3c>
		if (msg != 0){
			Str[counter]=msg;
			counter++;
		}
	
	       if(counter == 4){
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	e8 16       	cp	r14, r24
 13e:	f1 04       	cpc	r15, r1
 140:	01 f7       	brne	.-64     	; 0x102 <main+0x96>
 142:	fe 01       	movw	r30, r28
 144:	31 96       	adiw	r30, 0x01	; 1
 146:	de 01       	movw	r26, r28
 148:	15 96       	adiw	r26, 0x05	; 5
 14a:	9d 01       	movw	r18, r26
 14c:	bd cf       	rjmp	.-134    	; 0xc8 <main+0x5c>

0000014e <H_Buzzer_Init>:
 */ 
#include "Buzzer.h"

void H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZER_PIN,OUTPUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <M_Dio_PinMode>
 156:	08 95       	ret

00000158 <H_Buzzer_On>:
}
void H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <M_Dio_PinWrite>
 160:	08 95       	ret

00000162 <H_Leds_Init>:
 */ 
#include "Leds.h"

void H_Leds_Init(void)
{
	M_Dio_PinMode(LED0_PIN,OUTPUT);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <M_Dio_PinMode>
	M_Dio_PinMode(LED1_PIN,OUTPUT);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8b e0       	ldi	r24, 0x0B	; 11
 16e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <M_Dio_PinMode>
	M_Dio_PinMode(LED2_PIN,OUTPUT);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <M_Dio_PinMode>
 17a:	08 95       	ret

0000017c <H_Leds_On>:
}
void H_Leds_On(u8 Local_u8_LedNum)
{
	switch(Local_u8_LedNum)
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	49 f0       	breq	.+18     	; 0x192 <H_Leds_On+0x16>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	61 f0       	breq	.+24     	; 0x19c <H_Leds_On+0x20>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	71 f4       	brne	.+28     	; 0x1a4 <H_Leds_On+0x28>
	{
		case LED0: M_Dio_PinWrite(LED0_PIN,HIGH);  break;
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <M_Dio_PinWrite>
 190:	08 95       	ret
		case LED1: M_Dio_PinWrite(LED1_PIN,HIGH);  break;
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <M_Dio_PinWrite>
 19a:	08 95       	ret
		case LED2: M_Dio_PinWrite(LED2_PIN,HIGH);  break;
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <M_Dio_PinWrite>
 1a4:	08 95       	ret

000001a6 <M_Dio_PinMode>:
 */ 

#include "Dio.h"
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 1a6:	9d ec       	ldi	r25, 0xCD	; 205
 1a8:	89 9f       	mul	r24, r25
 1aa:	91 2d       	mov	r25, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	29 2f       	mov	r18, r25
 1b0:	26 95       	lsr	r18
 1b2:	26 95       	lsr	r18
 1b4:	26 95       	lsr	r18
 1b6:	22 0f       	add	r18, r18
 1b8:	32 2f       	mov	r19, r18
 1ba:	33 0f       	add	r19, r19
 1bc:	33 0f       	add	r19, r19
 1be:	23 0f       	add	r18, r19
 1c0:	82 1b       	sub	r24, r18
 1c2:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 1c4:	96 95       	lsr	r25
 1c6:	96 95       	lsr	r25
 1c8:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <M_Dio_PinMode+0x2e>
 1ce:	62 30       	cpi	r22, 0x02	; 2
 1d0:	c1 f1       	breq	.+112    	; 0x242 <M_Dio_PinMode+0x9c>
 1d2:	08 95       	ret
	{
		case OUTPUT:
		switch(Local_u8_Port)
 1d4:	92 30       	cpi	r25, 0x02	; 2
 1d6:	a1 f0       	breq	.+40     	; 0x200 <M_Dio_PinMode+0x5a>
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <M_Dio_PinMode+0x3a>
 1da:	91 30       	cpi	r25, 0x01	; 1
 1dc:	31 f0       	breq	.+12     	; 0x1ea <M_Dio_PinMode+0x44>
 1de:	08 95       	ret
 1e0:	93 30       	cpi	r25, 0x03	; 3
 1e2:	c9 f0       	breq	.+50     	; 0x216 <M_Dio_PinMode+0x70>
 1e4:	94 30       	cpi	r25, 0x04	; 4
 1e6:	11 f1       	breq	.+68     	; 0x22c <M_Dio_PinMode+0x86>
 1e8:	08 95       	ret
		{
			case 1: SetBit(DDRA,Local_u8_Pin); break;
 1ea:	3a b3       	in	r19, 0x1a	; 26
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <M_Dio_PinMode+0x50>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	2a 95       	dec	r18
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <M_Dio_PinMode+0x4c>
 1fa:	83 2b       	or	r24, r19
 1fc:	8a bb       	out	0x1a, r24	; 26
 1fe:	08 95       	ret
			case 2: SetBit(DDRB,Local_u8_Pin); break;
 200:	37 b3       	in	r19, 0x17	; 23
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <M_Dio_PinMode+0x66>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	2a 95       	dec	r18
 20e:	e2 f7       	brpl	.-8      	; 0x208 <M_Dio_PinMode+0x62>
 210:	83 2b       	or	r24, r19
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
			case 3: SetBit(DDRC,Local_u8_Pin); break;
 216:	34 b3       	in	r19, 0x14	; 20
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <M_Dio_PinMode+0x7c>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <M_Dio_PinMode+0x78>
 226:	83 2b       	or	r24, r19
 228:	84 bb       	out	0x14, r24	; 20
 22a:	08 95       	ret
			case 4: SetBit(DDRD,Local_u8_Pin); break;
 22c:	31 b3       	in	r19, 0x11	; 17
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <M_Dio_PinMode+0x92>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <M_Dio_PinMode+0x8e>
 23c:	83 2b       	or	r24, r19
 23e:	81 bb       	out	0x11, r24	; 17
 240:	08 95       	ret
			default:                           break;
		}break;
		case INPUT:
		switch(Local_u8_Port)
 242:	92 30       	cpi	r25, 0x02	; 2
 244:	a9 f0       	breq	.+42     	; 0x270 <M_Dio_PinMode+0xca>
 246:	18 f4       	brcc	.+6      	; 0x24e <M_Dio_PinMode+0xa8>
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	31 f0       	breq	.+12     	; 0x258 <M_Dio_PinMode+0xb2>
 24c:	08 95       	ret
 24e:	93 30       	cpi	r25, 0x03	; 3
 250:	d9 f0       	breq	.+54     	; 0x288 <M_Dio_PinMode+0xe2>
 252:	94 30       	cpi	r25, 0x04	; 4
 254:	29 f1       	breq	.+74     	; 0x2a0 <M_Dio_PinMode+0xfa>
 256:	08 95       	ret
		{
			case 1: ClrBit(DDRA,Local_u8_Pin); break;
 258:	3a b3       	in	r19, 0x1a	; 26
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <M_Dio_PinMode+0xbe>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <M_Dio_PinMode+0xba>
 268:	80 95       	com	r24
 26a:	83 23       	and	r24, r19
 26c:	8a bb       	out	0x1a, r24	; 26
 26e:	08 95       	ret
			case 2: ClrBit(DDRB,Local_u8_Pin); break;
 270:	37 b3       	in	r19, 0x17	; 23
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <M_Dio_PinMode+0xd6>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	2a 95       	dec	r18
 27e:	e2 f7       	brpl	.-8      	; 0x278 <M_Dio_PinMode+0xd2>
 280:	80 95       	com	r24
 282:	83 23       	and	r24, r19
 284:	87 bb       	out	0x17, r24	; 23
 286:	08 95       	ret
			case 3: ClrBit(DDRC,Local_u8_Pin); break;
 288:	34 b3       	in	r19, 0x14	; 20
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <M_Dio_PinMode+0xee>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <M_Dio_PinMode+0xea>
 298:	80 95       	com	r24
 29a:	83 23       	and	r24, r19
 29c:	84 bb       	out	0x14, r24	; 20
 29e:	08 95       	ret
			case 4: ClrBit(DDRD,Local_u8_Pin); break;
 2a0:	31 b3       	in	r19, 0x11	; 17
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <M_Dio_PinMode+0x106>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	2a 95       	dec	r18
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <M_Dio_PinMode+0x102>
 2b0:	80 95       	com	r24
 2b2:	83 23       	and	r24, r19
 2b4:	81 bb       	out	0x11, r24	; 17
 2b6:	08 95       	ret

000002b8 <M_Dio_PinWrite>:
default: break;
	}
}
void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin  = Local_u8_Num % 10;
 2b8:	9d ec       	ldi	r25, 0xCD	; 205
 2ba:	89 9f       	mul	r24, r25
 2bc:	91 2d       	mov	r25, r1
 2be:	11 24       	eor	r1, r1
 2c0:	29 2f       	mov	r18, r25
 2c2:	26 95       	lsr	r18
 2c4:	26 95       	lsr	r18
 2c6:	26 95       	lsr	r18
 2c8:	22 0f       	add	r18, r18
 2ca:	32 2f       	mov	r19, r18
 2cc:	33 0f       	add	r19, r19
 2ce:	33 0f       	add	r19, r19
 2d0:	23 0f       	add	r18, r19
 2d2:	82 1b       	sub	r24, r18
 2d4:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
 2d6:	96 95       	lsr	r25
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
	switch (Local_u8_Mode)
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <M_Dio_PinWrite+0x2e>
 2e0:	62 30       	cpi	r22, 0x02	; 2
 2e2:	c1 f1       	breq	.+112    	; 0x354 <M_Dio_PinWrite+0x9c>
 2e4:	08 95       	ret
	{
		case HIGH:
		switch(Local_u8_Port)
 2e6:	92 30       	cpi	r25, 0x02	; 2
 2e8:	a1 f0       	breq	.+40     	; 0x312 <M_Dio_PinWrite+0x5a>
 2ea:	18 f4       	brcc	.+6      	; 0x2f2 <M_Dio_PinWrite+0x3a>
 2ec:	91 30       	cpi	r25, 0x01	; 1
 2ee:	31 f0       	breq	.+12     	; 0x2fc <M_Dio_PinWrite+0x44>
 2f0:	08 95       	ret
 2f2:	93 30       	cpi	r25, 0x03	; 3
 2f4:	c9 f0       	breq	.+50     	; 0x328 <M_Dio_PinWrite+0x70>
 2f6:	94 30       	cpi	r25, 0x04	; 4
 2f8:	11 f1       	breq	.+68     	; 0x33e <M_Dio_PinWrite+0x86>
 2fa:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin); break;
 2fc:	3b b3       	in	r19, 0x1b	; 27
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <M_Dio_PinWrite+0x50>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	2a 95       	dec	r18
 30a:	e2 f7       	brpl	.-8      	; 0x304 <M_Dio_PinWrite+0x4c>
 30c:	83 2b       	or	r24, r19
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin); break;
 312:	38 b3       	in	r19, 0x18	; 24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <M_Dio_PinWrite+0x66>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	2a 95       	dec	r18
 320:	e2 f7       	brpl	.-8      	; 0x31a <M_Dio_PinWrite+0x62>
 322:	83 2b       	or	r24, r19
 324:	88 bb       	out	0x18, r24	; 24
 326:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin); break;
 328:	35 b3       	in	r19, 0x15	; 21
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <M_Dio_PinWrite+0x7c>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	2a 95       	dec	r18
 336:	e2 f7       	brpl	.-8      	; 0x330 <M_Dio_PinWrite+0x78>
 338:	83 2b       	or	r24, r19
 33a:	85 bb       	out	0x15, r24	; 21
 33c:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin); break;
 33e:	32 b3       	in	r19, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <M_Dio_PinWrite+0x92>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	2a 95       	dec	r18
 34c:	e2 f7       	brpl	.-8      	; 0x346 <M_Dio_PinWrite+0x8e>
 34e:	83 2b       	or	r24, r19
 350:	82 bb       	out	0x12, r24	; 18
 352:	08 95       	ret
			default:                           break;
		}break;
		case LOW:
		switch(Local_u8_Port)
 354:	92 30       	cpi	r25, 0x02	; 2
 356:	a9 f0       	breq	.+42     	; 0x382 <M_Dio_PinWrite+0xca>
 358:	18 f4       	brcc	.+6      	; 0x360 <M_Dio_PinWrite+0xa8>
 35a:	91 30       	cpi	r25, 0x01	; 1
 35c:	31 f0       	breq	.+12     	; 0x36a <M_Dio_PinWrite+0xb2>
 35e:	08 95       	ret
 360:	93 30       	cpi	r25, 0x03	; 3
 362:	d9 f0       	breq	.+54     	; 0x39a <M_Dio_PinWrite+0xe2>
 364:	94 30       	cpi	r25, 0x04	; 4
 366:	29 f1       	breq	.+74     	; 0x3b2 <M_Dio_PinWrite+0xfa>
 368:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin); break;
 36a:	3b b3       	in	r19, 0x1b	; 27
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <M_Dio_PinWrite+0xbe>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <M_Dio_PinWrite+0xba>
 37a:	80 95       	com	r24
 37c:	83 23       	and	r24, r19
 37e:	8b bb       	out	0x1b, r24	; 27
 380:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin); break;
 382:	38 b3       	in	r19, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <M_Dio_PinWrite+0xd6>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <M_Dio_PinWrite+0xd2>
 392:	80 95       	com	r24
 394:	83 23       	and	r24, r19
 396:	88 bb       	out	0x18, r24	; 24
 398:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin); break;
 39a:	35 b3       	in	r19, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <M_Dio_PinWrite+0xee>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	2a 95       	dec	r18
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <M_Dio_PinWrite+0xea>
 3aa:	80 95       	com	r24
 3ac:	83 23       	and	r24, r19
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin); break;
 3b2:	32 b3       	in	r19, 0x12	; 18
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <M_Dio_PinWrite+0x106>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	2a 95       	dec	r18
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <M_Dio_PinWrite+0x102>
 3c2:	80 95       	com	r24
 3c4:	83 23       	and	r24, r19
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	08 95       	ret

000003ca <M_Uart_Init>:
 */ 

#include "Uart.h"
void M_Uart_Init(void)
{
	ClrBit(DDRD,0); //to enable input circuit for RX pin
 3ca:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,1); //to enable output circuit for TX pin
 3cc:	89 9a       	sbi	0x11, 1	; 17
	
	u8 Local_u8_UCSRC = 0b10000000;
	//to select char size = 8-bits
	SetBit(Local_u8_UCSRC,2);
	SetBit(Local_u8_UCSRC,1);
	ClrBit(UCSRB,2);
 3ce:	52 98       	cbi	0x0a, 2	; 10
	SetBit(Local_u8_UCSRC,5);
	#endif
	//to select stop bit -> 1 bit
	ClrBit(Local_u8_UCSRC,3);
	
	UBRRL = ((u32)F_OSC * 1000000 / ((u32)16 * BAUD_RATE)) - 1;
 3d0:	87 e6       	ldi	r24, 0x67	; 103
 3d2:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = Local_u8_UCSRC;
 3d4:	86 e8       	ldi	r24, 0x86	; 134
 3d6:	80 bd       	out	0x20, r24	; 32
	
	SetBit(UCSRB,4); //to enable receive circuit  RX
 3d8:	54 9a       	sbi	0x0a, 4	; 10
	SetBit(UCSRB,3); //to enable transmit circuit TX
 3da:	53 9a       	sbi	0x0a, 3	; 10
 3dc:	08 95       	ret

000003de <M_Uart_Transmit>:
}
void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
 3de:	8c b9       	out	0x0c, r24	; 12
	while((GetBit(UCSRA,6)) == 0);
 3e0:	5e 9b       	sbis	0x0b, 6	; 11
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <M_Uart_Transmit+0x2>
}
 3e4:	08 95       	ret

000003e6 <M_Uart_Receive>:
u8   M_Uart_Receive(void)
{
	while((GetBit(UCSRA,7)) == 0);
 3e6:	5f 9b       	sbis	0x0b, 7	; 11
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <M_Uart_Receive>
	return UDR;
 3ea:	8c b1       	in	r24, 0x0c	; 12
 3ec:	08 95       	ret

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
